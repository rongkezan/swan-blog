<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式事务</title>
      <link href="/swan-blog/2023/04/25/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%AE%BE%E8%AE%A1/"/>
      <url>/swan-blog/2023/04/25/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><h3 id="2PC-流程"><a href="#2PC-流程" class="headerlink" title="2PC 流程"></a>2PC 流程</h3><p>协调者询问每个服务是否可以提交，任何一个服务拒绝，事务管理器全部回滚。</p><p>阶段1：投票，协调者让每个服务都执行SQL，但是不提交。</p><p>阶段2：每个服务都返回OK以后，协调者统一提交</p><h3 id="2PC-问题"><a href="#2PC-问题" class="headerlink" title="2PC 问题"></a>2PC 问题</h3><p>协调者与服务交互超时：协调者有超时机制，如果在一定的时间内未收到客户端的消息默认失败，全部回滚</p><p>如果某个服务提交失败了，只能进行人工补偿（定时任务）</p><p>同步阻塞，单点故障</p><h3 id="2PC-实现方式"><a href="#2PC-实现方式" class="headerlink" title="2PC 实现方式"></a>2PC 实现方式</h3><p>Spring + JTA（XA 协议的 Java 实现）</p><h3 id="2PC-扩展"><a href="#2PC-扩展" class="headerlink" title="2PC 扩展"></a>2PC 扩展</h3><p>LCN：占用链接资源</p><p>Seata AT：不占用链接资源，直接落库提交，做好的镜像记录，回滚的时候回滚镜像记录</p><h3 id="2PC-流程图"><a href="#2PC-流程图" class="headerlink" title="2PC 流程图"></a>2PC 流程图</h3><p><img src="https://img-blog.csdnimg.cn/20210303100135119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><blockquote><p>在两阶段上增加了：客户端超时机制和预提交机制，实际工作中不会使用</p></blockquote><ol><li>CanCommit：询问</li><li>preCommit：预提交</li><li>doCommit：提交</li></ol><h3 id="2PC-问题-1"><a href="#2PC-问题-1" class="headerlink" title="2PC 问题"></a>2PC 问题</h3><p>只有协调者有超时机制，参与者没有。</p><p>如果协调者挂了，那么参与者将会一直等待，3PC是为了解决这个问题而出现的。</p><p><strong>3PC解决该问题</strong></p><p>协调者和参与者都有超时机制</p><ul><li>如果第一阶段参与者没有反馈，那么协调者 发送回滚指令</li><li>如果第一阶段协调者没有返回，那么参与者 自动回滚</li><li>如果第二阶段参与者没有反馈，那么协调者发送回滚指令</li><li>如果第二阶段协调者没有返回，那么参与者 <strong>自动提交</strong></li></ul><h3 id="3PC-问题"><a href="#3PC-问题" class="headerlink" title="3PC 问题"></a>3PC 问题</h3><p>如果第二阶段协调者发送的是回滚指令，但是没发送成功，为了保证事务的完整性，3PC最终也会提交。</p><h3 id="3PC-流程图"><a href="#3PC-流程图" class="headerlink" title="3PC 流程图"></a>3PC 流程图</h3><p><img src="https://img-blog.csdnimg.cn/20210124101902970.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a>TCC</h2><ol><li><p>Try：预先占有资源</p></li><li><p>Confirm：确认提交实际操作资源</p></li><li><p>Cancel：取消占有，即把那些执行成功的回滚。</p></li></ol><p><strong>使用场景</strong>：对分布式事务一致性要求高，如跟钱相关的。</p><p><strong>缺点</strong>：重耦合，需要手写补偿逻辑。</p><p><strong>分布式事务框架</strong>：ByteTCC、himly、tcc-transaction</p><p><strong>举例说明</strong>：支付订单、扣减1库存、增加10积分</p><ol><li>try<ol><li>将订单状态更新为 <code>UPDATING</code></li><li>将库存冻结1个，<code>position</code> - 1，<code>freeze_position</code> + 1</li><li>对积分进行预增加，<code>prepare_add_score</code> + 10</li></ol></li><li>Confirm：引入TCC事务框架，各个服务Try都成功后，事务框架可以感知到，然后执行各自的确认逻辑<ol><li>将订单状态更新为 <code>PAYED</code></li><li>将冻结的库存减1，<code>freeze_position</code> - 1</li><li>去掉预增加积分，进行实际增加，<code>prepare_add_score</code> - 10，<code>score</code> + 10</li></ol></li><li>Cancel：引入TCC事务框架，某服务执行失败后，事务框架可以感知到，然后执行各自的回滚逻辑<ol><li>将订单状态更新为 <code>CANCELED</code></li><li>将库存恢复，<code>position</code> + 1，<code>freeze_position</code> - 1</li><li>减少预增加的积分，<code>prepare_add_score</code> - 10</li></ol></li></ol><p><strong>可能产生的问题</strong></p><p>TCC 事务框架会通过活动日志记录各个服务的状态</p><p>举个例子，比如发现某个服务的 Cancel 或者 Confirm 一直没成功，会不停的重试调用他的 Cancel 或者 Confirm 逻辑，务必要他成功！当然了，如果你的代码没有写什么 bug，有充足的测试，而且 Try 阶段都基本尝试了一下，那么其实一般 Confirm、Cancel 都是可以成功的</p><p><img src="https://img-blog.csdnimg.cn/20210106221025144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="本地消息表"><a href="#本地消息表" class="headerlink" title="本地消息表"></a>本地消息表</h2><blockquote><p>本地事务 + 定时任务 + 消息队列 + 事件表</p><p>适用于高并发场景下的分布式事务，但只能保证最终一致性</p></blockquote><ol><li>A系统先插入数据到业务表，再插入事件表，最后向MQ发送消息</li><li>B系统接收到消息，更新业务表，注意幂等处理，防止重复消费。</li><li>B系统执行成功后，返回ACK，更新事件表。</li><li>B系统执行失败，就不会更新事件表，A系统会定时扫描本地消息表，如果有未处理消息，会再次发送到MQ。</li></ol><p><strong>缺陷</strong>：能保证事务的一致性，但是时效性太差</p><p>事件表字段</p><p>事件ID与事件类型可以组成一个唯一索引，作为幂等号。</p><p>如下图可以使用订单号作为事件ID，事件类型为申购产品支付。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">event_id: 事件ID</span><br><span class="line">event_type: 事件类型</span><br><span class="line">event_process: 事件环节 <span class="operator">|</span> <span class="keyword">new</span>（新事件）、published（事件已发布）、processed（事件已处理）</span><br><span class="line">event_content: 事件内容，保存事件发生时需要传递的数据</span><br></pre></td></tr></table></figure><p>流程图</p><p><img src="https://img-blog.csdnimg.cn/2b5091e4859447808fe126e09ac594d4.png" alt="在这里插入图片描述"></p><h2 id="最大努力通知"><a href="#最大努力通知" class="headerlink" title="最大努力通知"></a>最大努力通知</h2><ol><li>业务活动的主动方，在完成业务处理之后，向业务活动的被动方发送消息，允许消息丢失。</li><li>主动方可以设置时间阶梯型通知规则，在通知失败后按规则重复通知，直到通知N次后不再通知，可以告警提醒人工介入。</li><li>主动方提供校对查询接口给被动方按需校对查询，用于恢复丢失的业务消息。</li><li>业务活动的被动方如果正常接收了数据，就正常返回响应，并结束事务。</li><li>如果被动方没有正常接收，根据定时策略，向业务活动主动方查询，恢复丢失的业务消息。</li></ol><p><img src="https://img-blog.csdnimg.cn/d176d7b328844cb896e5342f4059656a.png" alt="在这里插入图片描述"></p><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>调用第三方接口，因为网络问题没有返回调用信息，这时候无法知道是否调用成功。</p><p>解决方案：被调用方回调。</p><p>举例：A服务 调用 B服务，B服务先立即返回，A服务将此次调用状态更改为 <code>Pending</code> ，B服务回调A服务后，A服务再将状态该为 <code>Finished</code></p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Seata</title>
      <link href="/swan-blog/2023/04/25/%E5%BC%80%E5%8F%91%E9%9B%86/Seata/"/>
      <url>/swan-blog/2023/04/25/%E5%BC%80%E5%8F%91%E9%9B%86/Seata/</url>
      
        <content type="html"><![CDATA[<h2 id="Seata-安装"><a href="#Seata-安装" class="headerlink" title="Seata 安装"></a>Seata 安装</h2><h3 id="下载seata-v1-6-1"><a href="#下载seata-v1-6-1" class="headerlink" title="下载seata v1.6.1"></a>下载seata v1.6.1</h3><p><a href="https://github.com/seata/seata/releases/tag/v1.6.1">https://github.com/seata/seata/releases/tag/v1.6.1</a></p><h3 id="修改-application-yml-配置"><a href="#修改-application-yml-配置" class="headerlink" title="修改 application.yml 配置"></a>修改 application.yml 配置</h3><p>解压后进入 .&#x2F;conf 目录，修改配置文件如下（ 使用db模式 ）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-server</span>  <span class="comment"># seata-server服务名</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-spring.xml</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;user.home&#125;/seata/runlogs</span>  <span class="comment"># 指定日志路径</span></span><br><span class="line">  <span class="attr">extend:</span></span><br><span class="line">    <span class="attr">logstash-appender:</span></span><br><span class="line">      <span class="attr">destination:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:4560</span></span><br><span class="line">    <span class="attr">kafka-appender:</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">topic:</span> <span class="string">logback_to_logstash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># seata可视化web界面账号密码</span></span><br><span class="line"><span class="attr">console:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">seata</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">seata</span></span><br><span class="line"></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="comment"># 配置中心</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="comment"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span> <span class="comment"># 指定配置中心为nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment"># nacos的ip端口</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span>    <span class="comment"># 对应的组，默认为DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">sardine</span> <span class="comment"># 对应的命名空间，在nacos中配置</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">seataServer.properties</span> <span class="comment"># nacos中存放seata的配置文件，后面会提该文件的使用方式，相当于seata服务启动的时候需要注册到nacos，并使用nacos中的配置文件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注册中心与上述config同理</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">sardine</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class="line">    <span class="attr">tokenValidityInMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">ignore:</span></span><br><span class="line">      <span class="attr">urls:</span> <span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span></span><br></pre></td></tr></table></figure><h3 id="修改Nacos配置"><a href="#修改Nacos配置" class="headerlink" title="修改Nacos配置"></a>修改Nacos配置</h3><p>在 nacos 新建 seataServer.properties ，注意事项：</p><ul><li><p>修改service.vgroupMapping.mygroup&#x3D;default该值，其中mygroup可以自定义，后面我们自己的服务启动时，配置文件中需要指定该group。</p></li><li><p>修改store.mode store.lock.mode store.session.mode这三个值为db，才能让seata连接到下面的数据库中。</p></li><li><p>修改store.db配置项下的配置，连接到自己的数据库。</p></li><li><p>该文件参数的具体作用参考官网：seata配置文件详解（官网）</p></li><li><p>该配置源文件存放在seata目录下：seata&#x2F;script&#x2F;config-center&#x2F;config.txt</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html</span></span><br><span class="line"><span class="comment">#Transport configuration, for client and server</span></span><br><span class="line"><span class="attr">transport.type</span>=<span class="string">TCP</span></span><br><span class="line"><span class="attr">transport.server</span>=<span class="string">NIO</span></span><br><span class="line"><span class="attr">transport.heartbeat</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">transport.enableTmClientBatchSendRequest</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.enableRmClientBatchSendRequest</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">transport.enableTcServerBatchSendResponse</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.rpcRmRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.rpcTmRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.rpcTcRequestTimeout</span>=<span class="string">30000</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadPrefix</span>=<span class="string">NettyBoss</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadPrefix</span>=<span class="string">NettyServerNIOWorker</span></span><br><span class="line"><span class="attr">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class="string">NettyServerBizHandler</span></span><br><span class="line"><span class="attr">transport.threadFactory.shareBossWorker</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class="string">NettyClientSelector</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientSelectorThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class="string">NettyClientWorkerThread</span></span><br><span class="line"><span class="attr">transport.threadFactory.bossThreadSize</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">transport.threadFactory.workerThreadSize</span>=<span class="string">default</span></span><br><span class="line"><span class="attr">transport.shutdown.wait</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">transport.serialization</span>=<span class="string">seata</span></span><br><span class="line"><span class="attr">transport.compressor</span>=<span class="string">none</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Transaction routing rules configuration, only for the client</span></span><br><span class="line"><span class="comment"># 此处的mygroup名字可以自定义，只修改这个值即可</span></span><br><span class="line"><span class="attr">service.vgroupMapping.mygroup</span>=<span class="string">default</span></span><br><span class="line"><span class="comment">#If you use a registry, you can ignore it</span></span><br><span class="line"><span class="attr">service.default.grouplist</span>=<span class="string">127.0.0.1:8091</span></span><br><span class="line"><span class="attr">service.enableDegrade</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">service.disableGlobalTransaction</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Transaction rule configuration, only for the client</span></span><br><span class="line"><span class="attr">client.rm.asyncCommitBufferLimit</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">client.rm.lock.retryInterval</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.rm.lock.retryTimes</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.rm.reportRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.rm.tableMetaCheckerInterval</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.rm.sqlParserType</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">client.rm.reportSuccessEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.sagaBranchRegisterEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.rm.sagaJsonParser</span>=<span class="string">fastjson</span></span><br><span class="line"><span class="attr">client.rm.tccActionInterceptorOrder</span>=<span class="string">-2147482648</span></span><br><span class="line"><span class="attr">client.tm.commitRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.rollbackRetryCount</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">client.tm.defaultGlobalTransactionTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">client.tm.degradeCheck</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckAllowTimes</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">client.tm.degradeCheckPeriod</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">client.tm.interceptorOrder</span>=<span class="string">-2147482648</span></span><br><span class="line"><span class="attr">client.undo.dataValidation</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.logSerialization</span>=<span class="string">jackson</span></span><br><span class="line"><span class="attr">client.undo.onlyCareUpdateColumns</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.undo.logSaveDays</span>=<span class="string">7</span></span><br><span class="line"><span class="attr">server.undo.logDeletePeriod</span>=<span class="string">86400000</span></span><br><span class="line"><span class="attr">client.undo.logTable</span>=<span class="string">undo_log</span></span><br><span class="line"><span class="attr">client.undo.compress.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">client.undo.compress.type</span>=<span class="string">zip</span></span><br><span class="line"><span class="attr">client.undo.compress.threshold</span>=<span class="string">64k</span></span><br><span class="line"><span class="comment">#For TCC transaction mode</span></span><br><span class="line"><span class="attr">tcc.fence.logTableName</span>=<span class="string">tcc_fence_log</span></span><br><span class="line"><span class="attr">tcc.fence.cleanPeriod</span>=<span class="string">1h</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Log rule configuration, for client and server</span></span><br><span class="line"><span class="attr">log.exceptionRate</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.</span></span><br><span class="line"><span class="comment"># 默认为file，一定要改为db，我们自己的服务启动会连接不到seata</span></span><br><span class="line"><span class="attr">store.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.lock.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">store.session.mode</span>=<span class="string">db</span></span><br><span class="line"><span class="comment">#Used for password encryption</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.</span></span><br><span class="line"><span class="comment"># 修改mysql的配置</span></span><br><span class="line"><span class="attr">store.db.datasource</span>=<span class="string">druid</span></span><br><span class="line"><span class="attr">store.db.dbType</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">store.db.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 指定seata的数据库，下面会提</span></span><br><span class="line"><span class="attr">store.db.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">store.db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">store.db.minConn</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">store.db.maxConn</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">store.db.globalTable</span>=<span class="string">global_table</span></span><br><span class="line"><span class="attr">store.db.branchTable</span>=<span class="string">branch_table</span></span><br><span class="line"><span class="attr">store.db.distributedLockTable</span>=<span class="string">distributed_lock</span></span><br><span class="line"><span class="attr">store.db.queryLimit</span>=<span class="string">100</span></span><br><span class="line"><span class="attr">store.db.lockTable</span>=<span class="string">lock_table</span></span><br><span class="line"><span class="attr">store.db.maxWait</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Transaction rule configuration, only for the server</span></span><br><span class="line"><span class="attr">server.recovery.committingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.asynCommittingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.rollbackingRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.recovery.timeoutRetryPeriod</span>=<span class="string">1000</span></span><br><span class="line"><span class="attr">server.maxCommitRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.maxRollbackRetryTimeout</span>=<span class="string">-1</span></span><br><span class="line"><span class="attr">server.rollbackRetryTimeoutUnlockEnable</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.distributedLockExpireTime</span>=<span class="string">10000</span></span><br><span class="line"><span class="attr">server.xaerNotaRetryTimeout</span>=<span class="string">60000</span></span><br><span class="line"><span class="attr">server.session.branchAsyncQueueSize</span>=<span class="string">5000</span></span><br><span class="line"><span class="attr">server.session.enableBranchAsyncRemove</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">server.enableParallelRequestHandle</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#Metrics configuration, only for the server</span></span><br><span class="line"><span class="attr">metrics.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">metrics.registryType</span>=<span class="string">compact</span></span><br><span class="line"><span class="attr">metrics.exporterList</span>=<span class="string">prometheus</span></span><br><span class="line"><span class="attr">metrics.exporterPrometheusPort</span>=<span class="string">9898</span></span><br></pre></td></tr></table></figure><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><ol><li>新建数据库 seata 后，执行 .&#x2F;script&#x2F;server&#x2F;db&#x2F;mysql.sql 脚本</li><li>业务数据库增加 undo_log 表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动-Seata"><a href="#启动-Seata" class="headerlink" title="启动 Seata"></a>启动 Seata</h3><p>进入 .&#x2F;bin 目录下执行 seata-server 启动 seata</p><p>可以通过 <a href="http://127.0.0.1:7091/#/login">http://127.0.0.1:7091/#/login</a> 进入 seata 控制台，用户名密码都默认为 seata</p><h2 id="Spring-整合-Seata"><a href="#Spring-整合-Seata" class="headerlink" title="Spring 整合 Seata"></a>Spring 整合 Seata</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Alibaba Seata --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改服务配置文件"><a href="#修改服务配置文件" class="headerlink" title="修改服务配置文件"></a>修改服务配置文件</h3><p>其中 <code>tx-service-group</code> 配置项要与上述提到的 <code>service.vgroupMapping.mygroup=default</code> 中的group保持一致，<br><code>seata.service.vgroup-mapping.mygroup</code> 中的<code>mygroup</code>同理。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">tx-service-group:</span> <span class="string">mygroup</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">vgroup-mapping:</span></span><br><span class="line">      <span class="attr">mygroup:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>我们自己的服务要与<code>seata-server</code>服务在同一个<code>namespace</code>下</p><p>查看服务是否启动成功</p><p>查看nacos的对应的namespace中服务是否注册成功</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlobalTransactional</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrder</span><span class="params">(OrderDo order)</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟 库存已经扣减，但是新增订单失败 的情况</span></span><br><span class="line">    storageClient.reduce(<span class="number">10L</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    orderMapper.insert(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Seata-AT-模式"><a href="#Seata-AT-模式" class="headerlink" title="Seata AT 模式"></a>Seata AT 模式</h2><h3 id="整体机制"><a href="#整体机制" class="headerlink" title="整体机制"></a>整体机制</h3><p>两阶段提交协议（2PC）的演变：</p><ul><li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li><li>二阶段：<ul><li>提交异步化，非常快速地完成。</li><li>回滚通过一阶段的回滚日志进行反向补偿。</li></ul></li></ul><h3 id="写隔离"><a href="#写隔离" class="headerlink" title="写隔离"></a>写隔离</h3><ul><li>一阶段本地事务提交前，需要确保先拿到 <strong>全局锁</strong> 。</li><li>拿不到 <strong>全局锁</strong> ，不能提交本地事务。</li><li>拿 <strong>全局锁</strong> 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。</li></ul><p>以一个示例来说明：</p><p>两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。</p><ul><li>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m &#x3D; 1000 - 100 &#x3D; 900。本地事务提交前，先拿到该记录的 <strong>全局锁</strong> ，本地提交释放本地锁。</li><li>tx2 后开始，开启本地事务，拿到本地锁，更新操作 m &#x3D; 900 - 100 &#x3D; 800。本地事务提交前，尝试拿该记录的 <strong>全局锁</strong> ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 <strong>全局锁</strong> 。</li></ul><p><img src="https://seata.io/img/seata_at-1.png" alt="Write-Isolation: Commit"></p><p>tx1 二阶段全局提交，释放 <strong>全局锁</strong> 。tx2 拿到 <strong>全局锁</strong> 提交本地事务。</p><p><img src="https://seata.io/img/seata_at-2.png" alt="Write-Isolation: Rollback"></p><h3 id="读隔离"><a href="#读隔离" class="headerlink" title="读隔离"></a>读隔离</h3><p>在数据库本地事务隔离级别 <strong>读已提交（Read Committed）</strong> 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 <strong>读未提交（Read Uncommitted）</strong> 。</p><p>如果应用在特定场景下，必需要求全局的 <strong>读已提交</strong> ，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。</p><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p>以一个示例来说明整个 AT 分支的工作过程。</p><p>业务表：<code>product</code></p><table><thead><tr><th>Field</th><th>Type</th><th>Key</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td><td>PRI</td></tr><tr><td>name</td><td>varchar(100)</td><td></td></tr><tr><td>since</td><td>varchar(100)</td><td></td></tr></tbody></table><p>AT 分支事务的业务逻辑：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;GTS&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h4><p>过程：</p><ol><li>解析 SQL：得到 SQL 的类型（UPDATE），表（product），条件（where name &#x3D; ‘TXC’）等相关的信息。</li><li>查询前镜像：根据解析得到的条件信息，生成查询语句，定位数据。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, since <span class="keyword">from</span> product <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span>;</span><br></pre></td></tr></table></figure><p>得到前镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>TXC</td><td>2014</td></tr></tbody></table><ol><li>执行业务 SQL：更新这条记录的 name 为 ‘GTS’。</li><li>查询后镜像：根据前镜像的结果，通过 <strong>主键</strong> 定位数据。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, since <span class="keyword">from</span> product <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>得到后镜像：</p><table><thead><tr><th>id</th><th>name</th><th>since</th></tr></thead><tbody><tr><td>1</td><td>GTS</td><td>2014</td></tr></tbody></table><ol><li>插入回滚日志：把前后镜像数据以及业务 SQL 相关的信息组成一条回滚日志记录，插入到 <code>UNDO_LOG</code> 表中。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;branchId&quot;</span><span class="punctuation">:</span> <span class="number">641789253</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;undoItems&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;afterImage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GTS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;since&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;beforeImage&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;rows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TXC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;since&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;product&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sqlType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UPDATE&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;xid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xid:xxx&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>提交前，向 TC 注册分支：申请 <code>product</code> 表中，主键值等于 1 的记录的 <strong>全局锁</strong> 。</li><li>本地事务提交：业务数据的更新和前面步骤中生成的 UNDO LOG 一并提交。</li><li>将本地事务提交的结果上报给 TC。</li></ol><h4 id="二阶段-回滚"><a href="#二阶段-回滚" class="headerlink" title="二阶段-回滚"></a>二阶段-回滚</h4><ol><li>收到 TC 的分支回滚请求，开启一个本地事务，执行如下操作。</li><li>通过 XID 和 Branch ID 查找到相应的 UNDO LOG 记录。</li><li>数据校验：拿 UNDO LOG 中的后镜与当前数据进行比较，如果有不同，说明数据被当前全局事务之外的动作做了修改。这种情况，需要根据配置策略来做处理，详细的说明在另外的文档中介绍。</li><li>根据 UNDO LOG 中的前镜像和业务 SQL 的相关信息生成并执行回滚的语句：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> product <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;TXC&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ol><li>提交本地事务。并把本地事务的执行结果（即分支事务回滚的结果）上报给 TC。</li></ol><h4 id="二阶段-提交"><a href="#二阶段-提交" class="headerlink" title="二阶段-提交"></a>二阶段-提交</h4><ol><li>收到 TC 的分支提交请求，把请求放入一个异步任务的队列中，马上返回提交成功的结果给 TC。</li><li>异步任务阶段的分支提交请求将异步和批量地删除相应 UNDO LOG 记录。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 安装运行</title>
      <link href="/swan-blog/2023/04/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C/"/>
      <url>/swan-blog/2023/04/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>下载最新的 binary release，修改配置（原因是默认配置消耗太多内存）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi runserver.sh</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br><span class="line"></span><br><span class="line">vi runbroker.sh</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn128m&quot;</span><br></pre></td></tr></table></figure><p>Linux 启动&#x2F;关闭 RocketMQ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start Name Server</span></span><br><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start Broker</span></span><br><span class="line">nohup sh mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Shutdown Name Server</span></span><br><span class="line">sh mqshutdown namesrv</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Shutdown Broker</span></span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure><p>Windows 启动 RocketMQ</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start Name Server</span></span><br><span class="line">start mqnamesrv.cmd</span><br><span class="line"><span class="comment"># Start Broker</span></span><br><span class="line">start mqbroker.cmd -n localhost:9876</span><br></pre></td></tr></table></figure><p>查看启动日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 namesrv 的启动日志</span></span><br><span class="line"><span class="built_in">tail</span> -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line"><span class="comment"># 查看 broker 的启动日志</span></span><br><span class="line"><span class="built_in">tail</span> -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生产者</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">消费者</span></span><br><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>下载RocketMQ-Dashboard <a href="https://github.com/apache/rocketmq-dashboard/releases">https://github.com/apache/rocketmq-dashboard/releases</a></p><p>解压后修改 rocketmq-dashboard 模块中的 application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq.config.namesrvAddr</span>=<span class="string">localhost:9876</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">12581</span></span><br></pre></td></tr></table></figure><p>在 rocketmq-dashboard 目录下编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>运行编译完的 jar 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar rocketmq-dashboard-1.0.0.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 整合 SpringBoot</title>
      <link href="/swan-blog/2023/04/23/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E6%95%B4%E5%90%88SpringBoot/"/>
      <url>/swan-blog/2023/04/23/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E6%95%B4%E5%90%88SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>依赖引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- RocketMQ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12580</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-rocketmq</span></span><br><span class="line"><span class="attr">rocketMq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">$&#123;spring.application.name&#125;</span>       <span class="comment"># 发送同一类消息设置为同一个Group，保证唯一</span></span><br><span class="line">    <span class="attr">send-message-timeout:</span> <span class="number">10000</span>             <span class="comment"># 发送消息的超时时间，默认3000</span></span><br><span class="line">    <span class="attr">retry-times-when-send-failed:</span> <span class="number">2</span>         <span class="comment"># 发送消息失败重试次数，默认2</span></span><br><span class="line">    <span class="attr">retry-times-when-send-async-failed:</span> <span class="number">2</span>   <span class="comment"># 发送异步消息失败重试次数，默认2</span></span><br><span class="line">    <span class="attr">max-message-size:</span> <span class="number">4096</span>                  <span class="comment"># 消息的最大长度，默认 1024*1024*4 = 4M</span></span><br><span class="line">    <span class="attr">compress-message-body-threshold:</span> <span class="number">4096</span>   <span class="comment"># 压缩消息阈值，默认4K</span></span><br><span class="line">    <span class="attr">retry-next-server:</span> <span class="literal">false</span>                <span class="comment"># 是否在内部发送失败时重试另一个Broker，默认false</span></span><br></pre></td></tr></table></figure><p>重写 rocketMQMessageConverter</p><blockquote><p>RocketMQ内置使用的转换器是<strong>RocketMQMessageConverter</strong>，转换Json时使用的是MappingJackson2MessageConverter，但是这个转换器不支持时间类型。所以转换LocalDateTime时会报错</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RocketMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQMessageConverter <span class="title function_">rocketMQMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RocketMQMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RocketMQMessageConverter</span>();</span><br><span class="line">        <span class="type">CompositeMessageConverter</span> <span class="variable">compositeMessageConverter</span> <span class="operator">=</span> (CompositeMessageConverter) converter.getMessageConverter();</span><br><span class="line">        List&lt;MessageConverter&gt; messageConverters = compositeMessageConverter.getConverters();</span><br><span class="line">        <span class="keyword">for</span> (MessageConverter messageConverter : messageConverters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (messageConverter <span class="keyword">instanceof</span> MappingJackson2MessageConverter) &#123;</span><br><span class="line">                <span class="type">MappingJackson2MessageConverter</span> <span class="variable">mappingJackson2MessageConverter</span> <span class="operator">=</span> (MappingJackson2MessageConverter) messageConverter;</span><br><span class="line">                <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> mappingJackson2MessageConverter.getObjectMapper();</span><br><span class="line">                objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 领域模型</title>
      <link href="/swan-blog/2023/04/23/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/"/>
      <url>/swan-blog/2023/04/23/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://rocketmq.apache.org/zh/assets/images/mainarchi-9b036e7ff5133d050950f25838367a17.png" alt="领域模型"></p><p>如上图所示，Apache RocketMQ 中消息的生命周期主要分为消息生产、消息存储、消息消费这三部分。</p><p>生产者生产消息并发送至 Apache RocketMQ 服务端，消息被存储在服务端的主题中，消费者通过订阅主题消费消息。</p><p><strong>消息生产</strong></p><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/04producer">生产者（Producer）</a>：</p><p>Apache RocketMQ 中用于产生消息的运行实体，一般集成于业务调用链路的上游。生产者是轻量级匿名无身份的。</p><p><strong>消息存储</strong></p><ul><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/02topic">主题（Topic）</a>：</p><p>Apache RocketMQ 消息传输和存储的分组容器，主题内部由多个队列组成，消息的存储和水平扩展实际是通过主题内的队列实现的。</p></li><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/03messagequeue">队列（MessageQueue）</a>：</p><p>Apache RocketMQ 消息传输和存储的实际单元容器，类比于其他消息队列中的分区。 Apache RocketMQ 通过流式特性的无限队列结构来存储消息，消息在队列内具备顺序性存储特征。</p></li><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/04message">消息（Message）</a>：</p><p>Apache RocketMQ 的最小传输单元。消息具备不可变性，在初始化发送和完成存储后即不可变。</p></li></ul><p><strong>消息消费</strong></p><ul><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/07consumergroup">消费者分组（ConsumerGroup）</a>：</p><p>Apache RocketMQ 发布订阅模型中定义的独立的消费身份分组，用于统一管理底层运行的多个消费者（Consumer）。同一个消费组的多个消费者必须保持消费逻辑和配置一致，共同分担该消费组订阅的消息，实现消费能力的水平扩展。</p></li><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/08consumer">消费者（Consumer）</a>：</p><p>Apache RocketMQ 消费消息的运行实体，一般集成在业务调用链路的下游。消费者必须被指定到某一个消费组中。</p></li><li><p><a href="https://rocketmq.apache.org/zh/docs/domainModel/09subscription">订阅关系（Subscription）</a>：</p><p>Apache RocketMQ 发布订阅模型中消息过滤、重试、消费进度的规则配置。订阅关系以消费组粒度进行管理，消费组通过定义订阅关系控制指定消费组下的消费者如何实现消息过滤、消费重试及消费进度恢复等。</p><p>Apache RocketMQ 的订阅关系除过滤表达式之外都是持久化的，即服务端重启或请求断开，订阅关系依然保留。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>支付系统设计</title>
      <link href="/swan-blog/2023/04/23/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/swan-blog/2023/04/23/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="热点账户余额变动"><a href="#热点账户余额变动" class="headerlink" title="热点账户余额变动"></a>热点账户余额变动</h2><p>由于Mysql更新数据有行锁的存在，当修改并发很高的时候，数据库很容易出现性能瓶颈</p><p><strong>解决方案</strong>：采用同步插入流水，异步更新余额的方式，也就是说，可以通过定时任务定时轮询流水表中未进行余额计算的记录，将其发生额进行累加后再异步更新到账户的余额表之中。</p><h2 id="记账死锁问题"><a href="#记账死锁问题" class="headerlink" title="记账死锁问题"></a>记账死锁问题</h2><p>A账户和B账户双方转账请求并发，账户系统对每个转账请求都会更新A、B余额，这两个更新需要在一个事务里，正常流程</p><p>线程1先更新A，再更新B，线程2先更新B，再更新A</p><p>线程1更新完A后会等待B的锁，不提交事务</p><p>线程2更新完B后会等待A的锁，不提交事务</p><p>这样两个线程互相等待锁，造成死锁。</p><p><strong>解决方案</strong>：更新时根据账户ID进行一个排序，总是保证A先更新。</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ 事务消息</title>
      <link href="/swan-blog/2023/04/21/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/"/>
      <url>/swan-blog/2023/04/21/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>指Producer端消息发送事件和本地事务事件，同时成功或同时失败</p><h2 id="正常事务发送与提交阶段"><a href="#正常事务发送与提交阶段" class="headerlink" title="正常事务发送与提交阶段"></a>正常事务发送与提交阶段</h2><ol><li>生产者发送一个半消息给broker(半消息是指的暂时不能消费的消息)</li><li>服务端响应</li><li>开始执行本地事务</li><li>根据本地事务的执行情况执行Commit或者Rollback</li></ol><h2 id="事务信息的补偿流程"><a href="#事务信息的补偿流程" class="headerlink" title="事务信息的补偿流程"></a>事务信息的补偿流程</h2><ol><li>如果broker长时间没有收到本地事务的执行状态,会向生产者发起一个确认回查的操作请求</li><li>生产者收到确认会查请求后,检查本地事务的执行状态</li><li>根据检查后的结果执行Commit或者Rollback操作，补偿阶段主要是用于解决生产者在发送Commit或者Rollback操作时发生超时或失败的情况</li></ol><p><img src="https://img-blog.csdnimg.cn/85e09f7030a4401bb70247600d93ccf0.png" alt="在这里插入图片描述"></p><h2 id="事务流程关键"><a href="#事务流程关键" class="headerlink" title="事务流程关键"></a>事务流程关键</h2><p>事务消息在一阶段对用户不可见</p><p>事务消息相对普通消息最大的特点就是一阶段发送的消息对用户是不可见的,也就是说消费者不能直接消费.这里RocketMQ实现方法是原消息的主题与消息消费队列,然后把主题改成RMQ_SYS_TRANS_HALF_TOPIC.这样由于消费者没有订阅这个主题,所以不会消费.</p><p>如何处理第二阶段的发送消息?</p><p>在本地事务执行完成后回向Broker发送Commit或者Rollback操作,此时如果在发送消息的时候生产者出故障了,要保证这条消息最终被消费,broker就会向服务端发送回查请求,确认本地事务的执行状态.当然RocketMQ并不会无休止的发送事务状态回查请求,默认是15次,如果15次回查还是无法得知事务的状态,RocketMQ默认回滚消息(broker就会将这条半消息删除)</p><p>事务的三种状态</p><ul><li>TransactionStatus.CommitTransaction：提交事务消息，消费者可以消费此消息</li><li>TransactionStatus.RollbackTransaction：回滚事务，它代表该消息将被删除，不允许被消费。</li><li>TransactionStatus.Unknown ：中间状态，它代表需要检查消息队列来确定状态。</li></ul><h2 id="事务消息约束"><a href="#事务消息约束" class="headerlink" title="事务消息约束"></a>事务消息约束</h2><ol><li>事务消息不支持定时和批量</li><li>为了避免一个消息被多次检查，导致半数队列消息堆积，RocketMQ限制了单个消息的默认检查次数为15次，通过修改broker配置文件中的transactionCheckMax参数进行调整</li><li>特定的时间段之后才检查事务，通过broker配置文件参数transactionTimeout或用户配置CHECK_IMMUNITY_TIME_IN_SECONDS调整时间</li><li>一个事务消息可能被检查或消费多次</li><li>提交过的消息重新放到用户目标主题可能会失败</li><li>事务消息的生产者ID不能与其他类型消息的生产者ID共享</li></ol><h2 id="事务消息使用"><a href="#事务消息使用" class="headerlink" title="事务消息使用"></a>事务消息使用</h2><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送事务消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> keith</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;sendTransactionMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTransactionMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OrderDo</span> <span class="variable">orderDo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDo</span>();</span><br><span class="line">        <span class="type">TransactionSendResult</span> <span class="variable">sendResult</span> <span class="operator">=</span> rocketMQTemplate.sendMessageInTransaction(<span class="string">&quot;tx-topic&quot;</span>,</span><br><span class="line">                MessageBuilder.withPayload(orderDo).setHeader(<span class="string">&quot;tx_id&quot;</span>, orderDo.getOrderId()).build(),</span><br><span class="line">                orderDo</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> sendResult.getTransactionId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者 – 接收消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> keith</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(</span></span><br><span class="line"><span class="meta">        topic = &quot;tx-topic&quot;, // topic：和生产者发送的topic相同</span></span><br><span class="line"><span class="meta">        consumerGroup = &quot;tx-msg-group&quot;,         // group：不用和生产者group相同</span></span><br><span class="line"><span class="meta">        selectorExpression = &quot;*&quot;,               // tag</span></span><br><span class="line"><span class="meta">        messageModel = MessageModel.CLUSTERING,</span></span><br><span class="line"><span class="meta">        consumeMode = ConsumeMode.ORDERLY</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTransactionConsumerService</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;OrderDo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(OrderDo orderDo)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收事务消息结果: &#123;&#125;&quot;</span>, orderDo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者 – 监听事务消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RocketMQTransactionListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderTransactionListenerImpl</span> <span class="keyword">implements</span> <span class="title class_">RocketMQLocalTransactionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以将事务状态存到redis，就不会有因为JVM重启后丢失事务状态的问题</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, RocketMQLocalTransactionState&gt; localTransactions = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">executeLocalTransaction</span><span class="params">(Message msg, Object arg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;执行本地事务, message: &#123;&#125;, arg: &#123;&#125;&quot;</span>, msg, arg);</span><br><span class="line">        <span class="type">OrderDo</span> <span class="variable">order</span> <span class="operator">=</span> (OrderDo) arg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行本地事务</span></span><br><span class="line">            localTransactions.put(order.getOrderId().toString(), RocketMQLocalTransactionState.UNKNOWN);</span><br><span class="line">            orderService.placeOrder(order);</span><br><span class="line">            localTransactions.put(order.getOrderId().toString(), RocketMQLocalTransactionState.COMMIT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 执行本地事务失败，回滚消息</span></span><br><span class="line">            log.warn(<span class="string">&quot;本地事务执行失败，回滚事务消息，arg: &#123;&#125;&quot;</span>, arg, e);</span><br><span class="line">            localTransactions.put(order.getOrderId().toString(), RocketMQLocalTransactionState.COMMIT);</span><br><span class="line">            <span class="keyword">return</span> RocketMQLocalTransactionState.ROLLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行本地事务成功，提交消息</span></span><br><span class="line">        <span class="keyword">return</span> RocketMQLocalTransactionState.COMMIT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RocketMQLocalTransactionState <span class="title function_">checkLocalTransaction</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">txId</span> <span class="operator">=</span> msg.getHeaders().get(<span class="string">&quot;tx_id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderId</span> <span class="operator">=</span> txId != <span class="literal">null</span> ? txId.toString() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        log.info(<span class="string">&quot;检查本地事务, orderId: &#123;&#125;&quot;</span>, orderId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询本地事务状态</span></span><br><span class="line">        <span class="type">RocketMQLocalTransactionState</span> <span class="variable">transactionState</span> <span class="operator">=</span> localTransactions.get(orderId);</span><br><span class="line">        log.info(<span class="string">&quot;查询本地事务状态结果: &#123;&#125;&quot;</span>, transactionState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回本地事务状态</span></span><br><span class="line">        <span class="keyword">return</span> transactionState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis 布隆过滤器</title>
      <link href="/swan-blog/2023/04/21/Redis/10.Redis%20%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/swan-blog/2023/04/21/Redis/10.Redis%20%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>布隆过滤器采用一个很长的二进制数组，通过一系列的Hash函数来确定该数据是否存在</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>防止缓存穿透</li><li>数据去重</li><li>过滤垃圾信息</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>布隆过滤器本质上是一个二进制数组，元素的值不是1就是0. 当我们存一个商品id为10的商品，假设我们经过三次哈希，存的数组下标为1，3，7，就将这三个下标的元素改为1.这样每次访问redis之前，先访问布隆过滤器。查询id为10的商品的时候，经过布隆过滤器的哈希算法，获取到该商品对应的下标是1，3，7。那么，如果这三个数组的下标对应的元素都为1 则表示存在该商品，放行这次请求。如果有一个为0，则不存在该商品。</p><p><strong>布隆过滤器判断存在不一定真的存在，但是，判断不存在则一定不存在。</strong></p><p><strong>针对布隆过滤器的一些误判，我们可以增加二进制数组位数或者增加Hash次数来解决。</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入Guava依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建一个测试类，存入100w个数据到布隆过滤器，同时用10w个不存在的数据测试误判率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RetailUserApplicationTests</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.BloomTest();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BloomTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 初始化误判个数</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="comment">// 相当于一个常量</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="comment">// 测试的10W个数据 也是常量 用于计算误判率</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">testCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100000&quot;</span>);</span><br><span class="line">        <span class="comment">// 百分比换算，还是常量</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">mult</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 第一个参数为数据类型，第二个数组长度，第三个误判率</span></span><br><span class="line">        BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), <span class="number">1000000L</span>, <span class="number">0.01</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 插入100w个数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 测试10W个不存在的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2000000</span>; i &lt;= <span class="number">2100000</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">mightContain</span> <span class="operator">=</span> bloomFilter.mightContain(i);</span><br><span class="line">            <span class="keyword">if</span> (mightContain) &#123;</span><br><span class="line">                count = count.add(one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;总耗时&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;MS&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;误判个数:&quot;</span> + count);</span><br><span class="line">        System.out.println(<span class="string">&quot;误判率:&quot;</span> + (count.divide(testCount)).multiply(mult) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>误判了1004个，符合我们设置的0.01误判率。</p><p><img src="https://img-blog.csdnimg.cn/ec9e4cbaea8648dd92d8b6988327abf3.png" alt="img"></p><h2 id="项目中使用布隆过滤器防止缓存穿透"><a href="#项目中使用布隆过滤器防止缓存穿透" class="headerlink" title="项目中使用布隆过滤器防止缓存穿透"></a>项目中使用布隆过滤器防止缓存穿透</h2><p>创建一个初始化布隆过滤器类。并实现CommandLineRunner接口，启动项目后执行。</p><p>初始化一个布隆过滤器，设置好我们对应的参数。之后将数据库中的数据使用put方法加入到布隆过滤器中。这里我放入的是商品的详情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.base.Charsets;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.BloomFilter;</span><br><span class="line"><span class="keyword">import</span> com.google.common.hash.Funnels;</span><br><span class="line"><span class="keyword">import</span> com.retail.constant.SkillConstants;</span><br><span class="line"><span class="keyword">import</span> com.retail.mapper.GoodsMapper;</span><br><span class="line"><span class="keyword">import</span> com.retail.pojo.resp.SkillActivityResp;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomInit</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsMapper goodsMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.bloomInit();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化布隆过滤器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BloomFilter <span class="title function_">bloomInit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化布隆过滤器，设置数据类型，数组长度和误差值</span></span><br><span class="line">        BloomFilter&lt;String&gt; bloomFilter = BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8), <span class="number">1000000L</span>, <span class="number">0.01</span>);</span><br><span class="line">        <span class="comment">// 获取要装入过滤器的数据</span></span><br><span class="line">        List&lt;SkillActivityResp&gt; skillActivityGoods = goodsMapper.getSkillActivityGoods();</span><br><span class="line">        <span class="comment">// 循环装填</span></span><br><span class="line">        <span class="keyword">for</span> (SkillActivityResp skillActivityGood : skillActivityGoods) &#123;</span><br><span class="line">            bloomFilter.put(SkillConstants.SKILL_GOODS + skillActivityGood.getShopId() + <span class="string">&quot;_&quot;</span> + skillActivityGood.getActivityId());</span><br><span class="line">            log.info(<span class="string">&quot;已加入数据[&#123;&#125;]到布隆过滤器...&quot;</span>, SkillConstants.SKILL_GOODS + skillActivityGood.getShopId() + <span class="string">&quot;_&quot;</span> + skillActivityGood.getActivityId());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;布隆过滤器装载完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bloomFilter;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后在获取商品详情的地方外面加一层布隆过滤器。先从布隆过滤器中获取值，如果有则放行，没有直接返回。有效解决了请求直接穿过redis，访问数据库所造成的不必要的压力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据商品id和活动id获取商品</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> shopId</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> activityId</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> activityId</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SkillActivityResp <span class="title function_">getGoodsByshopIdAndActivityId</span><span class="params">(Integer shopId, Integer activityId)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> bloomFilter.mightContain(SkillConstants.SKILL_GOODS + shopId + <span class="string">&quot;_&quot;</span> + activityId);</span><br><span class="line">    <span class="keyword">if</span> (!contains) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试从redis中获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">skillActivityResp</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(SkillConstants.SKILL_GOODS + shopId + <span class="string">&quot;_&quot;</span> + activityId);</span><br><span class="line">    <span class="keyword">if</span> (skillActivityResp == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">SkillActivityResp</span> <span class="variable">goods</span> <span class="operator">=</span> goodsMapper.getGoodsByshopIdAndActivityId(shopId,activityId);</span><br><span class="line">        <span class="comment">// 存入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(SkillConstants.SKILL_GOODS + shopId + <span class="string">&quot;_&quot;</span> + activityId, JSONObject.toJSONString(goods),<span class="number">24</span>, TimeUnit.HOURS);</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JSONObject.parseObject(skillActivityResp, SkillActivityResp.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 minio</title>
      <link href="/swan-blog/2023/03/06/Linux/Linux%20%E5%AE%89%E8%A3%85%20Minio/"/>
      <url>/swan-blog/2023/03/06/Linux/Linux%20%E5%AE%89%E8%A3%85%20Minio/</url>
      
        <content type="html"><![CDATA[<h2 id="获取Minio"><a href="#获取Minio" class="headerlink" title="获取Minio"></a>获取Minio</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line"><span class="built_in">chmod</span> +x minio</span><br></pre></td></tr></table></figure><h2 id="直接启动Minio"><a href="#直接启动Minio" class="headerlink" title="直接启动Minio"></a>直接启动Minio</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password ./minio server /mnt/data --console-address <span class="string">&quot;:9001&quot;</span></span><br></pre></td></tr></table></figure><h2 id="将Minio设置成服务启动"><a href="#将Minio设置成服务启动" class="headerlink" title="将Minio设置成服务启动"></a>将Minio设置成服务启动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入system目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/systemd/system/</span><br><span class="line"><span class="comment"># 创建 minio.service 文件</span></span><br><span class="line"><span class="built_in">touch</span> minio.service</span><br></pre></td></tr></table></figure><p><code>minio.service</code> 文件内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Minio Service</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;MINIO_ROOT_USER=admin&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;MINIO_ROOT_PASSWORD=minio123456&quot;</span></span><br><span class="line">ExecStart=/data/minio/minio server /data/minio/data --console-address <span class="string">&quot;:9001&quot;</span></span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">StandardOutput=/data/minio/logs/minio.log</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>加载服务文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>设计开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> minio.service</span><br></pre></td></tr></table></figure><p>启动minio</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start minio.service</span><br></pre></td></tr></table></figure><p>查看状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status minio.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Redis</title>
      <link href="/swan-blog/2023/03/06/Linux/Linux%20%E5%AE%89%E8%A3%85%20Redis/"/>
      <url>/swan-blog/2023/03/06/Linux/Linux%20%E5%AE%89%E8%A3%85%20Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf redis-7.0.5.tar.gz</span><br><span class="line"><span class="comment"># 执行编译安装</span></span><br><span class="line"><span class="built_in">cd</span> redis-7.0.5</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 默认安装路径在 /usr/local/bin 下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/bin</span><br></pre></td></tr></table></figure><h2 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis 服务端启动</span></span><br><span class="line">redis-server</span><br><span class="line"><span class="comment"># redis 客户端启动</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="comment"># redis 哨兵启动</span></span><br><span class="line">redis-sentinel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 二进制安装(CentOS7)</title>
      <link href="/swan-blog/2022/11/18/Linux/Linux%20%E5%AE%89%E8%A3%85%20Mysql/"/>
      <url>/swan-blog/2022/11/18/Linux/Linux%20%E5%AE%89%E8%A3%85%20Mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="下载官网压缩包"><a href="#下载官网压缩包" class="headerlink" title="下载官网压缩包"></a>下载官网压缩包</h2><p>下载地址</p><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><h2 id="下载mysql依赖"><a href="#下载mysql依赖" class="headerlink" title="下载mysql依赖"></a>下载mysql依赖</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询是否有libaio</span></span><br><span class="line">rpm -qa | grep libaio</span><br><span class="line"><span class="comment"># 下载libaio</span></span><br><span class="line">yum -y install libaio</span><br></pre></td></tr></table></figure><h2 id="解压并移动"><a href="#解压并移动" class="headerlink" title="解压并移动"></a>解压并移动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf mysql-5.7.39-el7-x86_64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> mysql-5.7.39-el7-x86_64.tar.gz /usr/local/mysql</span><br></pre></td></tr></table></figure><h2 id="创建mysql用户组"><a href="#创建mysql用户组" class="headerlink" title="创建mysql用户组"></a>创建mysql用户组</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql  </span><br><span class="line">useradd -g mysql mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /usr/local/mysql/</span><br></pre></td></tr></table></figure><h2 id="初始化mysql"><a href="#初始化mysql" class="headerlink" title="初始化mysql"></a>初始化mysql</h2><p>在 <code>bin</code> 目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld --initialize --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><h2 id="修改mysql配置"><a href="#修改mysql配置" class="headerlink" title="修改mysql配置"></a>修改mysql配置</h2><p>修改 <code>/etc/my.cnf</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改数据目录</span></span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"><span class="comment"># 修改sock文件位置</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"><span class="comment"># 修改日志文件位置</span></span><br><span class="line">log-error=/usr/local/mysql/log/mariadb.log</span><br><span class="line">pid-file=/usr/local/mysql/run/mariadb.pid</span><br></pre></td></tr></table></figure><p>完整配置文件 <code>my.cnf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="comment"># Settings user and group are ignored when systemd is used.</span></span><br><span class="line"><span class="comment"># If you need to run mysqld under a different user or group,</span></span><br><span class="line"><span class="comment"># customize your systemd unit file for mariadb according to the</span></span><br><span class="line"><span class="comment"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/usr/local/mysql/log/mariadb.log</span><br><span class="line">pid-file=/usr/local/mysql/run/mariadb.pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include all files from the config directory</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">!includedir /etc/my.cnf.d</span><br></pre></td></tr></table></figure><p>创建日志文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/mysql/log/</span><br><span class="line"><span class="built_in">touch</span> /usr/local/mysql/log/mariadb.log</span><br><span class="line"><span class="built_in">mkdir</span> /usr/local/mysql/run/</span><br><span class="line"><span class="built_in">touch</span> /usr/local/mysql/run/mariadb.pid</span><br></pre></td></tr></table></figure><h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure><p>测试是否创建成功，查看mysql版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="comment"># 停止命令</span></span><br><span class="line">service mysqld stop</span><br><span class="line"><span class="comment"># 重启命令</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h2 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h2><p>查看初始密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /root/.mysql_secret</span><br><span class="line">7IG=CSh_A&amp;V1</span><br></pre></td></tr></table></figure><p>登录mysql</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p<span class="string">&#x27;7IG=CSh_A&amp;V1&#x27;</span></span><br></pre></td></tr></table></figure><p>修改密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1：</span></span><br><span class="line">mysql&gt; ALTER USER USER() IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式2(如果是免密登录的话，无法使用方式1)：</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and Host =<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">use mysql;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>重新登录mysql</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p<span class="string">&#x27;123456&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Rancher 部署 Kubernetes</title>
      <link href="/swan-blog/2022/11/08/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Rancher%20%E9%83%A8%E7%BD%B2%20Kubernetes/"/>
      <url>/swan-blog/2022/11/08/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Rancher%20%E9%83%A8%E7%BD%B2%20Kubernetes/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><p>每一台主机都安装 Docker，参考 <a href="https://rongkezan.github.io/swan-blog/2022/11/01/Docker/Docker%20%E5%AE%89%E8%A3%85/">Docker 安装</a></p><h2 id="Rancher-说明"><a href="#Rancher-说明" class="headerlink" title="Rancher 说明"></a>Rancher 说明</h2><p>Rancher 是 K8S 多集群管理平台，类似的管理平台还有 KubeSphere、Kuboard 等</p><h2 id="Rancher-安装"><a href="#Rancher-安装" class="headerlink" title="Rancher 安装"></a>Rancher 安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rancher/rancher:v2.5.15</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/data/rancher_data</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged \</span><br><span class="line">-p 80:80 -p 443:443 \</span><br><span class="line">-v /opt/data/rancher_data:/var/lib/rancher \</span><br><span class="line">--restart=always \</span><br><span class="line">--name rancher-2.5.15 \</span><br><span class="line">rancher/rancher:v2.5.15</span><br></pre></td></tr></table></figure><h2 id="Rancher-使用"><a href="#Rancher-使用" class="headerlink" title="Rancher 使用"></a>Rancher 使用</h2><h3 id="Rancher-控制台"><a href="#Rancher-控制台" class="headerlink" title="Rancher 控制台"></a>Rancher 控制台</h3><p>设置密码，URL后登录到控制台，将语言改为中文</p><p><img src="https://img-blog.csdnimg.cn/e1d0dba3a80c4cfd988e1c25e17d9bd6.png" alt="在这里插入图片描述"></p><h3 id="通过-Rancher-创建-K8S-集群"><a href="#通过-Rancher-创建-K8S-集群" class="headerlink" title="通过 Rancher 创建 K8S 集群"></a>通过 Rancher 创建 K8S 集群</h3><p>添加集群 -&gt; 自定义集群</p><p><img src="https://img-blog.csdnimg.cn/889961c3c0274e6297b829070b45d8f1.png" alt="在这里插入图片描述"></p><p><img src="C:\Users\76405\AppData\Roaming\Typora\typora-user-images\image-20221108174742476.png" alt="image-20221108174742476"></p><p>输入集群名称，其他配置默认，点击页面最下方的 <code>下一步 </code> 完成集群创建</p><p><img src="https://img-blog.csdnimg.cn/56936e1ffe3b4f5b950b47d284110d8c.png" alt="在这里插入图片描述"></p><h3 id="添加-Master、Worker-节点"><a href="#添加-Master、Worker-节点" class="headerlink" title="添加 Master、Worker 节点"></a>添加 Master、Worker 节点</h3><p>可以通过 <code>集群 -&gt; Registration Cmd</code> 调出添加主机命令页面</p><p><img src="https://img-blog.csdnimg.cn/f4f56f2a035a40128047dec6ff35002e.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/79925989196040d5a8830fabe07ae1c5.png" alt="在这里插入图片描述"></p><h4 id="添加-Master-节点"><a href="#添加-Master-节点" class="headerlink" title="添加 Master 节点"></a>添加 Master 节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.5.15 --server https://172.23.184.237 --token bqlz9dfgp2rgrw9h9n96mmf8n5r5f5746qmtlqhv4mrm29nmkpfffk --ca-checksum ae74148c06e6b6a28df42fa95e691033adc54b4c272538749861246ce0aaec99 --etcd --controlplane</span><br></pre></td></tr></table></figure><h4 id="添加-Worker-节点"><a href="#添加-Worker-节点" class="headerlink" title="添加 Worker 节点"></a>添加 Worker 节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --privileged --restart=unless-stopped --net=host -v /etc/kubernetes:/etc/kubernetes -v /var/run:/var/run  rancher/rancher-agent:v2.5.15 --server https://172.23.184.237 --token bqlz9dfgp2rgrw9h9n96mmf8n5r5f5746qmtlqhv4mrm29nmkpfffk --ca-checksum ae74148c06e6b6a28df42fa95e691033adc54b4c272538749861246ce0aaec99 --worker</span><br></pre></td></tr></table></figure><h4 id="添加成功"><a href="#添加成功" class="headerlink" title="添加成功"></a>添加成功</h4><p>添加成功后如下图所示</p><p><img src="https://img-blog.csdnimg.cn/8ca4ae2c7e574a90be1aeef937220557.png" alt="在这里插入图片描述"></p><h3 id="通过-Rancher-执行-K8S-命令"><a href="#通过-Rancher-执行-K8S-命令" class="headerlink" title="通过 Rancher 执行 K8S 命令"></a>通过 Rancher 执行 K8S 命令</h3><p><img src="https://img-blog.csdnimg.cn/04cf0b6731ca43e7aaf9f27acbe41e5d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/8a7a718a05aa4bbdb7fae9c25979a4c9.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Rancher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装</title>
      <link href="/swan-blog/2022/11/01/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85/"/>
      <url>/swan-blog/2022/11/01/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker版本"><a href="#Docker版本" class="headerlink" title="Docker版本"></a>Docker版本</h2><p>Docker 分为 CE 和 EE 两大版本。</p><p>CE 即社区版（免费，支持周期 7 个月）</p><p>EE 即企业版，强调安全，付费使用，支持周期 24 个月</p><p>Docker CE 分为 stable test 和 nightly 三个更新频道。</p><p>官方网站上有各种环境下的安装指南，这里主要介绍Docker CE 在 CentOS上的安装。</p><h2 id="卸载旧版本的Docker"><a href="#卸载旧版本的Docker" class="headerlink" title="卸载旧版本的Docker"></a>卸载旧版本的Docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><h3 id="安装-yum-utils"><a href="#安装-yum-utils" class="headerlink" title="安装 yum-utils"></a>安装 yum-utils</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><h3 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="启动并开机运行-Docker"><a href="#启动并开机运行-Docker" class="headerlink" title="启动并开机运行 Docker"></a>启动并开机运行 Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure><h3 id="查看-Docker-版本"><a href="#查看-Docker-版本" class="headerlink" title="查看 Docker 版本"></a>查看 Docker 版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="Docker-配置"><a href="#Docker-配置" class="headerlink" title="Docker 配置"></a>Docker 配置</h2><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://7yti41gr.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>重新加载配置文件，重启docker使其生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx代理缓存区</title>
      <link href="/swan-blog/2022/10/24/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Nginx%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E5%8C%BA/"/>
      <url>/swan-blog/2022/10/24/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Nginx%E4%BB%A3%E7%90%86%E7%BC%93%E5%AD%98%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>浏览器出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net::ERR_CONTENT_LENGTH_MISMATCH 206 (Partial Content)</span><br></pre></td></tr></table></figure><p>原因是Nginx代理之后会有相应的代理缓存区，缓存区默认只有几十K，某些版本的nginx默认设置中没有相关处理，导致部分文件代理是会出现加载不全的现象，其实不仅仅是JS文件。只是因为框架的JS文件略大，所以经常出现类似问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在Nginx配置中，http块下加上如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_buffer_size 128k;</span><br><span class="line">proxy_buffers   32 128k;</span><br><span class="line">proxy_busy_buffers_size 128k;</span><br></pre></td></tr></table></figure><p>重启nginx即可</p>]]></content>
      
      
      <categories>
          
          <category> 线上问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 虚拟文件系统</title>
      <link href="/swan-blog/2022/10/24/Linux/Linux%20%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/swan-blog/2022/10/24/Linux/Linux%20%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="观察文件分区"><a href="#观察文件分区" class="headerlink" title="观察文件分区"></a>观察文件分区</h2><p>命令 <code>df -h</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        3.7G     0  3.7G   0% /dev</span><br><span class="line">tmpfs           3.7G     0  3.7G   0% /dev/shm</span><br><span class="line">tmpfs           3.7G  2.5M  3.7G   1% /run</span><br><span class="line">tmpfs           3.7G     0  3.7G   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1        40G   37G  1.1G  98% /</span><br><span class="line">tmpfs           3.7G   12K  3.7G   1% /var/lib/kubelet/pods/026a6dff-d5d0-451b-a5e9-ebd16a0952ea/volumes/kubernetes.io~secret/kube-proxy-token-297hw</span><br><span class="line">tmpfs           3.7G   12K  3.7G   1% /var/lib/kubelet/pods/cc5c4cb2-7677-41bd-9e59-c7ca6e6e57bd/volumes/kubernetes.io~secret/calico-node-token-5sq4k</span><br><span class="line">tmpfs           756M     0  756M   0% /run/user/0</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><blockquote><p>指向同一个物理文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># echo Hello &gt; 1.txt</span></span><br><span class="line">[root@node1 demo]<span class="comment"># ln 1.txt 2.txt</span></span><br></pre></td></tr></table></figure><p>stat 两个文件，发现这两个文件 <code>Inode</code> 一致</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># stat 1.txt </span></span><br><span class="line">  File: ‘1.txt’</span><br><span class="line">  Size: 6         Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd01h/64769dInode: 1179691     Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2022-10-14 15:12:36.007592557 +0800</span><br><span class="line">Modify: 2022-10-14 15:12:31.478424680 +0800</span><br><span class="line">Change: 2022-10-14 15:12:45.275936096 +0800</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># stat 2.txt</span></span><br><span class="line">  File: ‘2.txt’</span><br><span class="line">  Size: 6         Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd01h/64769dInode: 1179691     Links: 2</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2022-10-14 15:12:36.007592557 +0800</span><br><span class="line">Modify: 2022-10-14 15:12:31.478424680 +0800</span><br><span class="line">Change: 2022-10-14 15:12:45.275936096 +0800</span><br></pre></td></tr></table></figure><p>如果将某一个文件删掉不会有影响，只是指向该文件的指针会少1个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># rm -rf 1.txt </span></span><br><span class="line">[root@node1 demo]<span class="comment"># stat 2.txt</span></span><br><span class="line">  File: ‘2.txt’</span><br><span class="line">  Size: 6         Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd01h/64769dInode: 1179691     Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2022-10-14 15:12:36.007592557 +0800</span><br><span class="line">Modify: 2022-10-14 15:12:31.478424680 +0800</span><br><span class="line">Change: 2022-10-14 18:48:16.485278741 +0800</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h3><blockquote><p>相当于创建快捷方式</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># ln -s 2.txt 2s.txt</span></span><br><span class="line">[root@node1 demo]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">lrwxrwxrwx 1 root root 5 Oct 14 18:51 2s.txt -&gt; 2.txt</span><br><span class="line">-rw-r--r-- 1 root root 6 Oct 14 15:12 2.txt</span><br></pre></td></tr></table></figure><p>如果把源文件删了，那么软链接就会丢失，会报红</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 demo]<span class="comment"># rm -rf 2.txt </span></span><br><span class="line">[root@node1 demo]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx 1 root root 5 Oct 14 18:51 2s.txt -&gt; 2.txt</span><br></pre></td></tr></table></figure><h2 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h2><blockquote><p>文件描述符 就是 描述文件的具体信息，指针，偏移</p><p>内核为每一个进程各自维护了一套数据，数据中包含了进程的FD，即文件描述符</p></blockquote><p>查看文件描述符 <code>FD</code></p><p>$$ ：当前bash的进程ID号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 fd]<span class="comment"># cd /proc/$$/fd</span></span><br><span class="line">[root@node1 fd]<span class="comment"># lsof -op $$</span></span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE OFFSET     NODE NAME</span><br><span class="line">bash    3896 root  cwd    DIR    0,3        52168349 /proc/3896/fd</span><br><span class="line">bash    3896 root  rtd    DIR  253,1               2 /</span><br><span class="line">bash    3896 root  txt    REG  253,1          657149 /usr/bin/bash</span><br><span class="line">bash    3896 root  mem    REG  253,1          665045 /usr/lib/locale/locale-archive</span><br><span class="line">bash    3896 root  mem    REG  253,1          657092 /usr/lib64/libnss_files-2.17.so</span><br><span class="line">bash    3896 root  mem    REG  253,1          657074 /usr/lib64/libc-2.17.so</span><br><span class="line">bash    3896 root  mem    REG  253,1          657080 /usr/lib64/libdl-2.17.so</span><br><span class="line">bash    3896 root  mem    REG  253,1          657148 /usr/lib64/libtinfo.so.5.9</span><br><span class="line">bash    3896 root  mem    REG  253,1          657067 /usr/lib64/ld-2.17.so</span><br><span class="line">bash    3896 root  mem    REG  253,1          786746 /usr/lib64/gconv/gconv-modules.cache</span><br><span class="line">bash    3896 root    0u   CHR  136,0    0t0        3 /dev/pts/0</span><br><span class="line">bash    3896 root    1u   CHR  136,0    0t0        3 /dev/pts/0</span><br><span class="line">bash    3896 root    2u   CHR  136,0    0t0        3 /dev/pts/0</span><br><span class="line">bash    3896 root  255u   CHR  136,0    0t0        3 /dev/pts/0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 操作</title>
      <link href="/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E6%93%8D%E4%BD%9C/"/>
      <url>/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Kubernetes-特性"><a href="#Kubernetes-特性" class="headerlink" title="Kubernetes 特性"></a>Kubernetes 特性</h2><ul><li><strong>服务发现和负载均衡</strong><br>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li><li><strong>存储编排</strong><br>Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。</li><li><strong>自动部署和回滚</strong><br>你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。</li><li><strong>自动完成装箱计算</strong><br>Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li><li><strong>自我修复</strong><br>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li><li><strong>密钥与配置管理</strong><br>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li></ul><h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>Kubernetes Cluster &#x3D; N Master Node + N Worker Node (N &gt;&#x3D; 1)</p><h2 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h2><p><img src="https://img-blog.csdnimg.cn/067d736577e54325ab31581b0e7665ee.png" alt="在这里插入图片描述"></p><h2 id="Kubernetes操作"><a href="#Kubernetes操作" class="headerlink" title="Kubernetes操作"></a>Kubernetes操作</h2><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取命名空间</span></span><br><span class="line">kubectl get ns</span><br><span class="line"><span class="comment"># 创建命名空间</span></span><br><span class="line">kubectl create ns test-ns</span><br><span class="line"><span class="comment"># 删除命名空间</span></span><br><span class="line">kubectl delete ns test-ns</span><br></pre></td></tr></table></figure><h4 id="使用配置文件操作"><a href="#使用配置文件操作" class="headerlink" title="使用配置文件操作"></a>使用配置文件操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test-ns.yaml</span><br></pre></td></tr></table></figure><p><code>test-ns.yaml</code> 内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-ns</span></span><br></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f test-ns.yaml</span><br></pre></td></tr></table></figure><p>删除指定配置文件所创建的资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f test-ns.yaml</span><br></pre></td></tr></table></figure><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><blockquote><p>运行中的一组容器，Pod是Kubernetes中应用的最小单位</p></blockquote><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个nginx镜像的Pod</span></span><br><span class="line">kubectl run mynginx --image=nginx</span><br><span class="line"><span class="comment"># 获取名为mynginx的Pod的描述</span></span><br><span class="line">kubectl describe pod mynginx</span><br><span class="line"><span class="comment"># 删除Pod</span></span><br><span class="line">kubectl delete pod mynginx</span><br><span class="line"><span class="comment"># 查看Pod的运行日志</span></span><br><span class="line">kubectl logs mynginx</span><br><span class="line"><span class="comment"># 打印Pod的更完善的信息</span></span><br><span class="line">kubectl get pod -owide</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it mynginx -- /bin/bash</span><br></pre></td></tr></table></figure><h4 id="使用配置文件操作-1"><a href="#使用配置文件操作-1" class="headerlink" title="使用配置文件操作"></a>使用配置文件操作</h4><p>创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test-pod.yaml</span><br></pre></td></tr></table></figure><p><code>test-pod.yaml</code> 内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">run:</span> <span class="string">mynginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mynginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">mynginx</span></span><br></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f test-pod.yaml</span><br></pre></td></tr></table></figure><p>删除指定配置文件所创建的资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f test-pod.yaml</span><br></pre></td></tr></table></figure><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><blockquote><p>扩缩容、自愈、滚动更新</p></blockquote><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个部署</span></span><br><span class="line">kubectl create deployment mytomcat --image=tomcat:8.5.68</span><br><span class="line"><span class="comment"># 创建一个部署 -- 多副本</span></span><br><span class="line">kubectl create deployment mytomcat --image=tomcat:8.5.68 --replicas=3</span><br><span class="line"><span class="comment"># 当删除该部署创建的Pod的时候，会自动重启一个Pod（自愈能力）</span></span><br><span class="line">kubectl delete pod mytomcat-5c9c88c545-vhrfb</span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line">kubectl delete deploy mytomcat</span><br><span class="line"><span class="comment"># 扩缩容</span></span><br><span class="line">kubectl scale --replicas=5 deployment/my-dep</span><br><span class="line"><span class="comment"># 滚动更新</span></span><br><span class="line">kubectl <span class="built_in">set</span> image deployment/my-dep nginx=nginx:1.16.1</span><br><span class="line">kubectl rollout status deployment/my-dep</span><br><span class="line"><span class="comment">## 版本回退</span></span><br><span class="line"><span class="comment"># 历史记录</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/my-dep</span><br><span class="line"><span class="comment"># 查看某个历史详情</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment/my-dep --revision=2</span><br><span class="line"><span class="comment"># 回滚(回到上次)</span></span><br><span class="line">kubectl rollout undo deployment/my-dep</span><br><span class="line"><span class="comment"># 回滚(回到指定版本)</span></span><br><span class="line">kubectl rollout undo deployment/my-dep --to-revision=2</span><br></pre></td></tr></table></figure><h4 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h4><p><code>test-deployment.yaml</code> 内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>应用配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f test-deployment.yaml</span><br></pre></td></tr></table></figure><p>删除指定配置文件所创建的资源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f test-deployment.yaml</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><blockquote><p>将一组Pods公开为网络服务的抽象方法</p></blockquote><h4 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h4><p>将工作负载 <code>my-nginx</code> 的80端口映射到集群内部的8000端口并暴露</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment my-nginx --port=8000 --target-port=80</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h4 id="集群内部访问service"><a href="#集群内部访问service" class="headerlink" title="集群内部访问service"></a>集群内部访问service</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br><span class="line">kubernetes   ClusterIP      10.96.0.1      &lt;none&gt;        443/TCP          40m</span><br><span class="line">my-nginx     LoadBalancer   10.96.50.125   &lt;pending&gt;     8000:30698/TCP   6m35s</span><br></pre></td></tr></table></figure><p>通过 <code>[ip]:[port]</code> 的形式访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 10.96.50.125:8000</span><br></pre></td></tr></table></figure><p>通过 <code>[serviceName].[namespace].svc</code>的形式访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl my-nginx.default.svc:8000</span><br></pre></td></tr></table></figure><h4 id="ClusterIP"><a href="#ClusterIP" class="headerlink" title="ClusterIP"></a>ClusterIP</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只能在集群内部访问，默认type</span></span><br><span class="line">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="built_in">type</span>=ClusterIP</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群外部也可以访问</span></span><br><span class="line">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-dep</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-dep</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><blockquote><p>Service的统一网关入口</p><p>官网：<a href="https://kubernetes.github.io/ingress-nginx/">https://kubernetes.github.io/ingress-nginx/</a></p></blockquote><h4 id="修改k8s端口限制范围"><a href="#修改k8s端口限制范围" class="headerlink" title="修改k8s端口限制范围"></a>修改k8s端口限制范围</h4><p>k8s的node节点的端口默认被限制在30000-32767的范围，如果要开放其他端口需要修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/kubernetes/manifests/kube-apiserver.yaml</span><br></pre></td></tr></table></figure><p>在spec.containers.command的最后面加上 –service-cluster-ip-range 这一行，如下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">--service-node-port-range=1-65535</span></span><br></pre></td></tr></table></figure><p>重启kubectl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><h4 id="安装Ingress"><a href="#安装Ingress" class="headerlink" title="安装Ingress"></a>安装Ingress</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用下面的deploy.yaml</span></span><br><span class="line">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml</span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">vi deploy.yaml</span><br><span class="line"><span class="comment"># 将image的值改为如下值：</span></span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0</span><br><span class="line"><span class="comment"># 检查安装的结果</span></span><br><span class="line">kubectl get pod,svc -n ingress-nginx</span><br></pre></td></tr></table></figure><p><code>ingress-deploy.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">automountServiceAccountToken:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingress-controller-leader-nginx</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service-webhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https-webhook</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">webhook</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--election-id=ingress-controller-leader</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--ingress-class=nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook=:8443</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-certificate=/usr/local/certificates/cert</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-key=/usr/local/certificates/key</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LD_PRELOAD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/usr/local/lib/libmimalloc.so</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/local/certificates/</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml</span></span><br><span class="line"><span class="comment"># before changing this value, check the required kubernetes version</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate.nginx.ingress.kubernetes.io</span></span><br><span class="line">    <span class="attr">matchPolicy:</span> <span class="string">Equivalent</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">        <span class="attr">apiVersions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">        <span class="attr">operations:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br><span class="line">    <span class="attr">sideEffects:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">admissionReviewVersions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">    <span class="attr">clientConfig:</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/networking/v1beta1/ingresses</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">validatingwebhookconfigurations</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.33.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.47</span><span class="number">.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--webhook-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-mutating=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-failure-policy=Fail</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>安装完成后k8s会新建service</p><p>如图：一个是映射为80端口的32023，一个是映射443端口的30771</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get service -A</span></span><br><span class="line">NAMESPACE              NAME                                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">default                hello-server                         ClusterIP   10.96.174.151   &lt;none&gt;        8000/TCP                     166m</span><br><span class="line">default                kubernetes                           ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP                      4h18m</span><br><span class="line">default                nginx-demo                           ClusterIP   10.96.70.26     &lt;none&gt;        8000/TCP                     166m</span><br><span class="line">ingress-nginx          ingress-nginx-controller             NodePort    10.96.101.44    &lt;none&gt;        80:32023/TCP,443:30771/TCP   177m</span><br><span class="line">ingress-nginx          ingress-nginx-controller-admission   ClusterIP   10.96.218.95    &lt;none&gt;        443/TCP                      177m</span><br><span class="line">kube-system            kube-dns                             ClusterIP   10.96.0.10      &lt;none&gt;        53/UDP,53/TCP,9153/TCP       4h18m</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper            ClusterIP   10.96.181.48    &lt;none&gt;        8000/TCP                     4h5m</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard                 NodePort    10.96.95.53     &lt;none&gt;        443:31476/TCP                4h5m</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>应用如下配置，准备好测试环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-demo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">hello-server</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure><h5 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>  </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-host-bar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;hello.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;demo.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/nginx&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><h5 id="路径重写"><a href="#路径重写" class="headerlink" title="路径重写"></a>路径重写</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span>  </span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-host-bar</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;hello.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;demo.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/nginx(/|$)(.*)&quot;</span>  <span class="comment"># 把请求会转给下面的服务，下面的服务一定要能处理这个路径，不能处理就是404</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span>  <span class="comment">## java，比如使用路径重写，去掉前缀nginx</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><h5 id="流量限制"><a href="#流量限制" class="headerlink" title="流量限制"></a>流量限制</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-limit-rate</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/limit-rps:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;haha.atguigu.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Exact</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><h5 id="配置SSL"><a href="#配置SSL" class="headerlink" title="配置SSL"></a>配置SSL</h5><p>下载阿里云SSL证书，解压到服务器，执行下列命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls app-nft-card-com-secret --key ./7995548__51nftcard.com.key --cert ./7995548__51nftcard.com.pem</span><br></pre></td></tr></table></figure><p>修改<code>ingress-rule.yaml</code>增加ssl配置 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-host-bar</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$2</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="string">&#x27;true&#x27;</span> <span class="comment">#http 自动转https</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-connect-timeout:</span> <span class="string">&quot;600&quot;</span> <span class="comment">#修改代理超时时间，默认是60s</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-read-timeout:</span> <span class="string">&quot;600&quot;</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/proxy-send-timeout:</span> <span class="string">&quot;600&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;51nftcard.com&#x27;</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">app-nft-card-com-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;hello.51nftcard.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">hello-server</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&quot;demo.51nftcard.com&quot;</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/nginx(/|$)(.*)&quot;</span>  <span class="comment"># 把请求会转给下面的服务，下面的服务一定要能处理这个路径，不能处理就是404</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">nginx-demo</span>  <span class="comment">## java，比如使用路径重写，去掉前缀nginx</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">8000</span></span><br></pre></td></tr></table></figure><p>应用 <code>ingress-rule.yaml</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress-rule.yaml</span><br></pre></td></tr></table></figure><h3 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔1秒运行一次获取Pod命令</span></span><br><span class="line">watch -n 1 kubectl get pod</span><br></pre></td></tr></table></figure><h2 id="Kubernetes部署Java微服务"><a href="#Kubernetes部署Java微服务" class="headerlink" title="Kubernetes部署Java微服务"></a>Kubernetes部署Java微服务</h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><blockquote><p>maven打成可执行jar，上传给master服务器</p></blockquote><h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><blockquote><p>docker根据Dockerfile把包打成指定的镜像</p></blockquote><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取JDK镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jdk</span><br><span class="line"><span class="keyword">MAINTAINER</span> KEITH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改服务器时间为东8区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制Jar包到容器内</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/*.jar /root/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露8080端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定参数运行容器</span></span><br><span class="line"><span class="keyword">ARG</span> <span class="keyword">ENV</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_OPTS=<span class="string">&quot;--server.port=8080 --spring.profiles.active=$&#123;ENV&#125;&quot;</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;java -Dfile.encoding=utf8 -Djava.security.egd=file:/dev/./urandom -jar /root/app.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建Docker镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> [project_dir]</span><br><span class="line">docker build -t [project_name]:[version] -f Dockerfile .</span><br></pre></td></tr></table></figure><h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>将镜像推送给Docker Hub（阿里云镜像仓库）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录阿里云Docker仓库</span></span><br><span class="line">docker login --username=[username] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment"># 给镜像打标签</span></span><br><span class="line">docker tag [image_id] registry.cn-hangzhou.aliyuncs.com/[namespace]/kube-apiserver:[image_version]</span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/[namespace]/kube-apiserver:[image_version]</span><br></pre></td></tr></table></figure><h3 id="滚动更新K8S镜像"><a href="#滚动更新K8S镜像" class="headerlink" title="滚动更新K8S镜像"></a>滚动更新K8S镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/[deploy_name] [deploy_name]= registry.cn-hangzhou.aliyuncs.com/[namespace]/kube-apiserver:[image_version]</span><br></pre></td></tr></table></figure><h3 id="解决阿里云ECS搭建K8S无法拉取到阿里云镜像的问题"><a href="#解决阿里云ECS搭建K8S无法拉取到阿里云镜像的问题" class="headerlink" title="解决阿里云ECS搭建K8S无法拉取到阿里云镜像的问题"></a>解决阿里云ECS搭建K8S无法拉取到阿里云镜像的问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制阿里云登录信息到kubelet目录</span></span><br><span class="line"><span class="built_in">cp</span> /root/.docker/config.json /var/lib/kubelet</span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">systemctl restart kubelet.service</span><br></pre></td></tr></table></figure><p>原因：kubelet没有读取到&#x2F;root&#x2F;.docker&#x2F;config.json的认证密钥</p><h3 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h3><h4 id="拉取且部署"><a href="#拉取且部署" class="headerlink" title="拉取且部署"></a>拉取且部署</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line"><span class="comment"># mvn package</span></span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line"><span class="comment"># docker build</span></span><br><span class="line">docker build -t <span class="variable">$&#123;IMAGE_NAME&#125;</span> -f Dockerfile . --build-arg ENV=<span class="variable">$ENV</span></span><br><span class="line"><span class="comment"># docker tag</span></span><br><span class="line">docker tag <span class="variable">$&#123;IMAGE_NAME&#125;</span> registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># delete image</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># docker push</span></span><br><span class="line">docker push registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># get aliyun image</span></span><br><span class="line">ALIYUN_IMAGE=registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># update k8s deploy</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ENV</span>&quot;</span>x = <span class="string">&quot;prod&quot;</span>x ];<span class="keyword">then</span></span><br><span class="line">  kubectl <span class="built_in">set</span> image deployment/nft-card nft-card=<span class="variable">$&#123;ALIYUN_IMAGE&#125;</span> -n prod</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  kubectl <span class="built_in">set</span> image deployment/nft-card nft-card=<span class="variable">$&#123;ALIYUN_IMAGE&#125;</span> -n dev</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 删除旧版镜像，只保留最新1个</span></span><br><span class="line">docker images | grep nft-card | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | awk <span class="string">&#x27;BEGIN&#123;FS=&quot; &quot;&#125; NR&gt;1 &#123;print $NF&#125;&#x27;</span> | xargs docker rmi</span><br><span class="line"><span class="comment"># echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ALIYUN_IMAGE&#125;</span></span><br></pre></td></tr></table></figure><h4 id="仅部署"><a href="#仅部署" class="headerlink" title="仅部署"></a>仅部署</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署测试环境</span></span><br><span class="line"><span class="comment"># ./deploy.sh nft-card dev</span></span><br><span class="line"><span class="comment"># 部署生产环境</span></span><br><span class="line"><span class="comment"># ./deploy.sh nft-card prod</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ] || [ -z <span class="variable">$2</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> 缺少必填参数</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">PROJECT_NAME=<span class="variable">$1</span></span><br><span class="line">ENV=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">VERSION_FILE=/root/k8s/version/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.version</span><br><span class="line"><span class="comment"># 文件不存在则创建</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$&#123;VERSION_FILE&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> 0 &gt; <span class="variable">$&#123;VERSION_FILE&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放自增变量</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$&#123;VERSION_FILE&#125;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">sum</span>=`<span class="built_in">cat</span> <span class="variable">$&#123;VERSION_FILE&#125;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">offsets=`<span class="built_in">expr</span> <span class="variable">$sum</span> \* 10`</span><br><span class="line"><span class="built_in">sum</span>=`<span class="built_in">expr</span> <span class="variable">$sum</span> + 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span> &gt; <span class="variable">$&#123;VERSION_FILE&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define Value</span></span><br><span class="line">IMAGE_NAME=<span class="variable">$&#123;PROJECT_NAME&#125;</span>:2.<span class="variable">$sum</span></span><br><span class="line">PROJECT_DIR=/root/docker/jenkins/workspace/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment"># Go to project dir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;PROJECT_DIR&#125;</span></span><br><span class="line"><span class="comment"># docker build</span></span><br><span class="line">docker build -t <span class="variable">$&#123;IMAGE_NAME&#125;</span> -f Dockerfile . --build-arg ENV=<span class="variable">$ENV</span></span><br><span class="line"><span class="comment"># docker tag</span></span><br><span class="line">docker tag <span class="variable">$&#123;IMAGE_NAME&#125;</span> registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># delete image</span></span><br><span class="line">docker rmi -f <span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># docker push</span></span><br><span class="line">docker push registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># get aliyun image</span></span><br><span class="line">ALIYUN_IMAGE=registry-vpc.cn-hangzhou.aliyuncs.com/nft_card/<span class="variable">$&#123;IMAGE_NAME&#125;</span></span><br><span class="line"><span class="comment"># update k8s deploy</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$ENV</span>&quot;</span>x = <span class="string">&quot;prod&quot;</span>x ];<span class="keyword">then</span></span><br><span class="line">  kubectl <span class="built_in">set</span> image deployment/<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_NAME&#125;</span>=<span class="variable">$&#123;ALIYUN_IMAGE&#125;</span> -n prod</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  kubectl <span class="built_in">set</span> image deployment/<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;PROJECT_NAME&#125;</span>=<span class="variable">$&#123;ALIYUN_IMAGE&#125;</span> -n dev</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ALIYUN_IMAGE&#125;</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.yuque.com/leifengyang/oncloud/ctiwgo">https://www.yuque.com/leifengyang/oncloud/ctiwgo</a></p>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 安装</title>
      <link href="/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E5%AE%89%E8%A3%85/"/>
      <url>/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker社区版，docker命令行，docker容器化运行环境</span></span><br><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动并开机启动Docker"><a href="#启动并开机启动Docker" class="headerlink" title="启动并开机启动Docker"></a>启动并开机启动Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker --now</span><br></pre></td></tr></table></figure><h3 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h3><p>registry-mirrors配置为自己的阿里云<code>容器镜像服务</code>的镜像加速地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"><span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://7yti41gr.mirror.aliyuncs.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="安装-Kubelet"><a href="#安装-Kubelet" class="headerlink" title="安装 Kubelet"></a>安装 Kubelet</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet镜像源</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">repo_gpgcheck=0</span></span><br><span class="line"><span class="string">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class="line"><span class="string">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">exclude=kubelet kubeadm kubectl</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装kubelet</span></span><br><span class="line">yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><h3 id="启动并开机启动Kubelet"><a href="#启动并开机启动Kubelet" class="headerlink" title="启动并开机启动Kubelet"></a>启动并开机启动Kubelet</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> kubelet --now</span><br></pre></td></tr></table></figure><h3 id="安装配套组件"><a href="#安装配套组件" class="headerlink" title="安装配套组件"></a>安装配套组件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义镜像源下载脚本</span></span><br><span class="line">sudo <span class="built_in">tee</span> ./images.sh &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">images=(</span><br><span class="line">kube-apiserver:v1.20.9</span><br><span class="line">kube-proxy:v1.20.9</span><br><span class="line">kube-controller-manager:v1.20.9</span><br><span class="line">kube-scheduler:v1.20.9</span><br><span class="line">coredns:1.7.0</span><br><span class="line">etcd:3.4.13-0</span><br><span class="line">pause:3.2</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class="variable">$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为可执行文件且执行</span></span><br><span class="line"><span class="built_in">chmod</span> +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure><h3 id="修改Hosts添加Master节点映射"><a href="#修改Hosts添加Master节点映射" class="headerlink" title="修改Hosts添加Master节点映射"></a>修改Hosts添加Master节点映射</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有机器添加Master的域名映射，IP地址需要修改为master机器的内网IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;172.23.184.235  cluster-endpoint&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="初始化主节点"><a href="#初始化主节点" class="headerlink" title="初始化主节点"></a>初始化主节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化主节点</span></span><br><span class="line"><span class="comment"># apiserver-advertise-address配master的ip</span></span><br><span class="line"><span class="comment"># serivce-cidr和pod-network-cidr不能重叠，也不能跟机器的IP重叠</span></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.23.184.235 \</span><br><span class="line">--control-plane-endpoint=cluster-endpoint \</span><br><span class="line">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \</span><br><span class="line">--kubernetes-version v1.20.9 \</span><br><span class="line">--service-cidr=10.96.0.0/16 \</span><br><span class="line">--pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure><p>出现以下提示表示初始化成功，根据提示依次执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class="line">and service account keys on each node and <span class="keyword">then</span> running the following as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token wzzmcd.qxn34cuou6pm1hnz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:112632af685d019af73c7b55d63f3c0d081a4249e30fe3bbf95c4d1c93e4b4bb \</span><br><span class="line">    --control-plane </span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token wzzmcd.qxn34cuou6pm1hnz \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:112632af685d019af73c7b55d63f3c0d081a4249e30fe3bbf95c4d1c93e4b4bb </span><br></pre></td></tr></table></figure><p>如果令牌过期可以在master节点重新生成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure><h3 id="Node节点加入集群"><a href="#Node节点加入集群" class="headerlink" title="Node节点加入集群"></a>Node节点加入集群</h3><p>加入集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token wzzmcd.qxn34cuou6pm1hnz \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:112632af685d019af73c7b55d63f3c0d081a4249e30fe3bbf95c4d1c93e4b4bb </span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 末尾加一行</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/kubelet.conf</span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Master节点加入集群"><a href="#Master节点加入集群" class="headerlink" title="Master节点加入集群"></a>Master节点加入集群</h3><p>复制主节点配置到master备机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/kubernetes/pki/etcd</span><br><span class="line">scp root@172.23.184.235:/etc/kubernetes/pki/ca.* /etc/kubernetes/pki/</span><br><span class="line">scp root@172.23.184.235:/etc/kubernetes/pki/sa.* /etc/kubernetes/pki/</span><br><span class="line">scp root@172.23.184.235:/etc/kubernetes/pki/front-proxy-ca.* /etc/kubernetes/pki/</span><br><span class="line">scp root@172.23.184.235:/etc/kubernetes/pki/etcd/ca.* /etc/kubernetes/pki/etcd/</span><br><span class="line">scp root@172.23.184.235:/etc/kubernetes/admin.conf /etc/kubernetes/admin.conf</span><br></pre></td></tr></table></figure><p>Master节点加入集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> cluster-endpoint:6443 --token wzzmcd.qxn34cuou6pm1hnz \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:112632af685d019af73c7b55d63f3c0d081a4249e30fe3bbf95c4d1c93e4b4bb \</span><br><span class="line">--control-plane</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 末尾加一行</span></span><br><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="驱逐节点"><a href="#驱逐节点" class="headerlink" title="驱逐节点"></a>驱逐节点</h3><p>在K8S集群中执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看这个node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># 驱逐node01节点</span></span><br><span class="line">kubectl drain node01 --delete-local-data --force --ignore-daemonsets</span><br><span class="line"><span class="comment"># 删除node01节点</span></span><br><span class="line">kubectl delete nodes node01</span><br></pre></td></tr></table></figure><p>在node01节点上执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h3 id="安装网格组件（Master节点）"><a href="#安装网格组件（Master节点）" class="headerlink" title="安装网格组件（Master节点）"></a>安装网格组件（Master节点）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://docs.projectcalico.org/v3.18/manifests/calico.yaml -O</span><br><span class="line"></span><br><span class="line">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><h2 id="附录：完全卸载K8S和Docker"><a href="#附录：完全卸载K8S和Docker" class="headerlink" title="附录：完全卸载K8S和Docker"></a>附录：完全卸载K8S和Docker</h2><h3 id="卸载-K8S"><a href="#卸载-K8S" class="headerlink" title="卸载 K8S"></a>卸载 K8S</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset -f</span><br><span class="line">modprobe -r ipip</span><br><span class="line">lsmod</span><br><span class="line"><span class="built_in">rm</span> -rf ~/.kube/</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/kubernetes/</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/kubelet.service.d</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/systemd/system/kubelet.service</span><br><span class="line"><span class="built_in">rm</span> -rf /usr/bin/kube*</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/cni</span><br><span class="line"><span class="built_in">rm</span> -rf /opt/cni</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/etcd</span><br><span class="line"><span class="built_in">rm</span> -rf /var/etcd</span><br><span class="line">yum remove -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -aq)</span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于无法删除的镜像可以直接去目录删除</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/image/overlay2/imagedb/content/sha256</span><br><span class="line"><span class="built_in">rm</span> -rf *</span><br></pre></td></tr></table></figure><h3 id="卸载-Docker"><a href="#卸载-Docker" class="headerlink" title="卸载 Docker"></a>卸载 Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /etc/docker</span><br><span class="line"><span class="built_in">rm</span> -rf /run/docker</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/dockershim</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep docker</span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum list installed | grep docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把匹配到的包执行 yum remove 删除</span></span><br><span class="line">yum remove -y containerd.io.x86_64 docker-ce.x86_64 docker-ce-cli.x86_64 docker-ce-rootless-extras.x86_64 docker-compose-plugin.x86_64 docker-scan-plugin.x86_64</span><br></pre></td></tr></table></figure><p>查看Docker是否卸载成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 集合</title>
      <link href="/swan-blog/2022/10/24/Java/Java%20%E9%9B%86%E5%90%88/"/>
      <url>/swan-blog/2022/10/24/Java/Java%20%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Collection-Cheat-Sheet"><a href="#Java-Collection-Cheat-Sheet" class="headerlink" title="Java Collection Cheat Sheet"></a>Java Collection Cheat Sheet</h2><p><img src="https://pdai.tech/images/java_collections_overview.png" alt="img"></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote><p>ArrayList、LinkedList、Vector、Stack、CopyOnWriteArrayList</p></blockquote><table><thead><tr><th>名称</th><th>特点</th><th>get(index)</th><th>add(E)</th><th>add(index, E)</th><th>remove(E)</th></tr></thead><tbody><tr><td>ArrayList</td><td>高效，线程不安全</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr><tr><td>LinkedList</td><td>删除更高效，查询低效</td><td>O(n)</td><td>O(1)</td><td>O(n)</td><td>O(1)</td></tr><tr><td>Vector</td><td>低效，线程安全</td><td>O(1)</td><td>O(1)</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ol><li>底层是数组</li><li>默认装Object</li><li>初始为10，(Jdk8之后默认添加数据的时候才开始给默认长度)。</li><li>每次扩容是原长度的一半（取整）：第一次扩到15，第二次22</li><li>扩容方式：Arrays.copyOf，默认把原数组复制到新数组</li><li>不是线程安全的</li></ol><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ol><li>底层是双向链表</li><li>链表删除和增加快，查询和修改慢</li><li>实现了Queue接口，所以还提供了offer(), peek(), poll()等方法</li></ol><h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h4><p>写时加锁，读时不加锁，复制一个新的数组，把新数组指向原来的数组，适用于读多写少的场景。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><table><thead><tr><th>名称</th><th>特点</th><th>add(E)</th><th>remove(E)</th><th>contains(E)</th></tr></thead><tbody><tr><td>HashSet</td><td>底层是HashMap，线程不安全，可存储null值</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>LinkedHashSet</td><td>查询时有序 (存储还是无序)</td><td>O(logn)</td><td>O(logn)</td><td>O(logn)</td></tr><tr><td>TreeSet</td><td>可根据指定值排序(基于红黑树)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>在多线程的情况下，多考虑使用Queue</p><ul><li><p>Deque 双端队列：ArrayDeque、BlockingDeque、LinkedBlockingDeque</p></li><li><p>BlokingQueue：获取数据时队列中无数据，阻塞。添加数据时队列已满，阻塞。</p><ul><li>ArrayBlockingQueue、ProrityBlockingQueue、LinkedBlockingQueue</li><li>添加元素<ul><li>add：添加元素的时候，若超出了度列的长度会直接抛出异常</li><li>offer：添加元素的时候，若超出了度列的长度会直接返回false</li><li>put：添加元素的时候，若超出了度列的长度会阻塞一直等待空间，以加入元素</li></ul></li><li>获取元素<ul><li>remove：获取元素，若队列为空，会抛出异常</li><li>poll：获取元素，队列为空时，返回null</li><li>take：获取元素，队列为空时，队列阻塞</li><li>element：查看队首元素，队列元素为空抛异常</li><li>peek：查看队首元素，队列元素为空返回 null</li></ul></li></ul></li><li><p>SynchronousQueue：容量为0的队列，使用put添加元素时阻塞，直到另一个线程取到数据</p><ul><li><p>场景：两个线程交换数据</p></li><li><p>&#96;&#96;&#96;java<br>static BlockingQueue<String> blockingQueue &#x3D; new SynchronousQueue&lt;&gt;();<br>public static void main(String[] args) throws InterruptedException {<br>new Thread(() -&gt; {<br>    try {<br>        String value &#x3D; blockingQueue.take();<br>        System.out.println(“子线程取到主线程数据:” + value);<br>    } catch (InterruptedException e) {<br>        e.printStackTrace();<br>    }<br>}).start();<br>Thread.sleep(1000);<br>blockingQueue.put(“1”);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- TransferQueue LinkedTransferQueue</span><br><span class="line"></span><br><span class="line">  - 与 SynchronousQueue 的区别在于，使用 `transfer` 方法来添加数据，并且当这个数据不被取走，线程会一直守在原地，类似MQ的消息确认机制。</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    transferQueue.transfer(&quot;data&quot;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ConcurrentLinkedQueue：底层使用CAS实现原子性操作</p><ul><li>&#96;&#96;&#96;java<br>&#x2F;&#x2F; 使用 ConcurrentLinkedQueue 实现卖票程序<br>static Queue<String> tickets &#x3D; new ConcurrentLinkedQueue&lt;&gt;();<br>static {<br>for (int i &#x3D; 0; i &lt; 1000; i++)<br>    tickets.add(“票 编号:” + i);<br>}<br>public static void main(String[] args) {<br>for (int i &#x3D; 0; i &lt; 10; i++) {<br>    new Thread(() -&gt; {<br>        while (true){<br>            String s &#x3D; tickets.poll();<br>            if (s &#x3D;&#x3D; null) break;<br>            System.out.println(“销售了 - “ + s);<br>        }<br>    }).start();<br>}<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- PriorityQueue：有序的队列，内部使用二叉树实现</span><br><span class="line"></span><br><span class="line">- DelayQueue：按照内部到期的时间进行排序，等待时间短的会排到队列的前面。使用场景：按时间进行任务调度。</span><br><span class="line"></span><br><span class="line">## Map</span><br><span class="line"></span><br><span class="line">### Map 类型</span><br><span class="line"></span><br><span class="line">| 名称          | 特点                                  | get(key)      | put(key) |</span><br><span class="line">| ------------- | ------------------------------------- | ------------- | -------- |</span><br><span class="line">| HashMap       | 线程不安全，高效                      | O(1)~O(log n) | O(1)     |</span><br><span class="line">| LinkedHashMap | 查询时有序 (存储还是无序)             | O(1)~O(log n) | O(1)     |</span><br><span class="line">| TreeMap       | 可根据指定值排序(取决于Compare返回值) | O(log n)      | O(1)     |</span><br><span class="line">| HashTable     | 线程安全，低效                        | O(1)~O(log n) | O(1)     |</span><br><span class="line"></span><br><span class="line">### HashMap</span><br><span class="line"></span><br><span class="line">#### HashMap JDK7和8的异同</span><br><span class="line"></span><br><span class="line">JDK7：</span><br><span class="line"></span><br><span class="line">1. 数组 + 链表</span><br><span class="line">2. 插入链表头部</span><br><span class="line">3. 直接计算 key 的 HashCode 值</span><br><span class="line">4. 扩容时会颠倒链表顺序</span><br><span class="line">5. 只要大于阈值就直接扩容2倍</span><br><span class="line"></span><br><span class="line">JDK8：</span><br><span class="line"></span><br><span class="line">1. 数组 + 链表 + 红黑树</span><br><span class="line">2. 插入链表尾部</span><br><span class="line">3. 采用 Key 的 HashCode 异或上 Key 的 HashCode 进行无符号右移16位的结果 `(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)`，避免了只靠低位数据来计算哈希时导致的冲突，计算结果由高低位结合决定，使元素分布更均匀</span><br><span class="line">4. 扩容时保持原链表顺序</span><br><span class="line">5. 当数组容量小于64时，直接扩容。大于64时，若链表长度大于8就转红黑树，否则就扩容。</span><br><span class="line"></span><br><span class="line">#### HashMap 负载因子</span><br><span class="line"></span><br><span class="line">默认负载因子是0.75</span><br><span class="line"></span><br><span class="line">- 负载因子过小会导致更快扩容，浪费空间</span><br><span class="line">- 负载因子过大会导致哈希碰撞的几率变大</span><br><span class="line"></span><br><span class="line">#### HashMap 扩容复制</span><br><span class="line"></span><br><span class="line">不是简单的将原数组中的每一个元素取出进行重新hash映射，而是做移位检测。所谓移位检测的含义具体是针对HashMap做映射时的&amp;运算所提出的，通过上文对&amp;元算的分析可知，映射的本质即看hash值的某一位是0还是1，当扩容以后，会相比于原数组多出一位做比较，由多出来的这一位是0还是1来决定是否进行移位，而具体的移位距离，也是可知的。</span><br><span class="line"></span><br><span class="line">#### HashMap 线程不安全</span><br><span class="line"></span><br><span class="line">在put元素的时候，当两个线程同时计算出hash值并且put元素进去的时候， 会有并发问题导致数据被覆盖</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">if ((p = tab[i = (n - 1) &amp; hash]) == null)  // 计算hash值准备put元素</span><br><span class="line">    tab[i] = newNode(hash, key, value, null);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在扩容的时候，多个线程对map进行put操作，但是size会因为并发问题没有累加到相应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (++size &gt; threshold) <span class="comment">//++size此处线程不安全</span></span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure><h4 id="HashMap-添加元素"><a href="#HashMap-添加元素" class="headerlink" title="HashMap 添加元素"></a>HashMap 添加元素</h4><ol><li>底层：数组 + 链表 + 红黑树</li><li>首次添加操作创建数组，长度16，存的是一维数组Entry[]</li><li>扩容：超过临界值(Capacity * Load Factory)，则扩容为原来2倍，并将元数据复制过来<br><img src="https://img-blog.csdnimg.cn/20200209154206861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>有序基于链表实现的 HashMap</p><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>基于红黑树实现的有序Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义排序规则</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;String, String&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>1.7：Segment + HashEntry + Unsafe</p><p>1.8：移除Segment，使锁的粒度更小，Synchronized + CAS</p><h3 id="ConcurrentSkitListMap"><a href="#ConcurrentSkitListMap" class="headerlink" title="ConcurrentSkitListMap"></a>ConcurrentSkitListMap</h3><blockquote><p>同步容器，有序</p></blockquote><p><strong>跳表</strong></p><p>算法在最稀疏的层次进行搜索，直至需要查找的元素在该层两个相邻的元素中间。这时，算法将跳转到下一个层次，重复刚才的搜索，直到找到需要查找的元素为止。</p><p><img src="https://img-blog.csdnimg.cn/20210115222639601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h3><p>Entry 是弱引用，如果没有被其他强引用，那么GC后就会被回收</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 存储抽象</title>
      <link href="/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E5%AD%98%E5%82%A8%E6%8A%BD%E8%B1%A1/"/>
      <url>/swan-blog/2022/10/24/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E5%AD%98%E5%82%A8%E6%8A%BD%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><h4 id="所有节点安装nfs"><a href="#所有节点安装nfs" class="headerlink" title="所有节点安装nfs"></a>所有节点安装nfs</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nfs-utils</span><br></pre></td></tr></table></figure><h4 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nfs主节点</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line">systemctl <span class="built_in">enable</span> rpcbind --now</span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server --now</span><br><span class="line"><span class="comment"># 配置生效</span></span><br><span class="line">exportfs -r</span><br><span class="line"><span class="comment"># 查看nfs配置</span></span><br><span class="line">exportfs</span><br></pre></td></tr></table></figure><h4 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查主节点有哪些目录可以挂载</span></span><br><span class="line">showmount -e 172.23.184.235</span><br><span class="line"><span class="comment"># 挂载数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /nfs/data</span><br><span class="line">mount -t nfs 172.23.184.235:/nfs/data /nfs/data</span><br><span class="line"><span class="comment"># 写入一个测试文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello nfs server&quot;</span> &gt; /nfs/data/test.txt</span><br></pre></td></tr></table></figure><h4 id="原生方式挂载"><a href="#原生方式挂载" class="headerlink" title="原生方式挂载"></a>原生方式挂载</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-pv-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-nfs-demo</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-nfs-demo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">172.31</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/data/nginx-pv</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Thread</title>
      <link href="/swan-blog/2022/10/24/Java/Java%20Thread/"/>
      <url>/swan-blog/2022/10/24/Java/Java%20Thread/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>操作系统是如何切换线程的：Cpu会从内存里取出线程，线程内部状态是由线程栈来维护的</p><p>一个程序的不同分支</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顺序执行</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">T1</span>().run();</span><br><span class="line"><span class="comment">// 并行执行</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">T1</span>().start();</span><br><span class="line"><span class="comment">// 睡眠500毫秒</span></span><br><span class="line">Thead.sleep(<span class="number">500</span>);</span><br><span class="line"><span class="comment">// 让出线程,使线程进入等待队列，但也有可能再次被Cpu拿出来执行</span></span><br><span class="line">Thread.yield();</span><br><span class="line"><span class="comment">// t2运行中调用t1.join()即执行t1线程，保证t1结束以后t2才能继续运行</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; t1.join(); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>);</span><br></pre></td></tr></table></figure><p>线程状态迁移图</p><p><img src="https://img-blog.csdnimg.cn/20210107211056470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="线程的创建方式"><a href="#线程的创建方式" class="headerlink" title="线程的创建方式"></a>线程的创建方式</h2><h3 id="继承Thead类"><a href="#继承Thead类" class="headerlink" title="继承Thead类"></a>继承Thead类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 运行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><p>普通写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 运行了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main</span></span><br><span class="line"><span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(t).start();</span><br></pre></td></tr></table></figure><p>lambda写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 运行了...&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><blockquote><p>可以抛出异常，支持泛型的返回值</p></blockquote><ul><li>Future：可以获得线程的执行结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">System.out.println(<span class="string">&quot;结果:&quot;</span> + result);</span><br></pre></td></tr></table></figure><ul><li><p>CompletableFuture</p><p>使用<code>Future</code>获得异步执行结果时，要么调用阻塞方法<code>get()</code>，要么轮询看<code>isDone()</code>是否为<code>true</code>，这两种方法都不是很好，因为主线程也会被迫等待。</p><p>从Java 8开始引入了<code>CompletableFuture</code>，它针对<code>Future</code>做了改进，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法。</p><p><code>CompletableFuture</code>更强大的功能是，多个<code>CompletableFuture</code>可以串行执行</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建异步执行任务</span></span><br><span class="line">CompletableFuture&lt;Integer&gt; task1 = CompletableFuture.supplyAsync(() -&gt; <span class="number">1</span>);</span><br><span class="line">CompletableFuture&lt;Integer&gt; task2 = task1.thenApplyAsync(o -&gt; o + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果执行成功</span></span><br><span class="line">task2.thenAccept(res -&gt; System.out.println(<span class="string">&quot;最终结果:&quot;</span> + res));</span><br><span class="line"><span class="comment">// 如果执行异常</span></span><br><span class="line">task2.exceptionally(e -&gt; &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Failed: &quot;</span> + e.getMessage());</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭</span></span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br></pre></td></tr></table></figure><h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">ScheduledFuture&lt;Integer&gt; result = pool.schedule(() -&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + num);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">System.out.println(result.get());</span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure><h2 id="线程池详解"><a href="#线程池详解" class="headerlink" title="线程池详解"></a>线程池详解</h2><h3 id="线程池种类"><a href="#线程池种类" class="headerlink" title="线程池种类"></a>线程池种类</h3><ul><li>newFixedThreadPool（固定大小的线程池）</li><li>newSingleThreadExecutor（单线程线程池）</li><li>newCachedThreadPool（可缓存线程的线程池）用于并发执行大量短期的小任务。</li><li>newScheduledThreadPool：用于需要多个后台线程执行周期任务，同时需要限制线程数量的场景。</li></ul><h3 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h3><ol><li>corePoolSize: 线程池中的常驻核心线程数，即使空闲也不归还。</li><li>maximumPoolSize: 线程池能够容纳同时执行的最大线程数，空闲了会归还给操作系统。</li><li>keepAliveTime: 多余的空闲线程存活时间。</li><li>unit: keepAliveTime的单位。</li><li>workQueue: 任务队列，被提交但尚未被执行的任务，一般使用阻塞队列。</li><li>threadFactory: 表示生成线程池中工作线程的线程工厂，用于创建线程，一般默认即可。</li><li>handler: 拒绝策略，表示当队列满了并且工作线程大于等于线程的最大线程数时如何来拒绝请求执行的runnable策略。</li></ol><h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><ul><li>RUNNING：线程池创建之后的初始状态，这种状态下可以执行任务。</li><li>SHUTDOWN：该状态下线程池不再接受新任务，但是会将工作队列中的任务执行完毕。</li><li>STOP：该状态下线程池不再接受新任务，也不会处理工作队列中的剩余任务，并且将会中断所有工作线程。</li><li>TIDYING：该状态下所有任务都已终止或者处理完成，将会执行terminated()钩子方法。</li><li>TERMINATED：执行完terminated()钩子方法之后的状态。terminated钩子方法在Executor终止时调用，默认实现不执行任何操作</li></ul><h3 id="线程池底层工作原理"><a href="#线程池底层工作原理" class="headerlink" title="线程池底层工作原理"></a>线程池底层工作原理</h3><ul><li><p>在创建了线程池后，等待提交过来的任务请求</p></li><li><p>当调用execute()方法添加一个请求任务时，线程池会做如下判断</p><ul><li>如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行任务</li><li>如果正在运行的线程大于等于corePoolSize，那么将这个任务放入队列</li><li>如果这时队列满了且正在运行的线程数量小于maximumPoolSize，那么要创建非核心线程立刻运行这个任务</li><li>如果队列满了且正在运行的线程数大于等于maximumPoolSize，那么线程池会启动拒绝策略</li></ul></li><li><p>当一个线程完成任务时，他会从队列中取下一个任务来执行</p></li><li><p>当一个线程无事可做超过keepAliveTime时，线程会判断：</p><ul><li>如果当线程数大于corePoolSize，那么这个线程就被停掉</li><li>线程池的所有任务完成后最终会收缩到corePoreSize</li></ul></li></ul><h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>定义：等待队列和max线程数都满了，那么就需要启用拒绝策略处理这个问题。</p><ul><li>AbortPolicy(默认)：直接抛出RejectedExecutionException异常</li><li>CallerRunsPolicy：既不会抛弃任务，也不会抛出异常，而是把某些任务回退给调用者</li><li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入队列中尝试再次提交当前任务</li><li>DiscardPolicy：直接丢弃任务，不予任何处理也不抛出异常</li><li>自定义Policy：实现 <code>RejectedExecutionHandler</code> 接口</li></ul><h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    <span class="number">2</span>, <span class="number">5</span>, <span class="number">1L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;(<span class="number">3</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(<span class="string">&quot;myPool&quot;</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">fi</span> <span class="operator">=</span> i;</span><br><span class="line">      pool.execute(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + fi);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    pool.shutdown();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">poolNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"></span><br><span class="line">  MyThreadFactory(String prefix) &#123;</span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    group = (s != <span class="literal">null</span>) ? s.getThreadGroup() :</span><br><span class="line">    Thread.currentThread().getThreadGroup();</span><br><span class="line">    namePrefix = prefix + <span class="string">&quot;-&quot;</span> +</span><br><span class="line">      poolNumber.getAndIncrement() +</span><br><span class="line">      <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,</span><br><span class="line">                          namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                          <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">      t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">      t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolTaskExecutor"><a href="#ThreadPoolTaskExecutor" class="headerlink" title="ThreadPoolTaskExecutor"></a>ThreadPoolTaskExecutor</h4><blockquote><p>Spring 为我们提供的线程池类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;taskExector&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Executor <span class="title function_">taskExector</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">  <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();<span class="comment">//获取到服务器的cpu内核</span></span><br><span class="line">  executor.setCorePoolSize(<span class="number">5</span>);<span class="comment">//核心池大小</span></span><br><span class="line">  executor.setMaxPoolSize(<span class="number">100</span>);<span class="comment">//最大线程数</span></span><br><span class="line">  executor.setQueueCapacity(<span class="number">1000</span>);<span class="comment">//队列程度</span></span><br><span class="line">  executor.setKeepAliveSeconds(<span class="number">1000</span>);<span class="comment">//线程空闲时间</span></span><br><span class="line">  executor.setThreadNamePrefix(<span class="string">&quot;task-asyn&quot;</span>);//线程前缀名称</span><br><span class="line">  executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());<span class="comment">//配置拒绝策略</span></span><br><span class="line">  <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;taskExecutor&quot;)</span></span><br><span class="line">ThreadPoolTaskExecutor taskExecutor;</span><br></pre></td></tr></table></figure><h3 id="如何合理配置线程池"><a href="#如何合理配置线程池" class="headerlink" title="如何合理配置线程池"></a>如何合理配置线程池</h3><p><img src="https://img-blog.csdnimg.cn/20210116163921272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Cpu密集型(Cpu一直运行)：Cpu核数+1个线程的线程池</li><li>IO密集型(需要不断取数据)：<ul><li>IO密集型并不是一直在执行任务，配置尽可能多的线程，如Cpu核数 * 2</li><li>Cpu核数 &#x2F; (1 - 阻塞系数(0.8~0.9))例如8核Cpu：8 &#x2F; (1 - 0.9) &#x3D; 80个线程数</li></ul></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><h4 id="按性质分类"><a href="#按性质分类" class="headerlink" title="按性质分类"></a>按性质分类</h4><p><strong>公平锁</strong>：多个线程按照申请锁的顺序来获取锁。</p><p><strong>非公平锁</strong>：多个线程获取锁的顺序并不是按照申请锁的顺序。</p><p><strong>乐观锁</strong>：采用尝试更新，不断重新的方式更新数据。</p><p><strong>悲观锁</strong>：对于同一个数据的并发操作，悲观锁采取加锁的形式。</p><p><strong>独享锁</strong>：该锁一次只能被一个线程所持有。</p><p><strong>共享锁</strong>：该锁可被多个线程所持有。</p><p><strong>互斥锁</strong>：写锁。</p><p><strong>读写锁</strong>：可以多人读，但只允许一人写。</p><p><strong>可重入锁</strong>：在同一个线程的外层方法获取锁的时候，进入内层方法会自动获取锁。避免死锁。</p><p><strong>对象锁</strong>：将sychronized放在普通同步方法中，sychronized同步监视器为普通对象</p><p><strong>全局锁</strong>：将sychronized放在静态同步方法中，sychronized同步监视器为类对象</p><h4 id="按设计分类"><a href="#按设计分类" class="headerlink" title="按设计分类"></a>按设计分类</h4><p><strong>自旋锁</strong>：采用循环的方式去尝试获取锁。</p><p><strong>自适应自旋锁</strong>：循环多次发现等待时间过长，切换为阻塞状态。</p><p><strong>锁粗化</strong>：如一个方法内加了多个锁，JVM认为没必要，于是将其合并为一个锁。</p><p><strong>锁消除</strong>：JVM认为有些代码块无需加锁，于是删除了那个锁。</p><p><strong>偏向锁</strong>：一段同步代码一直被一个线程访问，该线程会自动获得锁。</p><p><strong>轻量级锁</strong>：当锁是偏向锁的时候，被另外线程访问，其它线程会通过自旋的形式尝试获取锁。</p><p><strong>重量级锁</strong>：当锁是轻量级锁的时候，另一个线程自旋到一定次数未得到锁则进入阻塞。</p><p><strong>分段锁</strong>：将数据分为多段，每次只给一段加锁。</p><h3 id="锁概念"><a href="#锁概念" class="headerlink" title="锁概念"></a>锁概念</h3><h4 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h4><p><img src="https://img-blog.csdnimg.cn/6fbdf30b6fd742fe96ec2c09fccc0842.png" alt="在这里插入图片描述"></p><ol><li><p>无锁：程序不会有锁竞争</p></li><li><p>偏向锁：偏向第一个线程，通常只有一个线程加锁，只在markword中记录线程ID，相当于不加锁，当有线程来抢锁，进行锁升级。</p><p>偏向锁失效：调用 <code>hashCode函数</code> 的时候会把hashCode存放在markword，和偏向锁存放的信息有冲突，而hashCode是不会变的，所以只能进行锁升级。</p></li><li><p>轻量级锁（自旋锁）：有线程来参与锁的竞争，但是获取锁的冲突时间很短</p></li><li><p>重量级锁：自旋10次以后，升为重量级锁 - 去OS申请锁资源</p></li></ol><p>自旋锁不一定比重量级锁效率高：执行时间长，线程多用重量级锁，否则用自旋锁。</p><h4 id="锁发生改变"><a href="#锁发生改变" class="headerlink" title="锁发生改变"></a>锁发生改变</h4><ol><li><p>程序中如果出现异常，默认情况下锁会被释放</p></li><li><p>如果锁对象发生改变，锁就会失效。</p><p>解决方案： 锁对象加 <code>final</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure><h3 id="JUC和同步锁"><a href="#JUC和同步锁" class="headerlink" title="JUC和同步锁"></a>JUC和同步锁</h3><h4 id="Syncronized-实现细节"><a href="#Syncronized-实现细节" class="headerlink" title="Syncronized 实现细节"></a>Syncronized 实现细节</h4><p>字节码层面：monitorenter monitorexit</p><p>JVM层面：C  C++ 调用了操作系统提供的同步机制</p><p>OS和硬件层面：x86是 <code>lock comxchg xxx</code>，lock是用来锁其它指令的</p><h4 id="Sychronized-and-Lock"><a href="#Sychronized-and-Lock" class="headerlink" title="Sychronized and Lock"></a>Sychronized and Lock</h4><ol><li>Sychronized：非公平，悲观，独享，互斥，可重入，重量级锁</li><li>Lock<ol><li>ReentrantLock：可公平，悲观，独享，互斥，可重入，重量级锁。</li><li>ReentrantReadWriteLock：可公平，悲观，写独享，读共享，读写，可重入，重量级锁。</li></ol></li></ol><h4 id="Sychronized-和-ReentrantLock-的区别"><a href="#Sychronized-和-ReentrantLock-的区别" class="headerlink" title="Sychronized 和 ReentrantLock 的区别"></a><strong>Sychronized 和 ReentrantLock 的区别</strong></h4><ol><li>synchronized是关键字，Lock是Api</li><li>synchronized自动释放锁，Lock手动释放</li><li>synchronized不可以中断，ReentrantLock可中断(调用interrupt方法)</li><li>synchronized非公平锁，Lock两者皆可</li><li>synchronized只能随机或全部唤醒，Lock可以使用Condition精确唤醒</li></ol><p><strong>Sychronized 和 ReentrantLock 的使用场景</strong></p><p>sychronized如果抢不到锁，就会一直等待</p><p>reentrantLock有tryLock机制，如果等待超时可以放弃等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lock.tryLock(<span class="number">3L</span>, TimeUnit.SECONDS))&#123;<span class="comment">// 3秒超时</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 放弃等待后执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReadWriteLock-StampedLock"><a href="#ReadWriteLock-StampedLock" class="headerlink" title="ReadWriteLock - StampedLock"></a>ReadWriteLock - StampedLock</h4><p>ReadLock：读锁，读的时候其它读线程依然可以进入</p><p>WriteLock，写锁，写的时候不允许其它线程进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br></pre></td></tr></table></figure><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>被减少到零之后才放行，否则阻塞等待。</p><p>定义一个CountDownLatch，有初始值，使用await阻塞线程，当减少到0时消除阻塞，类似于join但是更灵活</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;, String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();</span><br><span class="line">System.out.println(<span class="string">&quot;解除门栓&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>先到的被阻塞，直到达到指定值时释放</p><p>await到指定个线程之后，放行</p><p>场景：某线程需等待其它线程执行完后才能执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>, () -&gt; System.out.println(<span class="string">&quot;释放通行&quot;</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">tempInt</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t 线程已到&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, String.valueOf(i)).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Phaser"><a href="#Phaser" class="headerlink" title="Phaser"></a>Phaser</h4><p>CyclicBarrier升级版，使用arriveAndAwaitAdvance到达一个阶段的时候等待其它线程完成再向后执行</p><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>多共享资源的互斥使用，并发线程数的控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在多个线程并发访问时，最多只有3个线程可以同时运行</span></span><br><span class="line"><span class="comment">// acquire:总量-1</span></span><br><span class="line"><span class="comment">// release:总量+1</span></span><br><span class="line"><span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        semaphore.acquire();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        semaphore.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h4 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h4><p>两个线程间交换数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行exchange()时阻塞线程</span></span><br><span class="line">Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> <span class="title class_">Exchanger</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    exchanger.exchange(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    exchanger.exchange(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="线程等待和唤醒"><a href="#线程等待和唤醒" class="headerlink" title="线程等待和唤醒"></a>线程等待和唤醒</h2><h3 id="Object-wait-notify"><a href="#Object-wait-notify" class="headerlink" title="Object: wait, notify"></a>Object: wait, notify</h3><ol><li>都需要在同步代码块中执行(synchronized)</li><li>先wait再notify，等待中的线程才会被唤醒，否则无法唤醒</li><li>notify是随机唤醒一个线程</li><li>notify不释放锁，需要等待线程执行完或者线程中wait()才释放</li><li>notifyAll将所有线程唤醒，去争抢锁，但抢到锁的依旧只有一个线程</li></ol><h3 id="Condition-await-signal"><a href="#Condition-await-signal" class="headerlink" title="Condition: await, signal"></a>Condition: await, signal</h3><ol><li>都需要在同步代码块中执行</li><li>先await再signal，等待中的线程才会被唤醒，否则无法唤醒</li><li>可以精确的指定哪些线程被唤醒，即使用不同的condition加锁即可，condition的本质就是不同的等待队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"><span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br></pre></td></tr></table></figure><h3 id="LockSupport-park-unpark"><a href="#LockSupport-park-unpark" class="headerlink" title="LockSupport: park, unpark"></a>LockSupport: park, unpark</h3><p>线程阻塞工具类，可以让线程在任意位置阻塞，阻塞后也有对应的唤醒方法，底层调用Unsafe的native方法</p><p>线程阻塞需要消耗Permit，Permit最多存在1个</p><p>当调用park方法时</p><ul><li>如果有凭证，直接消耗掉这个凭证然后正常退出</li><li>如果无凭证，就阻塞等待凭证可用</li></ul><p>当调用unpark方法时</p><ul><li>增加一个凭证，但凭证最多有1个</li></ul><h2 id="JMM-Java-Memory-Model"><a href="#JMM-Java-Memory-Model" class="headerlink" title="JMM (Java Memory Model)"></a>JMM (Java Memory Model)</h2><p>是一组规范，可见性、原子性、有序性，定义了程序中各个变量的访问方式。</p><p><strong>解释</strong>：线程创建时JVM会为其创建工作内存（线程私有），JMM规定所有变量存储在主内存（共享），但线程必须在工作内存中操作变量。具体流程：拷贝-&gt;操作-&gt;写回。各个工作内存存储主内存变量的复印件，不同线程无法互相访问，线程间通信必须通过主内存。</p><img src="https://img-blog.csdnimg.cn/20210121135743932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><p><strong>JMM关于同步的规定</strong>：</p><ol><li>线程解锁前，必须把共享变量的值刷新回主内存。</li><li>线程加锁前，必须读取主内存的最新值到工作内存。</li><li>加锁解锁是同一把锁。</li></ol><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>作用：保证可见性，禁止指令重排</p><h3 id="volatile指令重排实现"><a href="#volatile指令重排实现" class="headerlink" title="volatile指令重排实现"></a>volatile指令重排实现</h3><blockquote><p>JVM通过<strong>内存屏障</strong>（load和store指令组成）禁止特定类型的编译器重排序和指令重排序</p></blockquote><p>为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p>对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><table><thead><tr><th>内存屏障</th><th>说明</th></tr></thead><tbody><tr><td>StoreStore屏障</td><td>禁止上面的普通写和下面的volatile写重排序</td></tr><tr><td>StoreLoad屏障</td><td>禁止上面的volatile写和下面可能有的volatile读写重排序</td></tr><tr><td>LoadLoad屏障</td><td>禁止下面所有的普通读和上面的volatile读重排序</td></tr><tr><td>LoadStore屏障</td><td>禁止下面所有的普通写操作和上面的volatile读重排序</td></tr></tbody></table><h3 id="volatile可见性实现"><a href="#volatile可见性实现" class="headerlink" title="volatile可见性实现"></a>volatile可见性实现</h3><blockquote><p>缓存一致性协议、lock前缀指</p></blockquote><h4 id="lock前缀指令"><a href="#lock前缀指令" class="headerlink" title="lock前缀指令"></a>lock前缀指令</h4><p>lock 前缀会使处理器执行当前指令时产生一个 LOCK# 信号，会对总线进行锁定，其它 CPU 对内存的读写请求都会被阻塞，直到锁释放</p><p>通过 hsdis 和 jitwatch 工具可以得到编译后的汇编代码</p><p>lock前缀指令在多核处理器下会引发两件事情：</p><ul><li>将当前处理器缓存行的数据写回到系统内存。</li><li>写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在 volatile 修饰的共享变量进行写操作的时候会多出 lock 前缀的指令</span></span><br><span class="line"><span class="number">0x000000000295158c</span>: lock cmpxchg %rdi,(%rdx)  </span><br></pre></td></tr></table></figure><h4 id="缓存一致性协议"><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h4><p>缓存是分段(line)的，一个段对应一块存储空间，称之为缓存行，它是 CPU 缓存中可分配的最小存储单元，大小 32 字节、64 字节、128 字节不等，这与 CPU 架构有关，通常来说是 64 字节。 LOCK# 因为锁总线效率太低，因此使用了多组缓存。 为了使其行为看起来如同一组缓存那样。因而设计了 缓存一致性协议。 缓存一致性协议有多种，但是日常处理的大多数计算机设备都属于 “ 嗅探(snooping)” 协议。 所有内存的传输都发生在一条共享的总线上，而所有的处理器都能看到这条总线。 <strong>缓存本身是独立的，但是内存是共享资源，所有的内存访问都要经过仲裁(同一个指令周期中，只有一个 CPU 缓存可以读写内存)。 CPU 缓存不仅仅在做内存传输的时候才与总线打交道，而是不停在嗅探总线上发生的数据交换，跟踪其他缓存在做什么。</strong> 当一个缓存代表它所属的处理器去读写内存时，其它处理器都会得到通知，它们以此来使自己的缓存保持同步。 只要某个处理器写内存，其它处理器马上知道这块内存在它们的缓存段中已经失效。</p><h3 id="volatile有序性实现"><a href="#volatile有序性实现" class="headerlink" title="volatile有序性实现"></a>volatile有序性实现</h3><blockquote><p>happends-before</p></blockquote><p>happens-before 规则中有一条是 volatile 变量规则：对一个 volatile 域的写，happens-before 于任意后续对这个 volatile 域的读。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设线程A执行writer方法，线程B执行reader方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VolatileExample</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writer</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="number">1</span>;              <span class="comment">// 1 线程A修改共享变量</span></span><br><span class="line">        flag = <span class="literal">true</span>;        <span class="comment">// 2 线程A写volatile变量</span></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;         <span class="comment">// 3 线程B读同一个volatile变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> a;          <span class="comment">// 4 线程B读共享变量</span></span><br><span class="line">        ……</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 happens-before 规则，上面过程会建立 3 类 happens-before 关系。</p><ul><li>根据程序次序规则：1 happens-before 2 且 3 happens-before 4。</li><li>根据 volatile 规则：2 happens-before 3。</li><li>根据 happens-before 的传递性规则：1 happens-before 4。</li></ul><p>因为以上规则，当线程 A 将 volatile 变量 flag 更改为 true 后，线程 B 能够迅速感知。</p><h3 id="为什么volatile不能实现原子性"><a href="#为什么volatile不能实现原子性" class="headerlink" title="为什么volatile不能实现原子性"></a>为什么volatile不能实现原子性</h3><p>没有原子性是因为底层代码一个++操作会被写成多行c++，这时候失去CPU分片就会值被改掉</p><h3 id="单例模式中的DCL为什么要加volatile"><a href="#单例模式中的DCL为什么要加volatile" class="headerlink" title="单例模式中的DCL为什么要加volatile"></a>单例模式中的DCL为什么要加volatile</h3><p>由于指令重排，对象在半初始化状态的时候就赋值给这个变量了，即instance已经不再是null，第二个线程就直接拿来使用这个半初始化状态的对象。</p><h3 id="volatile引用对象"><a href="#volatile引用对象" class="headerlink" title="volatile引用对象"></a>volatile引用对象</h3><p>如果volatile修饰的是一个引用对象，那么引用对象内部的属性发生改变volatile是无法观察到的。</p><h3 id="共享的long、double变量为什么要使用volatile"><a href="#共享的long、double变量为什么要使用volatile" class="headerlink" title="共享的long、double变量为什么要使用volatile"></a>共享的long、double变量为什么要使用volatile</h3><p>因为long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读&#x2F;写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读&#x2F;写操作都具有原子性。</p><h2 id="CAS-Compare-And-Set"><a href="#CAS-Compare-And-Set" class="headerlink" title="CAS (Compare And Set)"></a>CAS (Compare And Set)</h2><p><strong>作用</strong>：线程的期望值和物理内存真实值一样则修改，否则需要重新获得主物理内存的真实值，这个过程是原子的。</p><p><strong>原理</strong>：Unsafe、自旋锁、乐观锁</p><ul><li><p>Unsafe：Java无法直接访问底层系统，可以基于Unsafe内部native方法可以像C的指针一样直接操作内存。</p></li><li><p>自旋锁：循环判断工作内存与主内存的值是否相等，如相等则返回。</p></li></ul><p><strong>缺点</strong>：循环时间长开销大、只能保证一个共享变量的原子操作、ABA问题。</p><h3 id="CAS怎么保证原子性"><a href="#CAS怎么保证原子性" class="headerlink" title="CAS怎么保证原子性"></a>CAS怎么保证原子性</h3><p>调用了unsafe类，里面通过自旋获得内存中的真实值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var1: 当前对象，var2: 当前对象的内存偏移量地址，var4: 增加的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4)</span> &#123;</span><br><span class="line">    <span class="type">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 根据当前对象的内存偏移量获取当前对象的值</span></span><br><span class="line">        var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    <span class="comment">// 如果CAS比较结果不一致，则继续循环，否则退出循环</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取内存真实值调用的是C++的代码，C++执行了一条汇编指令：如果是mp则上锁，上锁后比较并交换</p><p>上锁的原因是汇编中的 <code>cmpxchg</code> 也是不能保证原子性的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">LOCK_IF_MP</span>(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span></span><br></pre></td></tr></table></figure><p>而这条汇编的实际作用就是在操作交换之前加了一个lock执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock cmpxchg</span><br></pre></td></tr></table></figure><h3 id="为什么CAS要比synchronized快"><a href="#为什么CAS要比synchronized快" class="headerlink" title="为什么CAS要比synchronized快"></a>为什么CAS要比synchronized快</h3><p>synchronized需要进行上下文切换，每一次线程进出Cpu就是一次上下文切换，而这一次切换大概需要3-5微秒，而Cpu执行一条执行大概只需要0.6纳秒，而CAS没有上下文切换的过程，那么效率就高。</p><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><p>CAS只会判断最终的对象是否与期望的一致，但不会判断在这期间对象是否有改变，当这期间对象发生了改变，就会产生ABA问题，即虽然判断对象是同一个，但是其中的属性发生了改变。</p><p>解决方案：加版本号，如AtomicStampedReferece </p><h3 id="并发累加Long的三种方式"><a href="#并发累加Long的三种方式" class="headerlink" title="并发累加Long的三种方式"></a>并发累加Long的三种方式</h3><ol><li>加锁</li><li>AtomicLong：CAS</li><li>LongAdder：比AtomicXXX性能更高，内部维护了一个Cell数组，Cell 数组相当于一个分段的概念，把 AtomicXXX 中的一个值分成了多个值进行管理，当 CAS 更新失败时不再当前循环重试，而是尝试获取其他的资源锁，这样就降低了对于 AtomicXXX 中的单个资源的竞争，所以 LongAdder 的性能更高。代价是维护了 Cell 数组，也就意味着要占用更多的内存空间，以空间换时间，也是值得的。</li></ol><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">5</span>);</span><br><span class="line">System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">2019</span>) + <span class="string">&quot;\t current data:&quot;</span> + atomicInteger.get());</span><br><span class="line">System.out.println(atomicInteger.compareAndSet(<span class="number">5</span>, <span class="number">1024</span>) + <span class="string">&quot;\t current data:&quot;</span> + atomicInteger.get());</span><br><span class="line">atomicInteger.getAndIncrement();</span><br></pre></td></tr></table></figure><h3 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;z3&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;l4&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        AtomicReference&lt;User&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">        atomicReference.set(z3);</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="string">&quot;\t&quot;</span> + atomicReference.get().toString());</span><br><span class="line">        System.out.println(atomicReference.compareAndSet(z3, l4) + <span class="string">&quot;\t&quot;</span> + atomicReference.get().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AQS-AbstractQueuedSynchronizer"><a href="#AQS-AbstractQueuedSynchronizer" class="headerlink" title="AQS (AbstractQueuedSynchronizer)"></a>AQS (AbstractQueuedSynchronizer)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>是用来构建锁或者其它同步组件的抽象父类</p><ul><li>volatile state：用volatile修饰保证线程之间可见，state的值根据子类的具体实现来分配，如ReentrantLock加锁是1，不加锁是0；CountDownLatch设置为5，state就是5</li><li>CAS：抢锁的时候使用CAS</li><li>双端队列：CLH变种的双端队列，Node中存放的是线程</li></ul><h3 id="抢锁流程"><a href="#抢锁流程" class="headerlink" title="抢锁流程"></a>抢锁流程</h3><p>非公平锁上来直接抢锁，抢不到进入队列排队；公平锁判断队列是否有元素，没有的话得到锁，否则进入队列排队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 公平锁会通过 hasQueuedPredecessors 方法判断队列前是否有元素 有就排队 */</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">        setExclusiveOwnerThread(current);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 非公平锁上来直接就抢锁 */</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">        setExclusiveOwnerThread(current);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20201218203120948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());<span class="comment">// 第一个线程抢到锁</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);<span class="comment">// 第二个线程及后续线程抢占</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;<span class="comment">// 尝试抢占，抢占成功返回true不进入队列</span></span><br><span class="line">        <span class="comment">// acquireQueued 尝试获取锁，若不成功则用LockSupport.park阻塞，直到被唤醒</span></span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Node <span class="title function_">addWaiter</span><span class="params">(Node mode)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">pred</span> <span class="operator">=</span> tail;</span><br><span class="line">    <span class="comment">// 第二次以后进入只需将Node加入队列末尾即可</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="literal">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一次进入队列会先初始化，即生成一个空的头节点</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果前置节点是头节点，那么第二个节点会尝试获得锁</span></span><br><span class="line"><span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg))&#123;&#125;</span><br></pre></td></tr></table></figure><p>JDK9使用VarHandle：普通的原子操作，比反射快，直接操作二进制码</p><h3 id="AQS资源获取方式"><a href="#AQS资源获取方式" class="headerlink" title="AQS资源获取方式"></a>AQS资源获取方式</h3><p>AQS定义了两种资源获取的方式：独占、共享</p><p>独占：只有一个线程能访问运行，又根据顺序分为公平锁和非公平锁</p><p>共享：多个线程可同时访问运行，如Semaphore、CountDownLatch、CyclicBarrier</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><blockquote><p>线程独享的Map</p></blockquote><p><strong>ThreadLocalMap中的Entry是弱引用</strong></p><ol><li>若是强引用，即使tl &#x3D;&#x3D; null，但key的引用依然指向ThreadLocal对象，所以有内存泄露，而使用弱引用则不会。</li><li>但还是有内存泄露的存在，ThreadLocalMap 是 Thread 的一个属性，生命周期跟 Thread 一致，当ThreadLocal被回收，key的值变成null，则导致整个value再也无法被访问到，因此依然存在内存泄露。所以ThreadLocal不用了需要调用 <code>remove()</code>回收</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;M&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">tl.set(<span class="keyword">new</span> <span class="title class_">M</span>());</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210114221056228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础</title>
      <link href="/swan-blog/2022/10/24/Java/Java%20%E5%9F%BA%E7%A1%80/"/>
      <url>/swan-blog/2022/10/24/Java/Java%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载顺序"><a href="#类加载顺序" class="headerlink" title="类加载顺序"></a>类加载顺序</h2><ol><li>类初始化：静态方法 -&gt; 静态代码块，先初始化父类再初始化子类</li><li>实例初始化 ：顺序: 非静态实例变量、非静态代码块、构造器代码</li><li>子类覆写了父类的方法，初始化时只会执行子类的方法，若父类方法没被覆写，则执行父类方法</li></ol><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><table><thead><tr><th>静态内部类</th><th>非静态内部类</th></tr></thead><tbody><tr><td>可以有静态成员(方法，属性)</td><td>不能有静态成员(方法，属性)</td></tr><tr><td>实例化<br />OutClassTest.InnerStaticClass inner &#x3D; new OutClassTest.InnerStaticClass();</td><td>实例化<br />OutClassTest oc1 &#x3D; new OutClassTest();<br />OutClassTest.InnerClass inner &#x3D; oc1.new InnerClass();</td></tr><tr><td>调用方法或静态变量，通过类名直接调用<br />OutClassTest.InnerStaticClass.staticValue<br />OutClassTest.InnerStaticClass.method()</td><td>实例化出来之后正常调用<br />inner.method()</td></tr></tbody></table><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String中的intern()方法</p><p>如果字符串常量池中已经包含一个等于此String对象的字符串，则返回代表池中这个字符串的String对象的引用，否则会将此String对象包含的字符串添加到常量池中，并且返回此String对象的引用。</p><p>例题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>).append(<span class="string">&quot;World&quot;</span>).toString();</span><br><span class="line">System.out.println(str1 == str1.intern());      <span class="comment">// true</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;ja&quot;</span>).append(<span class="string">&quot;va&quot;</span>).toString();</span><br><span class="line">System.out.println(str2 == str2.intern());      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>解释：有一个JDK自带的初始化的字符串”java”在加载sun.misc.Version这个类的时候进入了常量池</p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li>基本数据类型：传递值</li><li>引用数据类型：传地址</li></ul><p>String、包装类等属于引用数据类型，同时是<strong>不可变对象</strong></p><blockquote><p>《Effective Java》<br>不可变对象(Immutable Object)：对象一旦被创建后，对象所有的状态及属性在其生命周期内不会发生任何变化。<br>由于ImmutableObject不提供任何setter方法，并且成员变量value是基本数据类型，getter方法返回的是value的拷贝，所以一旦ImmutableObject实例被创建后，该实例的状态无法再进行更改，因此该类具备不可变性。</p></blockquote><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>对象的序列化主要有两种用途：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中</li><li>在网络上传送对象的字节序列</li></ol><p>serialVersionUID作用：序列化时为了保持版本的兼容性，即在版本升级时反序列化仍保持对象的唯一性。</p><p>有两种生成方式：</p><ol><li>默认的1L，比如：private static final long serialVersionUID &#x3D; 1L</li><li>根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> xxxxL;</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法。对于任意一个对象，都能够调用它的任意方法和属性。</p></blockquote><p>获取 Class 对象的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 User 对象的Class</span></span><br><span class="line">Class&lt;User&gt; clazz = User.class;</span><br><span class="line">Class&lt;User&gt; clazz = user.getClass();</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.demo.entity.User&quot;</span>);</span><br><span class="line">Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;com.demo.entity.User&quot;</span>);</span><br></pre></td></tr></table></figure><p>利用反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 需要有无参构造</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="comment">// 利用 User 的有参构造创建</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> clazz.getConstructor(String.class).newInstance(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><p>利用反射操作属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据属性名获取属性值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(String fieldName, Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(object);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;反射获取数据异常&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据属性名设置属性值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String fieldName, Object object, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; c = object.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c.getDeclaredField(fieldName);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(object, value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;反射设置数据异常&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反射中Class.forName和ClassLoader.loadClass的区别</strong></p><ol><li><p>class.forName除了将类的class文件加载到jvm中之外，还会对类进行解释，执行类中的static块，还会执行给静态变量赋值的静态方法</p></li><li><p>classLoader只干一件事情，就是将class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。</p></li></ol><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>可以通过注解来获取相关属性，通过这些属性再配合反射实现相应业务。</p><p>案例：通过反射获取全类名，再通过全类名实例化对应的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Channel&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 连接接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CloudConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect to cloud&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect to database&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Channel(&quot;com.demo.basic.annotation.DatabaseConnection&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection conn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getAnnotation(Channel.class);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射获取到Connection对象实例</span></span><br><span class="line">            conn = (Connection) Class.forName(channel.value()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="comment">// 执行build方法，实际上执行的是Connection接口的实现类</span></span><br><span class="line">        <span class="keyword">if</span> (conn.build())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息发送:&quot;</span> + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        msg.send(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="申请堆外内存"><a href="#申请堆外内存" class="headerlink" title="申请堆外内存"></a>申请堆外内存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配 10M 堆外内存</span></span><br><span class="line"><span class="type">long</span> <span class="variable">address</span> <span class="operator">=</span> unsafe.allocateMemory(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="comment">// 释放堆外内存</span></span><br><span class="line">unsafe.freeMemory()</span><br></pre></td></tr></table></figure><h2 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h2><p>接口：自上向下，定义约束和规范</p><p>抽象类：自下向上，将具体子类公共实现抽象到一个父类之中</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><h3 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h3><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)<br>按数据流的流向不同分为：输入流，输出流<br>按流的角色的不同分为：节点流，处理流<br><img src="https://img-blog.csdnimg.cn/2020020116265641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IO流体系<br><img src="https://img-blog.csdnimg.cn/20200201162728374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h3><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li>File类的实例化</li><li>流的实例化</li><li>读写的操作</li><li>资源的关闭</li></ol><h4 id="字符流操作文件-文本文件"><a href="#字符流操作文件-文本文件" class="headerlink" title="字符流操作文件(文本文件)"></a>字符流操作文件(文本文件)</h4><ol><li>读文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readFile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 实例化File类对象，指明要操作的文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/1.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 提供具体的流</span></span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="comment">// 每次读1024个字符</span></span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// read(char[] cbuf) 返回每次读入cbuf数组中字符的个数，如果到达文件末尾，返回-1</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                System.out.print(cbuf[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fr.read(cbuf);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="literal">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>写文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/3.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 参数2表示是否对原有文件追加</span></span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(file, <span class="literal">false</span>);</span><br><span class="line">        fw.write(<span class="string">&quot;Hello World 张三&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fw != <span class="literal">null</span>)</span><br><span class="line">                fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>先读后写 – 复制文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/3.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dstFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/4.txt&quot;</span>);</span><br><span class="line">    <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line">        fw = <span class="keyword">new</span> <span class="title class_">FileWriter</span>(dstFile, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="literal">null</span>)</span><br><span class="line">                fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fw != <span class="literal">null</span>)</span><br><span class="line">                fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字节流操作文件-图片、视频等"><a href="#字节流操作文件-图片、视频等" class="headerlink" title="字节流操作文件(图片、视频等)"></a>字节流操作文件(图片、视频等)</h4><p>复制图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyFile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dstFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/img/2.jpg&quot;</span>);</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        fos = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>)</span><br><span class="line">                fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="literal">null</span>)</span><br><span class="line">                fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓冲流的使用"><a href="#缓冲流的使用" class="headerlink" title="缓冲流的使用"></a>缓冲流的使用</h4><p>作用：提升流的读取、写入速度。</p><p>复制图片文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyImgFile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dstFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/img/2.jpg&quot;</span>);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建节点流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(dstFile);</span><br><span class="line">        <span class="comment">// 创建缓冲流</span></span><br><span class="line">        bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">        bos = <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">// 读取写入</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(buf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 资源关闭，关闭外层流的同时，内层流也会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bis != <span class="literal">null</span>)</span><br><span class="line">                bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bos != <span class="literal">null</span>)</span><br><span class="line">                bos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制文本文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">copyTxtFile</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">srcFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/1.txt&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dstFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/resources/file/5.txt&quot;</span>);</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(srcFile);</span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(dstFile);</span><br><span class="line">        br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr);</span><br><span class="line">        bw = <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line">        <span class="type">char</span>[] cbuf = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = br.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bw.write(cbuf, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>)</span><br><span class="line">                br.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bw != <span class="literal">null</span>)</span><br><span class="line">                bw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stream-Api"><a href="#Stream-Api" class="headerlink" title="Stream Api"></a>Stream Api</h2><p>Stream 是数据渠道，用于操作数据源所生成的元素序列。</p><ol><li>Stream 不存储元素</li><li>Stream 不改变源对象，他们会返回一个持有结果的新的 Stream</li><li>Stream 操作是延迟执行的，这意味着他们会等到需要结果的时候执行</li></ol><p>Stream 操作步骤：创建流 -&gt; 中间操作 -&gt; 终止操作</p><p><strong>Stream Create</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.集合类</span></span><br><span class="line">Collection.stream();</span><br><span class="line"><span class="comment">// 2.数组</span></span><br><span class="line">Arrays.stream(T[]);</span><br><span class="line"><span class="comment">// 3.of</span></span><br><span class="line">Stream.of(T... values);</span><br><span class="line"><span class="comment">// 4.创建无限流</span></span><br><span class="line"><span class="comment">// 4.1.迭代，案例：获取前10个偶数</span></span><br><span class="line">Stream.iterate(<span class="keyword">final</span> T seed, <span class="keyword">final</span> UnaryOperator&lt;T&gt; f);</span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 4.2.生成，案例：获取前10个随机数</span></span><br><span class="line">Stream.genrate(Supplier&lt;T&gt; s);</span><br><span class="line">Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>Stream Middle Operation</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选和切片</span></span><br><span class="line"><span class="comment"> * - filter     接收lambda，从流冲排除某些元素</span></span><br><span class="line"><span class="comment"> * - limit      截断流，使其元素不超过给定数量</span></span><br><span class="line"><span class="comment"> * - skip(n)    跳过元素，返回一个扔掉了前n个元素的流，若流中元素不足n个，则返回一个空流，与limit互补</span></span><br><span class="line"><span class="comment"> * - distinct   筛选，通过流所生成元素的hashCode()和equals()去除重复元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="number">100</span>).limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="number">100</span>).skip(<span class="number">1</span>).forEach(System.out::println);</span><br><span class="line">emps.stream().filter(e -&gt; e.getSalary() &gt;= <span class="number">100</span>).distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射</span></span><br><span class="line"><span class="comment"> * map      接收lambda，将元素转换成其它形式或提取信息。接收另一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新元素。</span></span><br><span class="line"><span class="comment"> * flatMap  接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流，类似于list.allAll()</span></span><br><span class="line"><span class="comment"> * mapToDouble</span></span><br><span class="line"><span class="comment"> * mapToInt</span></span><br><span class="line"><span class="comment"> * mapToLong</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">list.stream().map(String::toUpperCase).forEach(System.out::println);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * sorted()                 自然排序(Comparable)</span></span><br><span class="line"><span class="comment"> * sorted(Comparator com)   定制排序(Comparator)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">list.stream().sorted().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>Stream Termination</strong></p><p>匹配和查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否匹配所有元素 allMatch</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> emps.stream().allMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至少匹配一个元素 anyMatch</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> emps.stream().anyMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否没有匹配所有元素 noneMatch</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> emps.stream().noneMatch(e -&gt; e.getStatus().equals(Employee.Status.BUSY));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倒排后返回第一个元素 findFirst</span></span><br><span class="line">Optional&lt;Employee&gt; op = emps.stream().sorted(Comparator.comparingDouble(Employee::getSalary).reversed()).findFirst();</span><br><span class="line">System.out.println(op.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回任意元素的值 findAny</span></span><br><span class="line">Optional&lt;Employee&gt; op1 = emps.stream().filter(e -&gt; e.getStatus().equals(Employee.Status.FREE)).findAny();</span><br><span class="line">System.out.println(op1.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回元素总个数 count</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> emps.stream().count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回流中最大值 max</span></span><br><span class="line">Optional&lt;Employee&gt; max = emps.stream().max(Comparator.comparingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(max.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回流中最小值 min</span></span><br><span class="line">Optional&lt;Double&gt; min = emps.stream().map(Employee::getSalary).min(Double::compare);</span><br><span class="line">System.out.println(min.get());</span><br></pre></td></tr></table></figure><p>归约：可以将流中的元素反复结合起来，得到一个值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce(T identity, BinaryOperator);</span><br><span class="line">reduce(BinaryOperator);</span><br><span class="line"><span class="comment">// 案例：求和</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br></pre></td></tr></table></figure><p>收集：将流转换为其它形式，接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收集为List</span></span><br><span class="line">List&lt;String&gt; list = emps.stream().map(Employee::getName).collect(Collectors.toList());</span><br><span class="line"><span class="comment">// 分组</span></span><br><span class="line">Map&lt;Employee.Status, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(Employee::getStatus));</span><br><span class="line"><span class="comment">// 多级分组</span></span><br><span class="line">Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; map = emps.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.getAge() &lt;= <span class="number">35</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;青年&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;老年&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)));</span><br><span class="line"><span class="comment">// 分区</span></span><br><span class="line">Map&lt;Boolean, List&lt;Employee&gt;&gt; map = emps.stream()</span><br><span class="line">    .collect(Collectors.partitioningBy(e -&gt; e.getSalary() &gt; <span class="number">8000</span>));</span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line"><span class="type">DoubleSummaryStatistics</span> <span class="variable">summary</span> <span class="operator">=</span> emps.stream()</span><br><span class="line">    .collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class="line">System.out.println(summary.getSum());</span><br><span class="line">System.out.println(summary.getAverage());</span><br><span class="line">System.out.println(summary.getMax());</span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> emps.stream().map(Employee::getName).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java JVM</title>
      <link href="/swan-blog/2022/10/24/Java/Java%20JVM/"/>
      <url>/swan-blog/2022/10/24/Java/Java%20JVM/</url>
      
        <content type="html"><![CDATA[<h2 id="对象和Class"><a href="#对象和Class" class="headerlink" title="对象和Class"></a>对象和Class</h2><h3 id="对象的创建过程"><a href="#对象的创建过程" class="headerlink" title="对象的创建过程"></a>对象的创建过程</h3><p><img src="https://img-blog.csdnimg.cn/20210111220751109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><p>class loading</p></li><li><p>class linking (verification preparation resolution)</p></li><li><p>class initializing：静态变量赋值，执行静态语句块</p></li><li><p>申请内存对象</p></li><li><p>成员变量赋值</p></li><li><p>调用构造方法</p><ol><li>成员变量顺序赋初始值</li><li>执行构造方法语句</li></ol></li></ol><h3 id="对象在内存中的存储布局"><a href="#对象在内存中的存储布局" class="headerlink" title="对象在内存中的存储布局"></a>对象在内存中的存储布局</h3><p>一个Object对象占16个字节 &#x3D; markword + class pointer + padding &#x3D; 8 + 4 + 4 &#x3D; 16</p><h4 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h4><ul><li>对象头<ul><li>markword：锁信息、HashCode、GC信息，8 bytes（64位JDK）</li><li>class pointer：指向Class对象，4 bytes（压缩），8 bytes（不压缩）</li></ul></li><li>instance data：对象的属性（大小根据属性计算）</li><li>padding：8的倍数</li></ul><h4 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h4><ul><li><p>对象头</p><ul><li>markword：锁信息、HashCode、GC信息，8 bytes（64位JDK）</li><li>class pointer：指向Class对象，4 bytes（压缩），8 bytes（不压缩）</li></ul></li><li><p>数组长度：4字节</p></li><li><p>数组数据</p></li><li><p>Padding：8的倍数</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseCompressedClassPoiners <span class="comment"># class pointer压缩，默认开启</span></span><br></pre></td></tr></table></figure><h3 id="对象头信息"><a href="#对象头信息" class="headerlink" title="对象头信息"></a>对象头信息</h3><p>对象头信息包括：对象的HashCode，锁标志位、GC标记（分代的年龄）等</p><p>markword 64位</p><p><img src="https://img-blog.csdnimg.cn/2021011712102443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="对象定位"><a href="#对象定位" class="headerlink" title="对象定位"></a>对象定位</h3><ol><li>句柄池：间接指针，一个指向对象，另一个指向了.class</li><li>直接指针（HotSpot）：直接指向对象，对象再指向 .class</li></ol><h3 id="对象分配"><a href="#对象分配" class="headerlink" title="对象分配"></a>对象分配</h3><p>首先new一个对象的时候尝试往栈上分配，如可以分配下，就分配到栈上，栈一弹出对象就没了。</p><p>如果对象过大，栈分配不下，直接分配到堆内存（老年代）。</p><p>如果对象不大，先进行线程本地分配，分配不下找伊甸区，然后进行GC的过程，年龄到了进入老年代。</p><h3 id="对象生命周期"><a href="#对象生命周期" class="headerlink" title="对象生命周期"></a>对象生命周期</h3><p><img src="https://img-blog.csdnimg.cn/de1cabf13ea549b991e3e3522f5d229e.png" alt="在这里插入图片描述"></p><h3 id="Java从编码到执行"><a href="#Java从编码到执行" class="headerlink" title="Java从编码到执行"></a>Java从编码到执行</h3><p>class被加载到内存之后，class的二进制文件加载到内存里，与此同时生成了class类的对象，该对象指向了二进制文件。class对象存在metaspace</p><p><img src="https://img-blog.csdnimg.cn/20210111203500781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h3><p><strong>类加载流程图：</strong><br><img src="https://img-blog.csdnimg.cn/20200131191909464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>类加载器示意图：</strong><br><img src="https://img-blog.csdnimg.cn/20210111220915818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>ClassLoader</strong>：负责加载class文件（class文件在文件开头有特定文件标识）</p><p><strong>各个类加载器的作用</strong></p><p>BootStrapClassLoader 引导类加载器：加载JVM自身需要的类，使用C++实现，负责加载<code>%JAVA_HOME%/jre/lib.jar</code>核心类库。</p><p>ExtensionClassLoader 扩展类加载器：负责加载%JAVA_HOME%&#x2F;lib&#x2F;ext目录下的类。</p><p>AppClassLoader 系统类加载器：负责加载系统类路径<code>java -classpath</code>或<code>-D java.class.path</code> 指定路径下的类库。</p><p>CustomClassLoader 自定义类加载器：继承ClassLoader重写findClass方法</p><p><strong>双亲委派</strong>：JVM收到类加载请求，他会自底向上地去缓存中找这个类，找到了返回，没找到就把这个请求委派给父加载器（不是继承）去寻找，直到BootstrapClassLoader也没找到时，会自顶向下加载这个class，如果到最后还没加载成功，则会抛出异常 <code>ClassNotFoundException</code></p><p>作用：沙箱安全，不让自己定义的类去勿扰JDK出厂自带的类</p><p><img src="https://img-blog.csdnimg.cn/20210111223139570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="JVM-内存模型"><a href="#JVM-内存模型" class="headerlink" title="JVM 内存模型"></a>JVM 内存模型</h2><p><img src="https://img-blog.csdnimg.cn/20200131192106991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><strong>程序计数器</strong>：存放指令位置，虚拟机的运行就是循环取PC中的指令</li><li><strong>栈</strong>：每个JVM都有自己私有的JVM栈，JVM栈用来存储栈帧</li><li><strong>本地方法栈</strong>：存放native方法的地方。</li><li><strong>堆</strong>：所有线程共享，存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。</li><li><strong>方法区</strong>：存储class二进制文件、类信息、常量、静态变量、运行时常量池</li><li><strong>直接内存</strong>：JVM可以直接访问的内核空间的内存。</li></ol><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>栈：每个JVM都有自己私有的JVM栈，JVM栈用来存储Frame</p><p>Frame：每个方法对应一个 Frame</p><p>Frame 存放：Local Variable Table, Operated Stack, Dynamic Linking, Return Address</p><ul><li>Local Variable Table：byte、short、int、long、float、double、boolean、char、reference</li><li>Dynamic Linking：A方法调用B方法，这个过程就叫动态链接</li><li>Return Address：A方法调用B方法，B方法返回值的存放地址</li></ul><p>案例：输出结果为8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将8压入操作数栈，再将8拿出来赋值给i</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">// 将8压入操作数栈，i加1，从操作数栈中弹出8赋值给i</span></span><br><span class="line">i = i++;</span><br><span class="line"><span class="comment">// 输出最终结果 8</span></span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p><strong>栈上分配</strong> </p><p>逃逸分析：逃逸分析的目的是判断对象的作用域是否有可能逃逸出函数体。 </p><p>标量替换：允许将对象打散分配在栈上，比如若一个对象拥有两个字段，会将这两个字段视作局部变量进行分配。 </p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h3 id="堆的基本概念"><a href="#堆的基本概念" class="headerlink" title="堆的基本概念"></a>堆的基本概念</h3><p>Java 中的堆是用来存储对象本身的以及数组（当然，数组引用是存放在 Java 栈中的）， 堆是被所有线程共享的，在 JVM 中只有一个堆。所有对象实例以及数组都要在堆上分配内存，但随着 JIT 发展，栈上分配，标量替换优化技术，在堆上分配变得不那么到绝对，只能在 server 模式下才能启用逃逸分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左边存放在栈中，右边存放在堆中</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure><h3 id="JVM-内存分代模型"><a href="#JVM-内存分代模型" class="headerlink" title="JVM 内存分代模型"></a>JVM 内存分代模型</h3><blockquote><p>除了 Epsilon ZGC Shenandoah 之外的GC都是使用逻辑分代模型</p><p>G1是逻辑分代，物理不分代</p><p>除上述 GC 模型之外不仅是逻辑分代，而且是物理分代</p></blockquote><p>新生代 &#x3D; Eden区 + 2 个 Suvivor区</p><ol><li>YGC 回收之后，大多数对象被回收，活着的进入S0</li><li>再次 YGC ，活着的对象 Eden + S0 -&gt; S1</li><li>再次 YGC， Eden + S1 -&gt; S0</li><li>年龄足够进入老年代</li><li>分配担保：Suvivor区装不下直接进入老年代</li></ol><p>老年代：</p><ol><li>老年代满了就Full GC</li></ol><p>永久代（1.7）&#x2F; 元空间（1.8）</p><ol><li>永久代 元空间 - Class</li><li>永久代必须指定大小限制，元空间可以设置，也可以不设置，上限取决于物理内存</li><li>字符串常量 1.7 - 永久代，1.8 - 堆</li><li>永久代和元空间都是方法区的实现</li></ol><p>图示</p><p><img src="https://img-blog.csdnimg.cn/20200131193503949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="实例化对象分配"><a href="#实例化对象分配" class="headerlink" title="实例化对象分配"></a>实例化对象分配</h3><ol><li><p>栈上分配</p><p>线程私有小对象、无逃逸、支持标量替换</p></li><li><p>线程本地分配 TLAB （Thread Local Alllocation Buffer）</p><p>默认占用Eden的1%、多线程的时候不用竞争Eden就可以申请空间，提升效率、小对象</p></li><li><p>老年代：大对象</p></li></ol><h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>吞吐量：用户代码时间 &#x2F; ( 用户代码执行时间 + 垃圾回收时间 )</p><p>响应时间：STW（Stop The World）越短，响应时间越好</p><h3 id="JVM调优指令"><a href="#JVM调优指令" class="headerlink" title="JVM调优指令"></a>JVM调优指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有指令</span></span><br><span class="line">java -X</span><br><span class="line">java -XX:+PrintFlagsFinal -version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">模糊查询指令</span></span><br><span class="line">java -XX:+PrintFlagsFinal -version | grep &lt;command&gt;</span><br></pre></td></tr></table></figure><p>常用指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Xms&lt;size&gt;        # 初始堆内存</span><br><span class="line">-Xmx&lt;size&gt;        # 最大堆内存</span><br><span class="line">-Xss&lt;size&gt;        # 每个线程的栈大小</span><br><span class="line">-XX:MetaspaceSize=128m# 初始元空间大小</span><br><span class="line">-XX:MaxMetaspaceSize=256m# 最大元空间大小，默认没有限制</span><br><span class="line">-XX:MaxTenuringThreshold=15# 老年代的大小</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jinfo &lt;pid&gt;# 打印虚拟机详细信息</span><br><span class="line">jstat -gc &lt;pid&gt; &lt;time&gt;# 打印gc信息，每&lt;time&gt;毫秒打印一次</span><br><span class="line">jconsole# java控制面板</span><br></pre></td></tr></table></figure><h3 id="JVM调优场景"><a href="#JVM调优场景" class="headerlink" title="JVM调优场景"></a>JVM调优场景</h3><h4 id="系统CPU经常100-，如何调优"><a href="#系统CPU经常100-，如何调优" class="headerlink" title="系统CPU经常100%，如何调优"></a>系统CPU经常100%，如何调优</h4><p>CPU 100% 一定有线程在占用系统资源</p><ol><li>找出哪个进程的 CPU 高（top）</li><li>该进程的哪个线程 CPU 高（top - Hp [pid]）</li><li>导出该线程的堆栈（jstack）</li><li>查找哪个方法（栈帧）消耗时间 （jstack）</li><li>工作线程占比高 | 垃圾回收线程占比高</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Linux中哪个进程占资源</span></span><br><span class="line">top</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只列出java的进程</span></span><br><span class="line">jps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看这个&lt;pid&gt;的进程中哪个线程占资源</span></span><br><span class="line">top -Hp &lt;pid&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看这个&lt;pid&gt;的线程堆栈</span></span><br><span class="line">jstack &lt;pid&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出堆内存</span></span><br><span class="line">jmap -heap &lt;pid&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">观察前20个占用内存比较大的类</span></span><br><span class="line">jmap -histo &lt;pid&gt; | head -20</span><br></pre></td></tr></table></figure><h4 id="如何监控JVM"><a href="#如何监控JVM" class="headerlink" title="如何监控JVM"></a>如何监控JVM</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">格式模板</span></span><br><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">类加载统计</span></span><br><span class="line">jstat -class &lt;pid&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译统计</span></span><br><span class="line">jstat -compiler &lt;pid&gt;</span><br></pre></td></tr></table></figure><h4 id="执行GC之后内存占用依然很高"><a href="#执行GC之后内存占用依然很高" class="headerlink" title="执行GC之后内存占用依然很高"></a>执行GC之后内存占用依然很高</h4><p>进入 arthas 控制台dump一份内存快照</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapdump /tmp/dump.hprof</span><br></pre></td></tr></table></figure><p>使用 <code>%JAVA_HOME%/bin/jvisualvm.exe</code> 装入 <code>dump.hprof</code> 观察哪些对象占用了大量的内存，也可以比较两次dump的区别。</p><p>但是对于内存特别大的系统，jmap执行期间会对进程产生很大影响，甚至卡顿。</p><p>解决方案：设定以下参数，OOM的时候会自动生成堆转储文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/base</span><br></pre></td></tr></table></figure><h3 id="GC-日志分析"><a href="#GC-日志分析" class="headerlink" title="GC 日志分析"></a>GC 日志分析</h3><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xms20M -Xmx20M -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC GCDemo</span><br></pre></td></tr></table></figure><p>日志说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [ParNew: 4544K-&gt;260K(6144K), 0.0012072 secs] 4544K-&gt;261K(19840K), 0.0012674 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line">ParNew：年轻代收集器</span><br><span class="line"><span class="meta prompt_">4544k-&gt;</span><span class="language-bash">260k: 收集前后对比</span></span><br><span class="line">(6144k): 整个年轻代容量</span><br><span class="line"><span class="meta prompt_">4544K-&gt;</span><span class="language-bash">261K: 整个堆的情况</span></span><br><span class="line">(19840K)：整个堆的大小</span><br></pre></td></tr></table></figure><h3 id="G1-日志"><a href="#G1-日志" class="headerlink" title="G1 日志"></a>G1 日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[GC pause (G1 Evacuation pause)(young)(initial-mark), 0.0015790 secs]</span><br><span class="line"></span><br><span class="line">G1 Evacuation pause: 年轻代复制存活对象</span><br><span class="line">initial-mark: 混合回收阶段，这里是YGC混合老年代回收</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java GC</title>
      <link href="/swan-blog/2022/10/24/Java/Java%20GC/"/>
      <url>/swan-blog/2022/10/24/Java/Java%20GC/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>GC是什么（分代收集算法）</p><ul><li>频繁收集Young区</li><li>较少收集Old区</li><li>基本不动元空间</li></ul><p>普通GC(Minor GC)：只针对新生代区域的GC，指发生在新生代的垃圾收集动作，因为大部分Java对象存活率不高，所以Minor GC非常频繁，一般回收速度也比较快。</p><p>全局GC(Major GC &#x2F; Full GC)：指发生在老年代的垃圾收集动作，出现了Major GC，经常会伴随至少一次的Minor GC，Major GC的速度一般要比Minor GC慢10倍以上。</p><h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><h3 id="Card-Table"><a href="#Card-Table" class="headerlink" title="Card Table"></a>Card Table</h3><p>由于新生代的垃圾收集通常很频繁，如果老年代对象引用了新生代的对象，那么，需要跟踪从老年代到新生代的所有引用，效率非常低，所以 JVM 设计了 Card Table，如果一个老年代的 Card Table 中有对象指向新生代，就将它标记为 Dirty，下次扫描时，只需要扫描 Ditry Card，大大提升效率。</p><p>在结构上，Card Table 用 Bit Map 实现。</p><h3 id="CSet（Collection-Set）"><a href="#CSet（Collection-Set）" class="headerlink" title="CSet（Collection Set）"></a>CSet（Collection Set）</h3><p>一组可以被回收的集合，在CSet中存活的数据会在GC的过程中被移动到另一个可用分区，CSet中的分区可以来自Eden、Survivor、Old区，CSet会占用不到整个堆空间1%的大小。简单来说，G1中需要被回收的Card的集合。</p><h3 id="RSet（Remembered-Set）"><a href="#RSet（Remembered-Set）" class="headerlink" title="RSet（Remembered Set）"></a>RSet（Remembered Set）</h3><p>记录了其它 Region 中的对象到本 Region 的引用</p><p>使得垃圾回收器不需要扫描整个堆栈来找到谁引用了当前分区中的对象，只需要扫描 RSet 即可</p><p>由于RSet的存在，那么每次给对象赋值引用的时候，就得做一些额外的操作：在RSet中做一些额外的记录，在GC中被称为写屏障（这个写屏障 不等于内存屏障）</p><h2 id="定位垃圾"><a href="#定位垃圾" class="headerlink" title="定位垃圾"></a>定位垃圾</h2><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h3><p>没有被引用的内存空间就是垃圾，需要被收集</p><p>缺点：计数器本身有消耗，较难处理循环引用</p><h3 id="根可达性分析算法"><a href="#根可达性分析算法" class="headerlink" title="根可达性分析算法"></a>根可达性分析算法</h3><p>通过一系列的名为”GC Root”的对象作为起点，从这些节点向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Root没有任何引用链相连时，则该对象不可达，该对象是不可使用的，垃圾收集器将回收其所占的内存。</p><p>Java 可以做GC Root的对象：局部变量表、静态变量引用的对象、常量池引用的对象、Native方法引用的对象。</p><h2 id="GC-算法"><a href="#GC-算法" class="headerlink" title="GC 算法"></a>GC 算法</h2><h3 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h3><blockquote><p>没有碎片，浪费空间</p></blockquote><p>YGC用的是复制算法，复制算法的基本思想是将内存分为两块，每次只用其中一块，当一块内存用完，就将还活着的对象复制到另一块上面，复制算法不会产生内存碎片。</p><p>原理：从根集合（GC Root）开始，通过Tracing从From中找到存活对象，拷贝到To中。From和To交换身份，下次内存分配从To开始</p><p>缺点：浪费了一半内存</p><h3 id="标记清除（Mark-Sweep）"><a href="#标记清除（Mark-Sweep）" class="headerlink" title="标记清除（Mark-Sweep）"></a>标记清除（Mark-Sweep）</h3><blockquote><p>位置不连续，产生碎片，效率偏低（两遍扫描）</p></blockquote><p>老年代一般由标记清除和标记整理混合实现</p><p>原理：算法分成标记和清除两个阶段。在标记阶段，collector从根对象开始进行遍历，对从根对象可以访问到的对象都打上一个标识，将其记录为可达对象。在清除阶段，collector对堆内存从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象，则就将其回收。</p><p>解释：程序运行期间，可用内存将被耗尽的时候,GC线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象。</p><p>缺点：两次扫描，耗时严重，会产生内存碎片（清理出来的内存是不连续的）</p><h3 id="标记清除压缩（Mark-Compact）"><a href="#标记清除压缩（Mark-Compact）" class="headerlink" title="标记清除压缩（Mark-Compact）"></a>标记清除压缩（Mark-Compact）</h3><blockquote><p>没有碎片，效率偏低（两遍扫描，指针需要调整）</p></blockquote><p>第一步：标记清除<br><img src="https://img-blog.csdnimg.cn/20200117210457686.png" alt="在这里插入图片描述"><br>第二步：压缩，再次扫描，并往一端滑动存活对象<br><img src="https://img-blog.csdnimg.cn/20200117210521309.png" alt="在这里插入图片描述"></p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><img src="https://img-blog.csdnimg.cn/2021011714275194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="分代模型"><a href="#分代模型" class="headerlink" title="分代模型"></a>分代模型</h3><blockquote><p>将内存分为年轻代和老年代</p></blockquote><ul><li><p>Serial + Serial Old：串行回收，单线程，会暂停所有用户线程</p></li><li><p>Parallel Scavenge + Parallel Old（1.8默认使用）：并行回收，多线程，会暂停所有的用户线程</p></li><li><p>ParNew + CMS：并发标记清除：用户线程和垃圾收集线程同时执行（并行或交替）</p><ul><li><p>CMS是老年代的垃圾回收器</p></li><li><p>CMS四个阶段</p><ol><li>初始标记（STW）：标记根对象（GC Root）</li><li>并发标记</li><li>重新标记（STW）：标记在并发标记时产生的新垃圾</li><li>并发清理：清理过程中会产生新垃圾，称为浮动垃圾，只能等待下一次CMS将其清理</li></ol></li><li><p>CMS的问题：① 会产生碎片 ② 有浮动垃圾，当老年代碎片过多，换Serial Old上场</p></li><li><p>CMS问题解决方案之一：降低触发CMS的阈值，如果频繁发生SerialOld卡顿，应该调小阈值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CMSInitiatingOccupancyFraction 70% <span class="comment"># 内存空间降低到70%再进行回收，默认是68%</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="分区模型"><a href="#分区模型" class="headerlink" title="分区模型"></a>分区模型</h3><blockquote><p>将内存分为一个一个的小区域</p></blockquote><ul><li><p>G1：将堆内存分割成不同的区域并发的对其进行垃圾回收，只在逻辑上分年轻代老年代，物理不分代</p><p>G1可以在大多数情况下实现指定的GC暂停时间，同时还能保持较高的吞吐量。</p><p>G1可以动态地调整新老年代的比例，调整的依据是 YGC 的暂停时间。比如指定的暂停时间是20ms，此时10个 region 中有6个Y区，但回收时间是30ms，那么G1会将6个Y区减少至5个或4个Y区直到暂停时间小于20ms为止。</p><p>G1在对象太多的时候也会产生Full GC，如果产生Full GC，我们应该做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 扩内存</span><br><span class="line">2. 提高 CPU 性能</span><br><span class="line">3. 降低 MixedGC 触发的阈值，让MixedGC提早发生（默认45%)</span><br><span class="line">MixedGC（类似CMS）：初始标记STW，并发标记，最终标记STW，筛选回收STW（并行）</span><br></pre></td></tr></table></figure></li><li><p>ZGC</p></li><li><p>Shenandoah</p></li></ul><h2 id="垃圾回收器算法"><a href="#垃圾回收器算法" class="headerlink" title="垃圾回收器算法"></a>垃圾回收器算法</h2><h3 id="各个垃圾回收器使用的算法"><a href="#各个垃圾回收器使用的算法" class="headerlink" title="各个垃圾回收器使用的算法"></a>各个垃圾回收器使用的算法</h3><p>CMS：三色标记 + Incremental Update</p><p>G1：三色标记 + SATB（Snapshot at the begining）</p><p>ZGC：Colored Pointers（颜色指针）</p><h3 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h3><p>三色标记把对象在逻辑上分成三种颜色，黑色对象不再被扫描，灰色对象会被再次扫描</p><ul><li>白：未被标记的对象</li><li>灰：自身被标记，成员变量未被标记</li><li>黑：自身和成员变量均已标记完成</li></ul><p><img src="https://img-blog.csdnimg.cn/20210214141554379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Incremental-Update"><a href="#Incremental-Update" class="headerlink" title="Incremental Update"></a>Incremental Update</h3><p>当一个白色对象被一个黑色对象引用，将黑色重启标记为灰色，让重新扫描。</p><p>但是CMS在使用Increment Update的时候有一个致命问题是 漏标问题。</p><p><strong>漏标问题</strong>：在并发标记的过程中，业务逻辑线程可能会把黑色的属性重新指向白色，如果不对黑色重新扫描，则会把白色对象当做没有新引用指向从而回收掉。</p><p><strong>举例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A有两个属性：1、2</span><br><span class="line">M1（垃圾回收线程）正在标记A，已经标完属性1，正在标记属性2</span><br><span class="line">M2（业务逻辑线程）把属性1指向白色对象D</span><br><span class="line">M3（垃圾回收线程）把A标位灰色</span><br><span class="line">M1（垃圾回收线程）认为所有属性标完，把A设为黑色，结果D被漏标</span><br></pre></td></tr></table></figure><p>所以CMS的标记阶段，必须从头扫描一遍。</p><h3 id="SATB-Snapshot-at-the-begining"><a href="#SATB-Snapshot-at-the-begining" class="headerlink" title="SATB (Snapshot at the begining)"></a>SATB (Snapshot at the begining)</h3><p>在起始的时候做一个快照，当灰色-&gt;白色引用消失时，要把这个引用推到GC的堆栈，下次扫描时拿到这个引用，由于有RSet的存在，不需要扫描整个堆区查找指向白色的引用，效率比较高。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li>强引用：OOM也不回收</li><li>软引用：内存不足时回收</li><li>弱引用：只要执行GC就被回收</li><li>虚引用：跟没引用一样，可以用来管理堆外内存（直接内存），当对象被回收时，通过Queue可以检测到，然后清理堆外内存。堆外内存如何回收 – Unsafe.freeMemory(address)</li></ul><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h3 id="GC-常用参数"><a href="#GC-常用参数" class="headerlink" title="GC 常用参数"></a>GC 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">年轻代 最小堆 最大堆 栈空间</span></span><br><span class="line">-Xmn -Xms -Xmx -Xss</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用TLAB，默认打开</span></span><br><span class="line">-XX:+UseTLAB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印TLAB的使用情况</span></span><br><span class="line">-XX:+PrintTLAB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置TLAB大小</span></span><br><span class="line">-XX:TLABSize</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用 System.gc()，System.gc()是Full GC</span></span><br><span class="line">-XX:+DisableExplictGC</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印GC</span></span><br><span class="line">-XX:+PrintGC</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line">-XX:+PrintHeapAtGC</span><br><span class="line">-XX:+PrintGCTimeStamps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印应用程序时间</span></span><br><span class="line">-XX:+PrintGCApplicationConcurrentTime</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印暂停时长</span></span><br><span class="line">-XX:+PrintGCApplicationStoppedTime</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记录回收了多少种不同引用类型的引用</span></span><br><span class="line">-XX:+PrintReferenceGC</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可在程序运行时，打印虚拟机接受到的命令行显示参数</span></span><br><span class="line">-XX:+PrintVMOptions</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GC的升代年龄</span></span><br><span class="line">-XX:MaxTenuringThreshold</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">锁自旋次数</span></span><br><span class="line">-XX:PreBlockSpin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">热点代码检测参数，执行多少次会变成热点代码进行本地化的编译</span></span><br><span class="line">-XX:ComplieThreshold</span><br></pre></td></tr></table></figure><h3 id="Parallel-常用参数"><a href="#Parallel-常用参数" class="headerlink" title="Parallel 常用参数"></a>Parallel 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Survivor的比例</span></span><br><span class="line">-XX:SurvivorRatio</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多大的大对象会被直接分配到Old区</span></span><br><span class="line">-XX:PreTenureSizeThreshold</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并行收集器的线程数，同样适用于CMS，一般设为和CPU核数相同</span></span><br><span class="line">-XX:+ParallelGCThreads</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动选择各区大小比例</span></span><br><span class="line">-XX:+UseAdaptiveSizePolicy</span><br></pre></td></tr></table></figure><h3 id="CMS-常用参数"><a href="#CMS-常用参数" class="headerlink" title="CMS 常用参数"></a>CMS 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用CMS</span></span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMS线程数量</span></span><br><span class="line">-XX:ParallelCMSThreads</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用多少比例的老年代后开始CMS收集，默认是68%</span></span><br><span class="line">-XX:CMSInitiatingOccupancyFraction</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在FGC时进行压缩(标记整理)</span></span><br><span class="line">-XX:+UseCMSCompactAtFullCollection</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">多少次FGC后进行压缩</span></span><br><span class="line">-XX:CMSFullGCsBeforeCompaction</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停顿时间</span></span><br><span class="line">-XX:MaxGCPauseMillis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回收永久代</span></span><br><span class="line">-XX:+CMSClassUnloadingEnabled</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">达到什么比例时进行Perm回收</span></span><br><span class="line">-XX:CMSInitiatingPermOccupancyFraction</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置GC时间占用程序运行时间的百分比</span></span><br><span class="line">GCTimeRatio</span><br></pre></td></tr></table></figure><h3 id="G1-常用参数"><a href="#G1-常用参数" class="headerlink" title="G1 常用参数"></a>G1 常用参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用G1</span></span><br><span class="line">-XX:+UseG1GC</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议最大停顿时间，GC会尝试调整Young区的块数来达到这个值</span></span><br><span class="line">-XX:MaxGCPauseMillis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分区大小，建议逐渐增大该值，1 2 4 8 16 32</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">随着size增加，垃圾存活的时间更长，GC间隔更长，但每次GC的时间也会更长</span></span><br><span class="line">-XX:+G1HeapRegionSize</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新生代最小比例，默认5%</span></span><br><span class="line">G1NewSizePercent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新生代最大比例，默认60%</span></span><br><span class="line">G1MaxNewSizePercent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GC时间建议比例，G1会根据这个值调整空间</span></span><br><span class="line">GCTimeRatio</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">线程数量</span></span><br><span class="line">ConcGCThreads</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动G1的堆空间占用比例</span></span><br><span class="line">InitiatingHeapOccupancyPercent</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Zuul</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Zuul/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Zuul/</url>
      
        <content type="html"><![CDATA[<h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h2><p>基于 Servlet</p><h3 id="Zuul-概述"><a href="#Zuul-概述" class="headerlink" title="Zuul 概述"></a>Zuul 概述</h3><p>Zuul是Netflix开源的微服务网关，核心是一系列过滤器。这些过滤器可以完成以下功能。</p><ol><li>是所有微服务入口，进行分发。</li><li>身份认证与安全：识别合法的请求，拦截不合法的请求。</li><li>监控：在入口处监控，更全面。</li><li>动态路由：动态将请求分发到不同的后端集群。</li><li>压力测试：可以逐渐增加对后端服务的流量，进行测试。</li><li>负载均衡</li><li>限流：比如我每秒只要1000次，1001次就不让访问了。 </li><li>服务熔断</li></ol><p>zuul是跑在Tomcat上的，性能较低，可以使用读写分离，写请求通过zuul来实现</p><h3 id="Zuul-配置"><a href="#Zuul-配置" class="headerlink" title="Zuul 配置"></a>Zuul 配置</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># 需要和其他服务注册到同一个注册中心</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:5000/eureka</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">sardine-user:</span> <span class="string">/user/**</span></span><br><span class="line">    <span class="attr">sardine-cookbook:</span> <span class="string">/cookbook/**</span></span><br><span class="line">    <span class="attr">sardine-file:</span> <span class="string">/file/**</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span></span><br><span class="line">  <span class="attr">add-host-header:</span> <span class="literal">true</span> <span class="comment"># 携带域名信息</span></span><br><span class="line">  <span class="attr">sensitive-headers:</span>    <span class="comment"># 忽略头信息</span></span><br></pre></td></tr></table></figure><p>启动类增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulApplication</span> &#123;</span><br></pre></td></tr></table></figure><h3 id="Zuul-过滤器"><a href="#Zuul-过滤器" class="headerlink" title="Zuul 过滤器"></a>Zuul 过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">ZuulFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的类型: pre route post error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">filterType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterConstants.PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的执行顺序: 返回值越小，优先级越高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">filterOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否执行run方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">shouldFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="comment">// 如果执行了context.setSendZuulResponse(false)方法，就不执行过滤器</span></span><br><span class="line">        <span class="comment">// 相当于不执行后面的过滤器了</span></span><br><span class="line">        <span class="keyword">if</span> (context != <span class="literal">null</span> &amp;&amp; !context.sendZuulResponse())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤器的业务逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> context.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(authProperties.getTokenName());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token))</span><br><span class="line">            <span class="keyword">return</span> noAuthorization(context);</span><br><span class="line">        <span class="type">UserDto</span> <span class="variable">user</span> <span class="operator">=</span> userClient.identify(token).getRecord();</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> noAuthorization(context);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截此次请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">noAuthorization</span><span class="params">(RequestContext context)</span>&#123;</span><br><span class="line">        context.setSendZuulResponse(<span class="literal">false</span>);</span><br><span class="line">        context.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">        context.setResponseBody(<span class="string">&quot;No Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Hystrix</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Hystrix/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Hystrix/</url>
      
        <content type="html"><![CDATA[<h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><blockquote><p>容错组件 实现了超时机制和断路器模式</p></blockquote><h3 id="1-主要功能"><a href="#1-主要功能" class="headerlink" title="1. 主要功能"></a>1. 主要功能</h3><ol><li>为系统提供保护机制。在依赖的服务出现高延迟或失败时，为系统提供保护和控制。</li><li>防止雪崩。</li><li>包裹请求：使用HystrixCommand（或HystrixObservableCommand）包裹对依赖的调用逻辑，每个命令在独立线程中运行。</li><li>跳闸机制：当某服务失败率达到一定的阈值时，Hystrix可以自动跳闸，停止请求该服务一段时间。</li><li>资源隔离：Hystrix为每个请求都的依赖都维护了一个小型线程池，如果该线程池已满，发往该依赖的请求就被立即拒绝，而不是排队等候，从而加速失败判定。防止级联失败。</li><li>快速失败：Fail Fast。同时能快速恢复。侧重点是：（不去真正的请求服务，发生异常再返回），而是直接失败。</li><li>监控：Hystrix可以实时监控运行指标和配置的变化，提供近实时的监控、报警、运维控制。</li><li>回退机制：fallback，当请求失败、超时、被拒绝，或当断路器被打开时，执行回退逻辑。回退逻辑我们自定义，提供优雅的服务降级。</li><li>自我修复：断路器打开一段时间后，会自动进入“半开”状态，可以进行打开，关闭，半开状态的转换。前面有介绍。</li></ol><h3 id="2-独立使用"><a href="#2-独立使用" class="headerlink" title="2. 独立使用"></a>2. 独立使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixTestService</span> <span class="keyword">extends</span> <span class="title class_">HystrixCommand</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HystrixTestService</span><span class="params">(HystrixCommandGroupKey group)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(group);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行逻辑&quot;</span>);</span><br><span class="line">        <span class="comment">// 当执行 1/0 后抛出异常会执行 Fallback 逻辑，否则执行正常逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">getFallback</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Fallback Function&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Future&lt;String&gt; futureResult = <span class="keyword">new</span> <span class="title class_">HystrixTestService</span>(HystrixCommandGroupKey.Factory.asKey(<span class="string">&quot;ext&quot;</span>)).queue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureResult.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;程序结果：&quot;</span>+result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-整合-RestTemplate"><a href="#3-整合-RestTemplate" class="headerlink" title="3. 整合 RestTemplate"></a>3. 整合 RestTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类增加注解 @EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(UserApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alive</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 自动处理URL</span></span><br><span class="line"><span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span><span class="string">&quot;http://user-provider/User/alive&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(url, String.class);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallback</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Fallback Function&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-整合-Fegin"><a href="#4-整合-Fegin" class="headerlink" title="4. 整合 Fegin"></a>4. 整合 Fegin</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置开启 Hystrix</span></span><br><span class="line"><span class="attr">feign.hystrix.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(name = &quot;user-provider&quot;,fallback = AliveBack.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConsumerApi</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/user/alive&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alive</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/user/getById&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliveBack</span> <span class="keyword">implements</span> <span class="title class_">ConsumerApi</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">alive</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;call exception&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-Hystrix-Dashboard"><a href="#5-Hystrix-Dashboard" class="headerlink" title="5. Hystrix Dashboard"></a>5. Hystrix Dashboard</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Actuator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Hystrix Dashboard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动类增加注解</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加配置</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="attr">hystrix.dashboard.proxy-stream-allow-list</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8001/actuator/hystrix.stream">http://localhost:8001/actuator/hystrix.stream</a> 查看请求信息</p><p>访问 <a href="http://localhost:8001/hystrix">http://localhost:8001/hystrix</a> 输入上面的url可以可视化地观察请求信息</p><h3 id="6-隔离策略"><a href="#6-隔离策略" class="headerlink" title="6. 隔离策略"></a>6. 隔离策略</h3><p>隔离策略：信号量、线程池，默认使用线程池</p><p><strong>线程池隔离</strong></p><p>概念：有1000个商品服务信息的并发请求，但是商品服务线程池中只有10个线程，那么最多只会用这10个线程去处理，不会将Tomcat中的所有线程都耗尽。</p><p>适用场景：耗时长的请求</p><p><strong>信号量隔离</strong></p><p>概念：每次请求通过计数信号进行限制，当信号大于请求数时，调用Fallback接口快速返回。获取到信号的线程继续访问，访问完成后归还信号，信号获取失败直接Fallback。</p><p>适用场景：耗时短的请求</p><table><thead><tr><th align="left">隔离方式</th><th align="left">是否支持超时</th><th align="left">是否支持熔断</th><th align="left">隔离原理</th><th align="left">是否是异步调用</th><th align="left">资源消耗</th></tr></thead><tbody><tr><td align="left">线程池隔离</td><td align="left">支持,可直接返回</td><td align="left">支持,当线程池到达maxSize后,再请求会触发fallback接口进行熔断</td><td align="left">每个服务单独用线程池</td><td align="left">可以是异步,也可以是同步。看调用的方法</td><td align="left">大,大量线程的上下文切换，容易造成机器负载高</td></tr><tr><td align="left">信号量隔离</td><td align="left">不支持,如果阻塞，只能通过调用协议（如:socket超时才能返回）</td><td align="left">支持，当信号量达到maxConcurrentRequests后。再请求会触发fallback</td><td align="left">通过信号量的计数器</td><td align="left">同步调用,不支持异步</td><td align="left">小,只是个计数器</td></tr></tbody></table><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改隔离策略为信号量</span></span><br><span class="line"><span class="attr">hystrix.command.default.execution.isolation.strategy</span>=<span class="string">SEMAPHORE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud OpenFeign</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20Cloud%20OpenFeign/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20Cloud%20OpenFeign/</url>
      
        <content type="html"><![CDATA[<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><blockquote><p>声明式、模板化的HTTP请求客户端</p></blockquote><p>主要构建微服务消费端。只要使用OpenFeign提供的注解修饰定义网络请求的接口类，就可以使用该接口的实例发送 Restful 的网络请求。还可以集成Ribbon和Hystrix，提供负载均衡和断路器。</p><p><strong>实现</strong></p><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务端暴露接口到 <code>sardine-user-api</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;sardine-user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;identify&quot;)</span></span><br><span class="line">    CommonResult&lt;UserDto&gt; <span class="title function_">identify</span><span class="params">(<span class="meta">@RequestParam</span> String token)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;identify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;UserDto&gt; <span class="title function_">identify</span><span class="params">(<span class="meta">@RequestParam(value = &quot;token&quot;, required = false)</span> String token)</span> &#123;</span><br><span class="line">    <span class="type">UserDto</span> <span class="variable">userInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端引入 api 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- user api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sardine<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sardine-user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p>客户端使用 UserClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;call&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;UserDto&gt; <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userClient.identify(token).getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring RestTemplate</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20RestTemplate/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20RestTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><blockquote><p>springframework:spring-web 包下</p></blockquote><p>使用 RestTemplate 需要将其加入到容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">restTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-直接调用"><a href="#1-直接调用" class="headerlink" title="1. 直接调用"></a>1. 直接调用</h3><p>实体类</p><p>服务端和客户端的实体类可以不是同一个，如果客户端实体类使用@Builder接收会失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cookbook</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8001/provider/hello?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        ResponseEntity&lt;String&gt; helloResponse = restTemplate.getForEntity(url, String.class, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello: &quot;</span> + helloResponse.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url2</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8001/provider/cookbook?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        ResponseEntity&lt;Cookbook&gt; cookBookResponse = restTemplate.getForEntity(url2, Cookbook.class, name);</span><br><span class="line">        System.out.println(<span class="string">&quot;CookBook: &quot;</span> + cookBookResponse.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url3</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8001/provider/list/cookbook&quot;</span>;</span><br><span class="line">        List&lt;Cookbook&gt; list = restTemplate.getForObject(url3, List.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;CookBook List: &quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url4</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8001/provider/cookbook&quot;</span>;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        ResponseEntity&lt;Cookbook&gt; postCookbook = restTemplate.postForEntity(url4, student, Cookbook.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;Post CookBook: &quot;</span> + postCookbook.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;cookbook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cookbook <span class="title function_">cookbook</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cookbook.builder().id(<span class="number">1L</span>).bookName(name).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list/cookbook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Cookbook&gt; <span class="title function_">listCookbook</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Cookbook&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(Cookbook.builder().id(<span class="number">1L</span>).bookName(<span class="string">&quot;盐酥鸡&quot;</span>).build());</span><br><span class="line">        list.add(Cookbook.builder().id(<span class="number">2L</span>).bookName(<span class="string">&quot;酱鸭&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;cookbook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Cookbook <span class="title function_">postCookbook</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Cookbook.builder().bookName(student.getName()).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注册到同一个-eureka"><a href="#2-注册到同一个-eureka" class="headerlink" title="2. 注册到同一个 eureka"></a>2. 注册到同一个 eureka</h3><p>消费端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;consumer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">//拿到服务提供商</span></span><br><span class="line">        List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">&quot;sardine-cookbook&quot;</span>);</span><br><span class="line">        <span class="comment">//拿到第一个实例</span></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//得到主机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> instance.getHost();</span><br><span class="line">        <span class="comment">//得到端口号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> instance.getPort();</span><br><span class="line">        <span class="comment">//拼接完整的请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + host + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/test/hello?name=&#123;1&#125;&quot;</span>;</span><br><span class="line">        <span class="comment">//restTemple 实际返回的是一个ResponseEntity 的实例</span></span><br><span class="line">        ResponseEntity&lt;String&gt; responseEntity = restTemplate.getForEntity(url, String.class, name);</span><br><span class="line">        System.out.println(responseEntity.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;provider&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-客户端拦截器"><a href="#3-客户端拦截器" class="headerlink" title="3. 客户端拦截器"></a>3. 客户端拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingClientHttpRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ClientHttpRequestInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(HttpRequest request, <span class="type">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了拦截器&quot;</span>);</span><br><span class="line">        System.out.println(request.getURI());</span><br><span class="line">        <span class="type">ClientHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> execution.execute(request, body);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 restTemplate 配置中增加拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        restTemplate.getInterceptors().add(<span class="keyword">new</span> <span class="title class_">LoggingClientHttpRequestInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><blockquote><p>客户端的负载均衡</p></blockquote><p>Ribbon是Netflix开发的客户端负载均衡器，为Ribbon配置<strong>服务提供者地址列表</strong>后，Ribbon就可以基于某种<strong>负载均衡策略算法</strong>，自动地帮助服务消费者去请求提供者。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。我们也可以实现自定义负载均衡算法。</p><h3 id="1-负载均衡算法"><a href="#1-负载均衡算法" class="headerlink" title="1. 负载均衡算法"></a>1. 负载均衡算法</h3><ul><li><p><strong>ZoneAvoidanceRule（默认）：区域权衡策略</strong></p><p>复合判断Server所在区域的性能和Server的可用性，轮询选择服务器。</p></li><li><p><strong>BestAvailableRule：最低并发策略</strong></p><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务。逐个找服务，如果断路器打开，则忽略。</p></li><li><p><strong>RoundRobinRule：轮询策略</strong></p><p>以简单轮询选择一个服务器，按顺序循环选择一个server。</p></li><li><p><strong>RandomRule：随机策略</strong></p><p>随机选择一个服务器。</p></li><li><p><strong>AvailabilityFilteringRule：可用过滤策略</strong></p><p>会先过滤掉多次访问故障而处于断路器跳闸状态的服务和过滤并发的连接数量超过阀值得服务，然后对剩余的服务列表安装轮询策略进行访问</p></li><li><p><strong>WeightedResponseTimeRule：响应时间加权策略</strong></p><p>据平均响应时间计算所有的服务的权重，响应时间越快服务权重越大，容易被选中的概率就越高。刚启动时，如果统计信息不中，则使用RoundRobinRule(轮询)策略，等统计的信息足够了会自动的切换到WeightedResponseTimeRule。响应时间长，权重低，被选择的概率低。反之，同样道理。此策略综合了各种因素（网络，磁盘，IO等），这些因素直接影响响应时间。</p></li><li><p><strong>RetryRule：重试策略</strong></p><p>先按照RoundRobinRule(轮询)的策略获取服务，如果获取的服务失败则在指定的时间会进行重试，进行获取可用的服务。如多次获取某个服务失败，就不会再次获取该服务。主要是在一个时间段内，如果选择一个服务不成功，就继续找可用的服务，直到超时。</p></li></ul><p>开启负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line">RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//return new RoundRobinRule();</span></span><br><span class="line">    <span class="comment">//return new RandomRule();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RetryRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费端：注意要使用应用名替代域名，且要在同一个注册中心，否则会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;balance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">balance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://sardine-cookbook/provider/balance&quot;</span>;</span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.getForEntity(url, String.class);</span><br><span class="line">    System.out.println(response.getBody());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;balance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">balance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求连接的超时时间</span></span><br><span class="line"><span class="attr">ribbon.ConnectTimeout</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"># 请求处理的超时时间</span></span><br><span class="line"><span class="attr">ribbon.ReadTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 也可以为每个Ribbon客户端设置不同的超时时间, 通过服务名称进行指定：</span></span><br><span class="line"><span class="attr">ribbon-config-demo.ribbon.ConnectTimeout</span>=<span class="string">2000</span></span><br><span class="line"><span class="attr">ribbon-config-demo.ribbon.ReadTimeout</span>=<span class="string">5000</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">ribbon.MaxTotalConnections</span>=<span class="string">500</span></span><br><span class="line"><span class="comment"># 每个host最大连接数</span></span><br><span class="line"><span class="attr">ribbon.MaxConnectionsPerHost</span>=<span class="string">500</span></span><br></pre></td></tr></table></figure><p><strong>ribbon脱离eureka配置</strong></p><p>可以在配置文件中使用listOfServers字段来设置服务端地址，只要客户端拥有服务器列表，就可以使用ribbon做负载均衡。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon.eureka.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">ribbon.listOfServers</span>=<span class="string">localhost:8001,localhost:8002</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Nacos</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Nacos/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="Nacos-概念"><a href="#Nacos-概念" class="headerlink" title="Nacos 概念"></a>Nacos 概念</h3><p>命名空间（Namespace）：代表不同环境，如开发、测试、生产环境</p><p>配置分组（Group）：代表某项目</p><p>配置集（Data ID）：每个项目下有若干个工程，每个配置集就是一个工程的主配置文件</p><h3 id="Nacos-单机部署"><a href="#Nacos-单机部署" class="headerlink" title="Nacos 单机部署"></a>Nacos 单机部署</h3><p>从官网下载 Last Release 版本</p><p><a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><p>在bin文件夹下以standalone模式启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line">startup.cmd -m standalone</span><br><span class="line"><span class="comment"># linux</span></span><br><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>进入控制台，账密：nacos</p><p><a href="http://localhost:8848/nacos/index.html">http://localhost:8848/nacos/index.html</a></p><h3 id="Nacos-集群部署"><a href="#Nacos-集群部署" class="headerlink" title="Nacos 集群部署"></a>Nacos 集群部署</h3><h4 id="Nacos-数据库配置"><a href="#Nacos-数据库配置" class="headerlink" title="Nacos 数据库配置"></a>Nacos 数据库配置</h4><p>在自己的数据库中新建数据库，名为 <code>nacos_config</code></p><p>进入目录 <code>nacos/conf</code> </p><p>找到文件 <code>nacos.mysql.sql</code> ，复制其内容建表</p><p>找到文件 <code>application.properties</code> ， 修改其内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos_config?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">nacos</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure><h4 id="Nacos-集群配置"><a href="#Nacos-集群配置" class="headerlink" title="Nacos 集群配置"></a>Nacos 集群配置</h4><p>复制 <code>nacos/conf</code> 下的 <code>cluster.conf.example</code> 为 <code>cluster.conf</code></p><p>配置集群信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">172.23.184.234:8848</span><br><span class="line">172.23.184.238:8848</span><br></pre></td></tr></table></figure><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4><blockquote><p>upstream 名称不能用下划线，nginx无法识别 </p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http <span class="punctuation">&#123;</span>    </span><br><span class="line">    upstream nacosCluster <span class="punctuation">&#123;</span></span><br><span class="line">        server <span class="number">172.23</span><span class="number">.184</span><span class="number">.238</span><span class="punctuation">:</span><span class="number">8848</span>;</span><br><span class="line">        server <span class="number">172.23</span><span class="number">.184</span><span class="number">.234</span><span class="punctuation">:</span><span class="number">8848</span>;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">        listen      <span class="number">80</span>;</span><br><span class="line">        server_name nacos.demo.com;</span><br><span class="line"></span><br><span class="line">        location /nacos <span class="punctuation">&#123;</span></span><br><span class="line">            proxy_pass  http<span class="punctuation">:</span><span class="comment">//nacosCluster;</span></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">                return <span class="number">204</span>;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Nacos-解决配置文件丢失问题"><a href="#Nacos-解决配置文件丢失问题" class="headerlink" title="Nacos 解决配置文件丢失问题"></a>Nacos 解决配置文件丢失问题</h3><p>当 nacos 配置数据库，集群启动后发现原来在单机上的配置文件丢失了</p><p>解决方式：停止nacos服务，将原来那台nacos单机启动即可获取数据</p><h3 id="Nacos-配置中心"><a href="#Nacos-配置中心" class="headerlink" title="Nacos 配置中心"></a>Nacos 配置中心</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 bootstrap.yml</p><ol><li>仅有一个主配置文件，在Nacos服务端配置文件名为 {spring.application.name}.{file-extension}</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-demo</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">2cd03b3d-4c75-4ceb-ac89-2673fc2032d9</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br></pre></td></tr></table></figure><ol start="2"><li>有多个配置文件，除了上述的主配置文件外还可以指定额外配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-demo</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">2cd03b3d-4c75-4ceb-ac89-2673fc2032d9</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">extension-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">nacos-example1.yml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">data-id:</span> <span class="string">nacos-example2.yml</span></span><br><span class="line">            <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">            <span class="attr">refresh:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Nacos 服务端配置</p><p><img src="https://img-blog.csdnimg.cn/20210404190900874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>nacos-demo.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8001</span></span><br></pre></td></tr></table></figure><ol start="2"><li>nacos-example1.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">common:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure><ol start="3"><li>nacos-example1.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">common:</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;config&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;common.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;common.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;,&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nacos-服务发现-OpenFeign"><a href="#Nacos-服务发现-OpenFeign" class="headerlink" title="Nacos 服务发现 (OpenFeign)"></a>Nacos 服务发现 (OpenFeign)</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">http://127.0.0.1:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">2dd4a07a-9860-4ba0-ae1b-7c9dda2cdc25</span></span><br></pre></td></tr></table></figure><p>在启动类上增加注解 <code>@EnableFeignClients</code></p><p>创建客户端调用类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;nft-card&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFeignClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    String <span class="title function_">check</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nacos-服务发现-Dubbo"><a href="#Nacos-服务发现-Dubbo" class="headerlink" title="Nacos 服务发现 (Dubbo)"></a>Nacos 服务发现 (Dubbo)</h3><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-registry-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生产者配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-nacos-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20881</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>消费者配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-nacos-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">20882</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>生产者启动类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br></pre></td></tr></table></figure><p>消费者加入生产者依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者调用生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> ProviderService providerService;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logback日志日期输出有误</title>
      <link href="/swan-blog/2022/10/12/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Logback%E6%97%A5%E5%BF%97%E6%97%A5%E6%9C%9F%E8%BE%93%E5%87%BA%E6%9C%89%E8%AF%AF/"/>
      <url>/swan-blog/2022/10/12/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Logback%E6%97%A5%E5%BF%97%E6%97%A5%E6%9C%9F%E8%BE%93%E5%87%BA%E6%9C%89%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>不定时出现（很难复现）今天的日志输出到了昨天的日志文件中，比如 今天是 2018-11-27 日，默认的日志输出文件是 default.log， 会出现日志打印到了 default.log.2018-11-26 然而 default.log 却只有当天进行 diamond 推送的日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由于应用和diamond进行了对接并和spring进行了集成，所以会一个异步监听diamond推送并对应用中</span><br><span class="line">使用@Value注解的地方进行动态修改， 每次推送事件发生时都会打印日志</span><br></pre></td></tr></table></figure><ul><li>@Slf4j 编译后的代码</li></ul><p>Logger log &#x3D; org.slf4j.LoggerFactory.getLogger(Foo.class);</p><h2 id="slf4j-和-logback-的绑定和初始化"><a href="#slf4j-和-logback-的绑定和初始化" class="headerlink" title="slf4j 和 logback 的绑定和初始化"></a>slf4j 和 logback 的绑定和初始化</h2><ul><li><p>slf4j 约定了绑定规范，需要在 org.slf4j.impl 包下有一个 StaticLoggerBinder implements LoggerFactoryBinder 的类，这个可以是任何日志框架的类，当然我们也可以自己搞一个</p><ul><li>LoggerFactoryBinder 的接口定义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoggerFactoryBinder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the instance of &#123;<span class="doctag">@link</span> ILoggerFactory&#125; that </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.slf4j.LoggerFactory&#125; class should bind to.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the instance of &#123;<span class="doctag">@link</span> ILoggerFactory&#125; that </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.slf4j.LoggerFactory&#125; class should bind to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ILoggerFactory <span class="title function_">getLoggerFactory</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The String form of the &#123;<span class="doctag">@link</span> ILoggerFactory&#125; object that this </span></span><br><span class="line"><span class="comment"> * &lt;code&gt;LoggerFactoryBinder&lt;/code&gt; instance is &lt;em&gt;intended&lt;/em&gt; to return. </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method allows the developer to interrogate this binder&#x27;s intention</span></span><br><span class="line"><span class="comment"> * which may be different from the &#123;<span class="doctag">@link</span> ILoggerFactory&#125; instance it is able to </span></span><br><span class="line"><span class="comment"> * yield in practice. The discrepancy should only occur in case of errors.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the class name of the intended &#123;<span class="doctag">@link</span> ILoggerFactory&#125; instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLoggerFactoryClassStr</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li></ul><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​```</span><br></pre></td></tr></table></figure><ul><li><p>当调用 org.slf4j.LoggerFactory.getLogger (Foo.class); 时，会通过 StaticLoggerBinder 的 getLoggerFactory 方法获取日志框架的 ILoggerFactory 实现，进而获取日志输出对象</p><ul><li>StaticLoggerBinder 在类加载的时候会进行日志初始化，包括加载日志配置比如默认的 lomback.xml</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticLoggerBinder</span> <span class="keyword">implements</span> <span class="title class_">LoggerFactoryBinder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Declare the version of the SLF4J API this implementation is compiled</span></span><br><span class="line"><span class="comment"> * against. The value of this field is usually modified with each release.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// to avoid constant folding by the compiler, this field must *not* be final</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REQUESTED_API_VERSION</span> <span class="operator">=</span> <span class="string">&quot;1.7.16&quot;</span>; <span class="comment">// !final</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">NULL_CS_URL</span> <span class="operator">=</span> CoreConstants.CODES_URL + <span class="string">&quot;#null_CS&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The unique instance of this class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这里是单例模式这个是slf4j的约定要求单例模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StaticLoggerBinder</span> <span class="variable">SINGLETON</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticLoggerBinder</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 这个地方进行初始化，类加载的时候就会触发</span></span><br><span class="line">    SINGLETON.init();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用通过 org.slf4j.LoggerFactory.getLogger (Foo.class); 获得了日志框架的 Logger 实现进行日志打印</p></li></ul><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><ol><li>断点 logback 初始化的地方，StaticLoggerBinder 静态语句块</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">  <span class="comment">// 这个地方进行初始化，类加载的时候就会触发</span></span><br><span class="line">      SINGLETON.init();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li><p>发现断点被执行了多次</p><ul><li>静态语句块只有类加载的时候仅且执行一次，这里被执行了多次，怀疑是被加载了多次</li><li>通过 IDEA 的 alt + F8，执行 this.getClass ().getClassLoader ().getClass ().getName () 发现每次都不一样</li><li>发现应用连接 diamond 的方法被执行了两次<ul><li>在 diamond 推送时，同样也会执行两次</li><li><strong>跟踪发现一个是 Pandora 调用的，一个是系统启动第一次调用的</strong></li><li>推送一次，因为有两个链接顾推送事件的日志会被打印两次，查看日志对象 Logger 发现一个是 springboot 加载的一个是 Pandora 加载的</li></ul></li><li>在应用启动完毕之后，发现 Pandora 加载的 bean 是用的 com.taobao.pandora.boot.loader.ReLaunchURLClassLoader</li><li>springboot 加载用的是 org.springframework.boot.loader.LaunchedURLClassLoader</li></ul></li><li><p>此时已经确定系统有两套独立的日志输出入口，并打印到同一个日志文件</p></li></ol><h2 id="logback-源码跟踪"><a href="#logback-源码跟踪" class="headerlink" title="logback 源码跟踪"></a>logback 源码跟踪</h2><p>   <strong>应用 appender 配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;defaultAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/txp-default.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/default.log.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>源码追踪到日志跨天翻滚的地方</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RollingFileAppender</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">FileAppender</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">subAppend</span><span class="params">(E event)</span> &#123;</span><br><span class="line">        <span class="comment">// The roll-over check must precede actual writing. This is the</span></span><br><span class="line">        <span class="comment">// only correct behavior for time driven triggers.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We need to synchronize on triggeringPolicy so that only one rollover</span></span><br><span class="line">        <span class="comment">// occurs at a time</span></span><br><span class="line">        <span class="keyword">synchronized</span> (triggeringPolicy) &#123;</span><br><span class="line">        <span class="comment">// 这个地方判断是否满足日志翻滚条件</span></span><br><span class="line">        <span class="comment">// 我们的应用配置是按天输出日志，所以这里会进行跨天判断</span></span><br><span class="line">            <span class="keyword">if</span> (triggeringPolicy.isTriggeringEvent(currentlyActiveFile, event)) &#123;</span><br><span class="line">                rollover(); <span class="comment">// 这个地方进行日志翻转</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.subAppend(event);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>跨天判断的代码片</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoAutoStart</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultTimeBasedFileNamingAndTriggeringPolicy</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">TimeBasedFileNamingAndTriggeringPolicyBase</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTriggeringEvent</span><span class="params">(File activeFile, <span class="keyword">final</span> E event)</span> &#123;</span><br><span class="line">    <span class="comment">// 获得当前时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> getCurrentTime();</span><br><span class="line">        <span class="comment">// nextCheck因为我们的配置是按天那么nextCheck的值就是明天凌晨</span></span><br><span class="line">        <span class="keyword">if</span> (time &gt;= nextCheck) &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">dateOfElapsedPeriod</span> <span class="operator">=</span> dateInCurrentPeriod;</span><br><span class="line">            addInfo(<span class="string">&quot;Elapsed period: &quot;</span> + dateOfElapsedPeriod);</span><br><span class="line">            elapsedPeriodsFileName = tbrp.fileNamePatternWithoutCompSuffix.convert(dateOfElapsedPeriod);</span><br><span class="line">            setDateInCurrentPeriod(time);</span><br><span class="line">            computeNextCheck();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志翻转代码片段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RollingFileAppender</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">FileAppender</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollover</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Note: This method needs to be synchronized because it needs exclusive</span></span><br><span class="line">            <span class="comment">// access while it closes and then re-opens the target file.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// make sure to close the hereto active log file! Renaming under windows</span></span><br><span class="line">            <span class="comment">// does not work for open files.</span></span><br><span class="line">            <span class="comment">// 这里关闭当前文件输出流</span></span><br><span class="line">            <span class="built_in">this</span>.closeOutputStream();</span><br><span class="line">            <span class="comment">// 翻转日志文件，根据应用的配置进行反转，本应用其实就是把文件重命名</span></span><br><span class="line">            <span class="comment">// （用的类是TimeBasedRollingPolicy），比如重命名为default.log.2018-11-26</span></span><br><span class="line">            attemptRollover();</span><br><span class="line">            <span class="comment">// 这个地方打开新文件default.log进行日志输出</span></span><br><span class="line">            attemptOpenFile();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个是打开新日志文件的逻辑</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">attemptOpenFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// update the currentlyActiveFile LOGBACK-64</span></span><br><span class="line">            currentlyActiveFile = <span class="keyword">new</span> <span class="title class_">File</span>(rollingPolicy.getActiveFileName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// This will also close the file. This is OK since multiple close operations are safe.</span></span><br><span class="line">            <span class="built_in">this</span>.openFile(rollingPolicy.getActiveFileName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            addError(<span class="string">&quot;setFile(&quot;</span> + fileName + <span class="string">&quot;, false) call failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>对日志文件进行重命名的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeBasedRollingPolicy</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">RollingPolicyBase</span> <span class="keyword">implements</span> <span class="title class_">TriggeringPolicy</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollover</span><span class="params">()</span> <span class="keyword">throws</span> RolloverFailure &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when rollover is called the elapsed period&#x27;s file has</span></span><br><span class="line">        <span class="comment">// been already closed. This is a working assumption of this method.</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">elapsedPeriodsFileName</span> <span class="operator">=</span> timeBasedFileNamingAndTriggeringPolicy.getElapsedPeriodsFileName();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">elapsedPeriodStem</span> <span class="operator">=</span> FileFilterUtil.afterLastSlash(elapsedPeriodsFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (compressionMode == CompressionMode.NONE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getParentsRawFileProperty() != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 这个地方对文件进行了重命名</span></span><br><span class="line">   renameUtil.rename(getParentsRawFileProperty(), elapsedPeriodsFileName);</span><br><span class="line">            &#125; <span class="comment">// else &#123; nothing to do if CompressionMode == NONE and parentsRawFileProperty == null &#125;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getParentsRawFileProperty() == <span class="literal">null</span>) &#123;</span><br><span class="line">                compressionFuture = compressor.asyncCompress(elapsedPeriodsFileName, elapsedPeriodsFileName, elapsedPeriodStem);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                compressionFuture = renameRawAndAsyncCompress(elapsedPeriodsFileName, elapsedPeriodStem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (archiveRemover != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(timeBasedFileNamingAndTriggeringPolicy.getCurrentTime());</span><br><span class="line">            <span class="built_in">this</span>.cleanUpFuture = archiveRemover.cleanAsynchronously(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题逻辑梳理"><a href="#问题逻辑梳理" class="headerlink" title="问题逻辑梳理"></a>问题逻辑梳理</h2><ol><li><p>系统引入了 Pandora，导致 diamond 对接地方被执行两次，分别是 Pandora 加载和默认加载</p><p>其实类似 tomcat 一个 JVM 有多个 webapp，他们之间可能用了很多相同的类和框架等，但是又不能互相冲突，肯定需要一个 webapp 一个 classloader, 而一些容器公共的东西就用公共父亲 classloader 加载</p></li><li><p>系统出现两套 log， 这里叫 pandora 加载的为 log1， 默认的加 log2</p></li><li><p>跨天业务日志持续输出，log1 触发跨天事件，关闭 default.log 输出流，重命名 default.log 为 default.log.2018-11-26, 创建新文件 default.log</p></li><li><p>这个时候发生 diamond 推送，那么就会触发日志打印表示有推送，由于步骤 1， log1 和 log2 都会打印</p></li><li><p>log2 触发跨天事件，重命名步骤 3 产生的 default.log 为 default.log.2018-11-26，创建新文件 default.log</p></li><li><p>log1 持续输出日志到了 default.log.2018-11-26， log2 输出日志到 default.log</p></li></ol><p><img src="https://oscimg.oschina.net/oscnet/d4876e3c306c5a25a53baffa1a7faa7e397.jpg" alt="img"></p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><ol><li><p>自定义一个 classloader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.log.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyURLClassLoader</span> <span class="keyword">extends</span> <span class="title class_">URLClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyURLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(urls, parent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyURLClassLoader</span><span class="params">(URL[] urls)</span> &#123;<span class="built_in">super</span>(urls);&#125;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Class&lt;?&gt;&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写父类的类加载，实现自定义加载</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!name.startsWith(<span class="string">&quot;org.slf4j.&quot;</span>) &amp;&amp;</span><br><span class="line">            !name.startsWith(<span class="string">&quot;com.alibaba&quot;</span>) &amp;&amp;</span><br><span class="line">            !name.startsWith(<span class="string">&quot;ch.qos.logback.&quot;</span>) ) &#123;</span><br><span class="line">            <span class="comment">// 默认加载</span></span><br><span class="line">            c = findLoadedClass(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.contains(<span class="string">&quot;MyURLClassLoader&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 使用默认加载</span></span><br><span class="line">            c = findLoadedClass(name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hashMap.containsKey(name)) &#123;</span><br><span class="line">                <span class="comment">// 加载过直接返回避免重复加载</span></span><br><span class="line">                <span class="keyword">return</span> hashMap.get(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 自定义加载</span></span><br><span class="line">            c = findClass(name);</span><br><span class="line"></span><br><span class="line">            hashMap.put(name, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = findSystemClass(name);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日志输出类（此类有第一步的类加载加载）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.log.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteLog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log1</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(WriteLog.class);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">999999</span>; i++) &#123;</span><br><span class="line">                    log1.info(<span class="string">&quot;log1-&gt; &quot;</span> + log1.getClass().getClassLoader().getClass().getName() + <span class="string">&quot; &quot;</span> + i);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>程序入口类，此类也有一个日志打印 Log 不过是用默认类加载器加载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.log.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log2</span> <span class="operator">=</span> org.slf4j.LoggerFactory.getLogger(WriteLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        test();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入任意字符触发log2打印日志(记得修改系统时间跨天)&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        log2.info(<span class="string">&quot;log2-&gt; &quot;</span> + log2.getClass().getClassLoader().getClass().getName() + <span class="string">&quot; &quot;</span> + line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] paths = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;/Users/shushangjin/.m2/txp/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/Users/shushangjin/.m2/txp/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/Users/shushangjin/.m2/txp/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/Users/shushangjin/IdeaProjects/code1/testlog/target/classes/&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        URL[] urls = <span class="keyword">new</span> <span class="title class_">URL</span>[paths.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paths.length; i++) &#123;</span><br><span class="line">            urls[i] = <span class="keyword">new</span> <span class="title class_">File</span>(paths[i]).toURI().toURL();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyURLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyURLClassLoader</span> (urls);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName (<span class="string">&quot;com.alibaba.log.test.WriteLog&quot;</span>, <span class="literal">true</span>, loader);</span><br><span class="line">        System.out.println(cl.getClassLoader().getClass().getName());</span><br><span class="line">        cl.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>\4. 当程序跑起来之后，修改系统时间为明天，我这里修改为 2018-11-28 5. 在程序终端输入任意字符串 6. 见证奇迹的时刻</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1， 排除程序中有多个 load 的实例进行日志输出，当然也包括多进程 2， 从 logback 源码层面解决此问题，比如跨天判断的时候，触发了翻转，昨天的日志已经生成，那么不做任何动作</p>]]></content>
      
      
      <categories>
          
          <category> 线上问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 架构</title>
      <link href="/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Overview/"/>
      <url>/swan-blog/2022/10/12/Spring/Spring%20Cloud%20Overview/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/1f46711821cf4bab91e0ca934eaeaf25.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Logback</title>
      <link href="/swan-blog/2022/10/08/Spring/Spring%20Logback/"/>
      <url>/swan-blog/2022/10/08/Spring/Spring%20Logback/</url>
      
        <content type="html"><![CDATA[<h3 id="Logback-日志配置文件"><a href="#Logback-日志配置文件" class="headerlink" title="Logback 日志配置文件"></a>Logback 日志配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Colorful log class --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Project name --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PROJECT_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;swan-server&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Colorful log pattern --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; [%X&#123;trace_id&#125;] %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_LOG_PATTERN_EXT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[$&#123;PROJECT_NAME&#125;][%level][%X&#123;trace_id&#125;][%thread] %logger&#123;50&#125; - %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_CHARSET&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Console output log --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ALL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ALL&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;LOG_PATH&#125;/web_info.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN_EXT&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;LOG_CHARSET&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Filename rolling daily --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/web_info-%d&#123;yyyy-MM-dd&#125;-%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Keep 30 days worth of history --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Each file should be must at 100m --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Default log --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ALL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Logback-日志丢失问题"><a href="#Logback-日志丢失问题" class="headerlink" title="Logback 日志丢失问题"></a>Logback 日志丢失问题</h3><p>在将Connectivity工程成功部署到阿里云Swarm集群上后。PVC组对集群进行了<a href="https://so.csdn.net/so/search?q=%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">压力测试</a>。并回收了集群的log日志进行分析。发现在发送了100万条数据后丢失了498条数据。前后log都有唯独中间log丢失。于是就着手开始调查日志丢失原因。</p><h4 id="调查过程"><a href="#调查过程" class="headerlink" title="调查过程"></a>调查过程</h4><p>1、因为Connectivity运行在高并发环境下，单机需要承受3000 QPS ，首先需要判断日志是否是在高并发中线程切换导致log无法及时写入到文件因而丢失。<br>在本地通过1000个线程每个线程写入100次，以及500个线程每个线程写入200次等多次测试，发现丢失日志问题可以反复重现。排除是Connectivity项目代码问题。</p><p>2、通过对丢失log的时间和Java虚拟机垃圾回收的时间进行对比。在垃圾回收的时候并没有发现日志丢失问题， 判断不是垃圾回收对log写入造成了影响。</p><p>3、对日志进行按照线程写入情况统计，发现多个线程是在同一时刻进行了日志丢失。即写入843748条日志后丢失日志（400-500条不等）。并反复测试可以重现。通过计算每条日志大小为124K。124*843748 &#x3D; 100MB。这个时候基本可以判断是文件大小以及写入策略的影响了。</p><p>4、对Logback配置文件进行分析。发现同时使用了TimeBasedRollingPolicy和SizeBasedTriggeringPolicy。并且SizeBasedTriggerPolicy设置文件最大为100MB。通过搜索相关问题并对源代码进行debug和分析。发现在同时使用这两种策略会导致Logback在执行的过程中由于自身代码问题抛出异常。我已经将issue提在了Logback的JIRA上。</p><p>5、如果需要按照时间分文件而且需要限制每个文件的大小应该使用SizeAndTimeBasedRollingPolicy，官方文档说明如下：</p><p>   Sometimes you may wish to archive files essentially by date but at the same time limit the size of each log file, in particular if post-processing tools impose size limits on the log files. In order to address this requirement, logback ships with SizeAndTimeBasedRollingPolicy.</p><p>​    Note that TimeBasedRollingPolicy already allows limiting the combined size of archived log files. If you only wish to limit the combined size of log archives, then TimeBasedRollingPolicy described above and setting the totalSizeCap property should be amply sufficent.</p><h4 id="错误示例"><a href="#错误示例" class="headerlink" title="错误示例"></a>错误示例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/connectivi.log.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>6<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.mindsphere.china.poc.connectivity&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/connectivity.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- each file should be at most 100MB, keep 30 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.mindsphere.china.poc.connectivity&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;ERROR&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 网桥</title>
      <link href="/swan-blog/2022/09/30/Linux/Linux%20%E7%BD%91%E6%A1%A5/"/>
      <url>/swan-blog/2022/09/30/Linux/Linux%20%E7%BD%91%E6%A1%A5/</url>
      
        <content type="html"><![CDATA[<p>安装网桥管理工具包 <code>bridge-utils</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bridge-utils -y</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询网桥</span></span><br><span class="line">brctl show</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网桥br1</span></span><br><span class="line">brctl addbr br1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网桥br1</span></span><br><span class="line">brctl delbr br1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将eth0端口加入网桥br1 </span></span><br><span class="line">brctl addif br1 eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除eth0端口加入网桥br1 </span></span><br><span class="line">brctl delif br1 eth0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 网络</title>
      <link href="/swan-blog/2022/09/30/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E7%BD%91%E7%BB%9C/"/>
      <url>/swan-blog/2022/09/30/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/531d5b96cbdc4d7db4c292489b56ccda.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Pod</title>
      <link href="/swan-blog/2022/09/30/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20Pod/"/>
      <url>/swan-blog/2022/09/30/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20Pod/</url>
      
        <content type="html"><![CDATA[<h2 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h2><p>pause：只要有Pod这个容器就会被启动</p><p>在同一个Pod中：共享网络栈、共享存储卷</p><p>ReplicationController用来确保容器应用的副本数始终保持在用户定义的副本数</p><p>ReplicaSet 与 ReplicationController 没有本质上的不同，只是ReplicaSet支持集合式的Selector</p><p>虽然ReplicaSet可以独立使用，但是建议使用 Deployment 来自动管理 ReplicaSet</p><p>HPA（Horizontal Pod Authscaling）：在V1版本中仅支持根据Pod的CPU利用率扩缩容，在vlalpha版本中，支持根据内存和用户自定义的metric扩缩容。</p><p>StatefulSet：解决有状态服务的问题</p><ul><li>稳定的持久化存储：Pod重新调度后还是能访问到相同的持久化数据，基于PVC实现</li><li>稳定的网络标志：Pod重新调度后其PodName和HostName不变，基于Headless Service实现</li><li>有序部署，有序扩展：Pod是有顺序的，在部署或者扩展的时候要依据定义的顺序依次进行，基于init container实现</li><li>有序收缩，有序删除：即从N-1到0</li></ul><p>DaemonSet：确保全部或者一些Node上运行一个Pod的副本，当有Node加入集群时，也会为他们新增一个Pod，当有Node从集群移除时，这些Pod也会被回收，删除DaemonSet将会删除他创建的所有Pod。</p><p>Job：负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个Pod成功结束。</p><p>Cron Job管理基于时间的Job，即：</p><ul><li>在给定时间点只运行一次</li><li>周期性地在给定时间点运行</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分页排序</title>
      <link href="/swan-blog/2022/09/29/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Mysql%E5%88%86%E9%A1%B5%E6%8E%92%E5%BA%8F/"/>
      <url>/swan-blog/2022/09/29/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Mysql%E5%88%86%E9%A1%B5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>Mysql分页且排序的时候，如果排序字段值相同，会出现分页后乱序的情况，表现形式是数据会重复展示。</p><p>解决方案：将ID作为一个二级排序字段</p>]]></content>
      
      
      <categories>
          
          <category> 线上问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes 概述</title>
      <link href="/swan-blog/2022/09/29/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E6%A6%82%E8%BF%B0/"/>
      <url>/swan-blog/2022/09/29/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 特点：轻量级、消耗资源小、弹性伸缩、负载均衡IPVS</p><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><img src="https://img-blog.csdnimg.cn/4436a5ab27694513912c0c4ee8093b8a.png" alt="在这里插入图片描述" style="zoom:75%;" /><h2 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h2><ul><li><p>ApiServer：所有服务访问统一入口</p></li><li><p>ReplicationController：维持副本期望数目</p></li><li><p>Scheduler：负责接收任务，选择合适的节点分配任务</p></li><li><p>ETCD</p><ul><li>可信赖的分布式键值存储服务，存储K8S集群的所有重要信息</li><li>v2版本会把所有的数据全部存储在内存中</li><li>v3版本会引入一个卷的持久化操作</li><li>定时总量备份+持续增量备份</li><li><img src="https://img-blog.csdnimg.cn/fdc12aabb32f42caa621c2d0706672ca.png" alt="在这里插入图片描述" style="zoom:50%;" /></li></ul></li><li><p>Kubelet：直接跟容器引擎交互实现容器的生命周期管理</p></li><li><p>KubeProxy：负责写入规则至 IpTables、IPVS 实现服务映射访问的</p></li></ul><h2 id="重要插件"><a href="#重要插件" class="headerlink" title="重要插件"></a>重要插件</h2><ul><li>CoreDNS：可以为集群中的SVC创建一个域名IP的对应关系解析</li><li>Dashboard：给K8S集群提供一个B&#x2F;S结构的访问体系</li><li>IngressController：官方实现了4层代理，Ingress可以实现7层代理</li><li>Federation：提供一个可以跨集群中心多K8S统一管理功能</li><li>Prometheus：提供一个K8S集群的监控能力</li><li>ELK：提供K8S集群日志统一分析接入平台</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Dashboard</title>
      <link href="/swan-blog/2022/09/28/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20Dashboard/"/>
      <url>/swan-blog/2022/09/28/%E5%AE%B9%E5%99%A8%E5%8C%96/Kubernetes/Kubernetes%20Dashboard/</url>
      
        <content type="html"><![CDATA[<h3 id="部署-Dashboard"><a href="#部署-Dashboard" class="headerlink" title="部署 Dashboard"></a>部署 Dashboard</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用配置文件</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置访问端口</span></span><br><span class="line">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到端口在安全组放行</span></span><br><span class="line">kubectl get svc -A |grep kubernetes-dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现以下信息：31719则是访问端口</span></span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.96.121.87   &lt;none&gt;        8000/TCP         </span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard        NodePort    10.96.3.21     &lt;none&gt;        443:31719/TCP   </span><br></pre></td></tr></table></figure><p>访问控制台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&#123;ip&#125;:31719</span><br></pre></td></tr></table></figure><h3 id="登陆-Dashboard"><a href="#登陆-Dashboard" class="headerlink" title="登陆 Dashboard"></a>登陆 Dashboard</h3><ol><li>新建文件<code>dashboard-admin.yaml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure><ol start="2"><li>应用文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f dashboard-admin.yaml</span><br></pre></td></tr></table></figure><ol start="3"><li>获取访问令牌</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=<span class="string">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class="string">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>得到如下格式的Token</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IlR2NjU1ckNvajQ5MlJhblRaZU9VdVNxXzM0V2Y4dDZWRVRCdHUzcFRETnMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWM0Zm00Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJlOTcwY2M1OC1iNzllLTQ5OTEtOWZjNy05ODM1NGQzM2QyNDIiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.ZIostIO5gRytlHlHflQDqETHCYg7grVUyoLhb7bFRRgkIkxFAgv0k-KbKlQmhwQDXJG4nqi7h60tVtao9vGZtkwV5vazJvBG38XeK1P_ThYI33hZ70Mna-aCCca6dzjqqFg2bXW8Ndoc3LZT9f7hBub3cSfzwlQAUF2HFzpizytnHww2Dh5sH0T-mEA4t3qQByafR3vwaV5uEMlkx0PHgB5KKEbKWhYcGyppZTaLQ5WP65htf4j2hHfJtGA-FqVDps6Zk8JDhKaWfvlhrb4T6RGFzNcX47TBQU-OlSPFzADuo-u3N0S58my3yFZNoOVn1YMgzXNY-99YneZZqD93XA</span><br></pre></td></tr></table></figure><ol start="5"><li>使用Token登陆Dashboard</li></ol><p><img src="https://img-blog.csdnimg.cn/a4010b6b0b024cf59734eaded23817b5.png" alt="在这里插入图片描述"></p><ol start="6"><li>修改token的有效时间</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy kubernetes-dashboard -o yaml -n kubernetes-dashboard &gt; 88.yaml</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 88.yaml</span><br></pre></td></tr></table></figure><p>添加参数：<code>--token-ttl=43200</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--auto-generate-certificates</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--namespace=kubernetes-dashboard</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--token-ttl=43200</span>  <span class="comment"># 添加</span></span><br></pre></td></tr></table></figure><p>应用配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f 88.yaml</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql死锁</title>
      <link href="/swan-blog/2022/09/22/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Mysql%E6%AD%BB%E9%94%81/"/>
      <url>/swan-blog/2022/09/22/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/Mysql%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Deadlock found when trying to get lock; try restarting transaction</span><br></pre></td></tr></table></figure><p>原因：一个用户同时售出了很多藏品，在售出藏品后我会去同步藏品，即先删除旧藏品，再新增新藏品，在并发场景下，会出现死锁。</p><h2 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h2><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><p>InnoDB存储引擎 + 默认的事务隔离级别 Repeatable Read</p><p>用MySQL客户端模拟并发事务操作数据时，如下表按照时间的先后顺序执行命令，会导致死锁。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select * from a ;</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">|  3 |</span><br><span class="line">+----+</span><br><span class="line">|  8 |</span><br><span class="line">+----+</span><br><span class="line">|  11 |</span><br><span class="line">+----+</span><br></pre></td></tr></table></figure><h3 id="出问题的SQL"><a href="#出问题的SQL" class="headerlink" title="出问题的SQL"></a>出问题的SQL</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 begin;</span><br><span class="line">2 delete from a where id = 4;</span><br><span class="line">3 begin;</span><br><span class="line">4 delete from a where id = 6;</span><br><span class="line">5 insert into a values(5);</span><br><span class="line">6 insert into a values(7);</span><br><span class="line">7 Query OK, 1 row affected</span><br><span class="line">8 ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</span><br><span class="line">9 commit;</span><br></pre></td></tr></table></figure><h3 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h3><ul><li><p>InnoDB存储引擎实现共享锁（S Lock）和排它锁（X Lock）两种行级锁。</p><ul><li>S Lock：允许事务读一行数据，多个事务可以并发的对行数据加S Lock</li><li>X Lock：允许事务删除或更新一行数据，只有行数据没有任何锁才可以获取X Lock</li></ul></li><li><p>InnoDB支持意向共享锁（IS Lock）和意向排它锁（IX Lock），这两种锁是表级别的锁，但实际上也应用在行锁之中</p><ul><li>IS Lock：事务想要获得一张表中某几行的共享锁</li><li>IX Lock：事务想要获得一张表中某几行的排它锁</li></ul></li><li><p>行锁：锁定一行数据，即上面所说的共享锁和排他锁</p></li><li><p>间隙锁：锁定一个范围，但不包含记录本身。例如数据库中数据id为3,8,11，那么锁定的区间可能为(-∞, 3) (3, 8) (8, 11)，(11,+∞)，假如插入的数据为6，那么区间(3,8)被锁定，但不包括6</p></li><li><p>行锁 + 间隙锁：锁定一个范围，包括记录本身，例如区间(3,8)被锁定时，要插入的数据6也会被锁定</p></li></ul><p>为什么要有间隙锁？</p><p>我们应该听说过幻读，即在同一事务下，连续执行两次同样的SQL语句可能导致不同的结果，第二次的SQL语句可能返回之前不存在的行。InnoDB使用行锁 + 间隙锁的方式解决这个问题。当然，InnoDB存储引擎在查询数据时是不存在锁的，这是因为查询的数据来自于快照版本，即历史数据。</p><h3 id="数据库锁的应用"><a href="#数据库锁的应用" class="headerlink" title="数据库锁的应用"></a>数据库锁的应用</h3><p>insert 插入记录时，需要获取行锁</p><p>update 更新一条记录时，如果记录存在，需要行锁；如果记录不存在，行锁 + 间隙锁</p><p>delete 删除一条记录时，如果记录存在，需要行锁；如果记录不存在，行锁 + 间隙锁</p><p>select 查询记录时，不会存在锁，除非显示的调用lock in share mode或者for update，如下所示。为什么查询不存在锁呢？因为InnoDB引擎select查询返回的是数据的快照版本，这也是为什么在许多mysql书中，事务的select查询需要锁时，要显式的使用加锁语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- S Lock</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> a <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="comment">-- X Lock</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> a <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span> ;</span><br></pre></td></tr></table></figure><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>为什么看似互不影响的事务会出现死锁的问题？</p><p>上面发生死锁的情况是当数据不存在时，当数据存在时，也会出现死锁的情况，这种情况可以通过3个会话来模拟，当然在实际的项目情况下，并发事务确实是带来了死锁的问题，例如在Spring事务中，先删除表A中的数据，再向表A插入数据，如果并发量比较大的话，如果存在间隙锁，那么有几率会出现死锁的问题。</p><p>Spring事务中大致的运行流程如下：</p><p>一个事务中存在先删除在插入的逻辑，并发时，事务A将存在的数据id&#x3D;6删除，此时事务B也删除id&#x3D;6的数据，事务C同样删除id&#x3D;6的数据，这种情况下，如果并发量够大，一定会出现间隙锁，从而发生死锁。</p><h3 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h3><p>如何去避免？通常情况下，要删除一条数据，那么需要先查询数据是否存在，如果存在，再去删除，否则不执行删除逻辑。其实这种方式也存在一定的风险，我们可以通过软删除的方式，避免高并发时出现数据已被删除，而其他事务正在删除不存在的数据。软删除是指通过字段决定数据是否已删除，然后定时的手动处理数据库中的数据。</p>]]></content>
      
      
      <categories>
          
          <category> 线上问题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 定时任务</title>
      <link href="/swan-blog/2022/08/30/Linux/Linux%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/swan-blog/2022/08/30/Linux/Linux%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="新增定时任务"><a href="#新增定时任务" class="headerlink" title="新增定时任务"></a>新增定时任务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每分钟执行一次</span></span><br><span class="line">* * * * * <span class="built_in">echo</span> Hello World</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-u指定一个用户</span><br><span class="line"></span><br><span class="line">-l列出某个用户的任务计划</span><br><span class="line"></span><br><span class="line">-r删除某个用户的任务(不添加用户即删除所有的任务)</span><br><span class="line"></span><br><span class="line">-e编辑某个用户的任务</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">crontab -u root -e</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每月1号的11点执行，删除Docker镜像</span></span><br><span class="line">0 11 1 * * docker images | grep nft | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | awk <span class="string">&#x27;BEGIN&#123;FS=&quot; &quot;&#125; NR&gt;1 &#123;print $NF&#125;&#x27;</span> | xargs docker rmi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 安装 Nginx</title>
      <link href="/swan-blog/2022/07/30/Linux/Linux%20%E5%AE%89%E8%A3%85%20Nginx/"/>
      <url>/swan-blog/2022/07/30/Linux/Linux%20%E5%AE%89%E8%A3%85%20Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><p>安装依赖包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>下载并解压nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">tar -xvf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><p>进入nginx目录安装ssl模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>执行编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>nginx默认会在<code>/usr/local/</code>下创建一个<code>nginx</code>目录</p><p>启动脚本会在 <code>/usr/local/nginx/sbin</code> 目录下</p><p>启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>软连接启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/nginx/sbin/nginx /usr/sbin</span><br></pre></td></tr></table></figure><p><code>nginx</code> 命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>可能出现的报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [alert] could not open error <span class="built_in">log</span> file: open() <span class="string">&quot;/usr/local/nginx/logs/error.log&quot;</span> failed (2: No such file or directory)</span><br></pre></td></tr></table></figure><p>解决方案：在nginx目录下创建 logs 文件夹并授权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> logs</span><br><span class="line"><span class="built_in">chmod</span> 700 logs</span><br></pre></td></tr></table></figure><h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><p>配置文件位置 <code>/usr/local/nginx/conf/nginx.conf</code></p><p>配置文件样例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events <span class="punctuation">&#123;</span></span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">http <span class="punctuation">&#123;</span></span><br><span class="line">    include             mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line">    sendfile            on;</span><br><span class="line">    keepalive_timeout   <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    # 配置SSL</span><br><span class="line">    ssl_certificate      /usr/local/nginx/ssl/<span class="number">7995548</span>__51nftcard.com.pem;        # 配置证书</span><br><span class="line">    ssl_certificate_key  /usr/local/nginx/ssl/<span class="number">7995548</span>__51nftcard.com.key;        # 配置证书私钥</span><br><span class="line">    ssl_protocols        TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;                                  # 配置SSL协议版本 </span><br><span class="line">    ssl_ciphers          ECDHE-RSA-AES128-GCM-SHA256<span class="punctuation">:</span>HIGH<span class="punctuation">:</span>!aNULL<span class="punctuation">:</span>!MD5<span class="punctuation">:</span>!RC4<span class="punctuation">:</span>!DHE; # 配置SSL加密算法</span><br><span class="line">    ssl_prefer_server_ciphers   on;                 # 优先采取服务器算法</span><br><span class="line">    ssl_session_cache           shared<span class="punctuation">:</span>SSL<span class="punctuation">:</span><span class="number">10</span>m;     # 配置共享会话缓存大小</span><br><span class="line">    ssl_session_timeout         <span class="number">10</span>m;                # 配置会话超时时间</span><br><span class="line"></span><br><span class="line">    # 配置跨域</span><br><span class="line">    add_header Access-Control-Allow-Origin &#x27;*&#x27;;</span><br><span class="line">    add_header Access-Control-Allow-Methods &#x27;GET<span class="punctuation">,</span> POST<span class="punctuation">,</span> OPTIONS&#x27;;</span><br><span class="line">    add_header Access-Control-Allow-Headers &#x27;DNT<span class="punctuation">,</span> X-Mx-ReqToken<span class="punctuation">,</span> Keep-Alive<span class="punctuation">,</span> User-Agent<span class="punctuation">,</span> X-Requested-With<span class="punctuation">,</span> If-Modified-Since<span class="punctuation">,</span> Cache-Control<span class="punctuation">,</span> Content-Type<span class="punctuation">,</span> Authorization&#x27;;</span><br><span class="line">        </span><br><span class="line">    # 配置转发请求头，让应用可以受到真实的请求</span><br><span class="line">    proxy_set_header Host $proxy_host; </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    server <span class="punctuation">&#123;</span></span><br><span class="line">        listen       <span class="number">443</span> ssl;# 配置端口</span><br><span class="line">        server_name  item.demo.com;# 配置域名</span><br><span class="line">        </span><br><span class="line">        location / <span class="punctuation">&#123;</span></span><br><span class="line">            proxy_pass  http<span class="punctuation">:</span><span class="comment">//127.0.0.1:8081;</span></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">                return <span class="number">204</span>;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">        location /job/ <span class="punctuation">&#123;</span></span><br><span class="line">            proxy_pass  http<span class="punctuation">:</span><span class="comment">//127.0.0.1:9999/;</span></span><br><span class="line">            if ($request_method = &#x27;OPTIONS&#x27;) <span class="punctuation">&#123;</span></span><br><span class="line">                return <span class="number">204</span>;</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>责任链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>实现过滤器，将一串1-9的数字进行掩码过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Msg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FilterChain <span class="title function_">add</span><span class="params">(Filter filter)</span>&#123;</span><br><span class="line">        filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Filter filter : filters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!filter.doFilter(msg))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OneFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span> &#123;</span><br><span class="line">        msg.setContent(msg.getContent().replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span> &#123;</span><br><span class="line">        msg.setContent(msg.getContent().replace(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span> &#123;</span><br><span class="line">        msg.setContent(msg.getContent().replace(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="comment">// 当该过滤器返回false以后，后面的过滤器就都不执行了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FourFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doFilter</span><span class="params">(Msg msg)</span> &#123;</span><br><span class="line">        msg.setContent(msg.getContent().replace(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Msg</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Msg</span>();</span><br><span class="line">        msg.setContent(<span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();</span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">fc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();</span><br><span class="line">        fc.add(<span class="keyword">new</span> <span class="title class_">OneFilter</span>()).add(<span class="keyword">new</span> <span class="title class_">TwoFilter</span>());</span><br><span class="line">        fc2.add(<span class="keyword">new</span> <span class="title class_">ThreeFilter</span>()).add(<span class="keyword">new</span> <span class="title class_">FourFilter</span>());</span><br><span class="line">        fc.add(fc2);</span><br><span class="line">        fc.doFilter(msg)</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>如果我们的集合元素是用不同的方式实现的，有数组，还有 java 的集合类，或者还有其他方式，当客户端要遍<br>历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerCollegeIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="comment">// 计算机学院是以数组的方式存放系的</span></span><br><span class="line">    <span class="keyword">private</span> Department[] departments;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerCollegeIterator</span><span class="params">(Department[] departments)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= departments.length || departments[pos] == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> departments[pos];</span><br><span class="line">        pos += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoCollegeIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">    <span class="comment">// 信息工程学院是以List的方式存放系的</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; departmentList;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoCollegeIterator</span><span class="params">(List&lt;Department&gt; departmentList)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.departmentList = departmentList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= departmentList.size() - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> departmentList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">College</span>&#123;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addDepartment</span><span class="params">(String name, String desc)</span>;</span><br><span class="line"></span><br><span class="line">    Iterator <span class="title function_">newIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerCollege</span> <span class="keyword">implements</span> <span class="title class_">College</span>&#123;</span><br><span class="line"></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="type">int</span> count;  <span class="comment">// 保存当前数组的对象个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerCollege</span><span class="params">()</span>&#123;</span><br><span class="line">        departments = <span class="keyword">new</span> <span class="title class_">Department</span>[<span class="number">5</span>];</span><br><span class="line">        addDepartment(<span class="string">&quot;Java专业&quot;</span>, <span class="string">&quot;Java专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;Php专业&quot;</span>, <span class="string">&quot;Php专业&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;大数据专业&quot;</span>, <span class="string">&quot;大数据专业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;计算机学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDepartment</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>(name, desc);</span><br><span class="line">        departments[count] = department;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">newIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComputerCollegeIterator</span>(departments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoCollege</span> <span class="keyword">implements</span> <span class="title class_">College</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; departmentList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoCollege</span><span class="params">()</span>&#123;</span><br><span class="line">        departmentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        addDepartment(<span class="string">&quot;信息安全&quot;</span>, <span class="string">&quot;信息安全&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;网络安全&quot;</span>, <span class="string">&quot;网络安全&quot;</span>);</span><br><span class="line">        addDepartment(<span class="string">&quot;服务器安全&quot;</span>, <span class="string">&quot;服务器安全&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;信息工程学院&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDepartment</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>(name, desc);</span><br><span class="line">        departmentList.add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">newIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InfoCollegeIterator</span>(departmentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Output</span>&#123;</span><br><span class="line">    List&lt;College&gt; collegeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Output</span><span class="params">(List&lt;College&gt; collegeList)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.collegeList = collegeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printCollege</span><span class="params">()</span>&#123;</span><br><span class="line">        Iterator&lt;College&gt; iterator = collegeList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">College</span> <span class="variable">college</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;--- &quot;</span> + college.getName() + <span class="string">&quot; ---&quot;</span>);</span><br><span class="line">            printDepartment(college.newIterator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printDepartment</span><span class="params">(Iterator iterator)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> (Department) iterator.next();</span><br><span class="line">            System.out.println(department.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;College&gt; collegeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">ComputerCollege</span> <span class="variable">computerCollege</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerCollege</span>();</span><br><span class="line">        <span class="type">InfoCollege</span> <span class="variable">infoCollege</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoCollege</span>();</span><br><span class="line"></span><br><span class="line">        collegeList.add(computerCollege);</span><br><span class="line">        collegeList.add(infoCollege);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(collegeList);</span><br><span class="line">        output.printCollege();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>将一个类的接口转换成另一个种接口，让原本接口不兼容的类可以兼容。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：手机充电需要5V电压，所以需要将220V电压转换为5V电压</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Voltage220</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">output220</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">src</span> <span class="operator">=</span> <span class="number">220</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压 = &quot;</span> + src);</span><br><span class="line">            <span class="keyword">return</span> src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Voltage5</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="title function_">output5</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">VoltageAdapter</span> <span class="keyword">implements</span> <span class="title class_">Voltage5</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Voltage220 voltage220;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VoltageAdapter</span><span class="params">()</span>&#123;</span><br><span class="line">            voltage220 = <span class="keyword">new</span> <span class="title class_">Voltage220</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">output5</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">src</span> <span class="operator">=</span> voltage220.output220();</span><br><span class="line">            <span class="type">int</span> <span class="variable">dst</span> <span class="operator">=</span> src / <span class="number">44</span>;</span><br><span class="line">            <span class="keyword">return</span> dst;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charging</span><span class="params">(Voltage5 voltage5)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (voltage5.output5() == <span class="number">5</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;电压为5V，可以充电&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (voltage5.output5() &gt; <span class="number">5</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;电压大于5V，无法充电&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        phone.charging(<span class="keyword">new</span> <span class="title class_">VoltageAdapter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>封装了一些作用于某种数据结构的各元素的操作，可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>数据看板的建设：校长和家长需要观察学生的数据看板，校长关注班级，家长关注排名。视角不同，访问结果输出不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生：被访问对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;     <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">public</span> String identity; <span class="comment">// 身份：重点班、普通班</span></span><br><span class="line">    <span class="keyword">public</span> String clazz;    <span class="comment">// 班级</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String identity, String clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.identity = identity;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ranking</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父母：访问者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名:&quot;</span> + student.name + <span class="string">&quot;,排名:&quot;</span> + student.ranking());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校长：访问者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Principal</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名:&quot;</span> + student.name + <span class="string">&quot;,班级:&quot;</span> + student.clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据看板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataView</span> &#123;</span><br><span class="line">    List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DataView</span><span class="params">()</span> &#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;谢⻜机&quot;</span>, <span class="string">&quot;重点班&quot;</span>, <span class="string">&quot;⼀年⼀班&quot;</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;windy&quot;</span>, <span class="string">&quot;重点班&quot;</span>, <span class="string">&quot;⼀年⼀班&quot;</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;⼤⽑&quot;</span>, <span class="string">&quot;普通班&quot;</span>, <span class="string">&quot;⼆年三班&quot;</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Shing&quot;</span>, <span class="string">&quot;普通班&quot;</span>, <span class="string">&quot;三年四班&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">            <span class="comment">// 根据不同的访问者来执行不同的逻辑</span></span><br><span class="line">            student.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DataView</span> <span class="variable">dataView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataView</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;家⻓视⻆访问：&quot;</span>);</span><br><span class="line">        dataView.show(<span class="keyword">new</span> <span class="title class_">Parent</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n校⻓视⻆访问：&quot;</span>);</span><br><span class="line">        dataView.show(<span class="keyword">new</span> <span class="title class_">Principal</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>创建了对象组的树形结构，将对象组合成树状结构以表示”整体-部分”的层次关系。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：大学下面有多个学院，学院下有多个部门，大学可以操作学院，学院可以操作部门。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Organization</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Organization</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Organization organization)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Organization organization)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">University</span> <span class="keyword">extends</span> <span class="title class_">Organization</span>&#123;</span><br><span class="line">    List&lt;Organization&gt; organizations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">University</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Organization organization)</span> &#123;</span><br><span class="line">        organizations.add(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Organization organization)</span> &#123;</span><br><span class="line">        organizations.remove(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------------&quot;</span> + getName() + <span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Organization organization : organizations) &#123;</span><br><span class="line">            organization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">College</span> <span class="keyword">extends</span> <span class="title class_">Organization</span>&#123;</span><br><span class="line">    List&lt;Organization&gt; organizations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">College</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Organization organization)</span> &#123;</span><br><span class="line">        organizations.add(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Organization organization)</span> &#123;</span><br><span class="line">        organizations.remove(organization);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------&quot;</span> + getName() + <span class="string">&quot;------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Organization organization : organizations) &#123;</span><br><span class="line">            organization.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span> <span class="keyword">extends</span> <span class="title class_">Organization</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--&quot;</span> + getName() + <span class="string">&quot;--&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 大学</span></span><br><span class="line">        <span class="type">Organization</span> <span class="variable">university</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">University</span>(<span class="string">&quot;清华大学&quot;</span>);</span><br><span class="line">        <span class="comment">// 学院</span></span><br><span class="line">        <span class="type">Organization</span> <span class="variable">computerCollege</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">College</span>(<span class="string">&quot;计算机学院&quot;</span>);</span><br><span class="line">        <span class="type">Organization</span> <span class="variable">infoCollege</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">College</span>(<span class="string">&quot;信息工程学院&quot;</span>);</span><br><span class="line">        <span class="comment">// 将部门加入学院</span></span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="string">&quot;人事部&quot;</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="string">&quot;后勤部&quot;</span>));</span><br><span class="line">        infoCollege.add(<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="string">&quot;学工办&quot;</span>));</span><br><span class="line">        infoCollege.add(<span class="keyword">new</span> <span class="title class_">Department</span>(<span class="string">&quot;信息中心&quot;</span>));</span><br><span class="line">        <span class="comment">// 将学院加入学校</span></span><br><span class="line">        university.add(computerCollege);</span><br><span class="line">        university.add(infoCollege);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        university.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>对象之间多对一依赖的一种设计方案，被依赖的对象为 Subject，依赖的对象为 Observer，Subject，通知 Observer 变化。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：孩子醒来哭，父亲，母亲，狗都会做出各自的反应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">actionOnWakeup</span><span class="params">(WakeupEvent event)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dad</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dad feed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionOnWakeup</span><span class="params">(WakeupEvent event)</span> &#123;</span><br><span class="line">        feed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mon</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hug</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mon feed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionOnWakeup</span><span class="params">(WakeupEvent event)</span> &#123;</span><br><span class="line">        hug();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wang</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog wang...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionOnWakeup</span><span class="params">(WakeupEvent event)</span> &#123;</span><br><span class="line">        wang();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">cry</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        observers.add(<span class="keyword">new</span> <span class="title class_">Dad</span>());</span><br><span class="line">        observers.add(<span class="keyword">new</span> <span class="title class_">Mon</span>());</span><br><span class="line">        observers.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wakeup</span><span class="params">()</span>&#123;</span><br><span class="line">        cry = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">WakeupEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WakeupEvent</span>(System.currentTimeMillis(), <span class="string">&quot;bed&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Observer o : observers)&#123;</span><br><span class="line">            o.actionOnWakeup(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Event</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">abstract</span> T <span class="title function_">getSource</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WakeupEvent</span> <span class="keyword">extends</span> <span class="title class_">Event</span>&lt;Child&gt;&#123;</span><br><span class="line">    <span class="type">long</span> timestamp;</span><br><span class="line">    String location;</span><br><span class="line">    Child source;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WakeupEvent</span><span class="params">(<span class="type">long</span> timestamp, String location)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = timestamp;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Child <span class="title function_">getSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Child</span>().wakeup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>动态的将新功能附加到对象上</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：星巴克点咖啡，点一杯咖啡和若干配料，并计算总价</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span>;   <span class="comment">// 价格</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">float</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ingredient</span> <span class="keyword">extends</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Ingredient</span><span class="params">(Goods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.goods = goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + goods.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setDescription(goods.getDescription() + <span class="string">&quot;, &quot;</span> + description);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decaf</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decaf</span><span class="params">()</span>&#123;</span><br><span class="line">        setDescription(<span class="string">&quot;脱因咖啡&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">10.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">extends</span> <span class="title class_">Ingredient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Milk</span><span class="params">(Goods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(goods);</span><br><span class="line">        setDescription(<span class="string">&quot;牛奶&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chocolate</span> <span class="keyword">extends</span> <span class="title class_">Ingredient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chocolate</span><span class="params">(Goods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(goods);</span><br><span class="line">        setDescription(<span class="string">&quot;巧克力&quot;</span>);</span><br><span class="line">        setPrice(<span class="number">3.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 点一份Long Black</span></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Decaf</span>();</span><br><span class="line">        <span class="comment">// 加一份牛奶</span></span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Milk</span>(order);</span><br><span class="line">        <span class="comment">// 加两份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(order);</span><br><span class="line">        order = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;订单: &quot;</span> + order.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;总费用: &quot;</span> + order.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>模板方法模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：制作豆浆的流程 <strong>添加配料 -&gt; 打浆 -&gt; 打包</strong>，通过添加不同的配料，可以制作出不同口味的豆浆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SoyBeanMilk</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addMaterial</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">make</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (needMaterial())&#123;</span><br><span class="line">            addMaterial();</span><br><span class="line">        &#125;</span><br><span class="line">        beat();</span><br><span class="line">        box();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打浆&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">box</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 钩子函数</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needMaterial</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedBeanSoyBeanMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyBeanMilk</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMaterial</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入上好的红豆作为配料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PeanutSoyBeanMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyBeanMilk</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMaterial</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加入上好的花生作为配料&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PureSoyBeanMilk</span> <span class="keyword">extends</span> <span class="title class_">SoyBeanMilk</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMaterial</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needMaterial</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----- 制作红豆豆浆 -----&quot;</span>);</span><br><span class="line">        <span class="type">SoyBeanMilk</span> <span class="variable">redBeanSoyBeanMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedBeanSoyBeanMilk</span>();</span><br><span class="line">        redBeanSoyBeanMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----- 制作花生豆浆 -----&quot;</span>);</span><br><span class="line">        <span class="type">SoyBeanMilk</span> <span class="variable">peanutSoyBeanMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PeanutSoyBeanMilk</span>();</span><br><span class="line">        peanutSoyBeanMilk.make();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----- 制作纯豆浆 -----&quot;</span>);</span><br><span class="line">        <span class="type">SoyBeanMilk</span> <span class="variable">pureSoyBeanMilk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PureSoyBeanMilk</span>();</span><br><span class="line">        pureSoyBeanMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-源码应用场景"><a href="#3-源码应用场景" class="headerlink" title="3. 源码应用场景"></a>3. 源码应用场景</h2><p>ClassLoader#findClass</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：一次抽奖有以下几种状态：不能抽奖，能抽奖，抽中发放奖品，奖品发完。那么每次抽奖都会有几率改变状态，图示如下。<br><img src="https://img-blog.csdnimg.cn/20200213145634795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">raffle</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dispensePrize</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CannotRaffleState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    RaffleActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CannotRaffleState</span><span class="params">(RaffleActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣除50积分成功，您可以抽奖了&quot;</span>);</span><br><span class="line">        activity.setState(activity.getCanRaffleState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">raffle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;扣了积分才能抽奖哦&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispensePrize</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态不能发放奖品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CanRaffleState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    RaffleActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CanRaffleState</span><span class="params">(RaffleActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已经扣取过了积分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">raffle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在抽奖，请稍等&quot;</span>);</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            activity.setState(activity.getDispenseState());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾没有抽中奖品&quot;</span>);</span><br><span class="line">            <span class="comment">// 改变状态为不能抽奖</span></span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispensePrize</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;没中奖，不能发放奖品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DispenseState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    RaffleActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DispenseState</span><span class="params">(RaffleActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不能扣除积分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">raffle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不能抽奖&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispensePrize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜中奖了&quot;</span>);</span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;很遗憾，奖品发送完了&quot;</span>);</span><br><span class="line">            activity.setState(activity.getDispenseOutState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DispenseOutState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line"></span><br><span class="line">    RaffleActivity activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DispenseOutState</span><span class="params">(RaffleActivity activity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">raffle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispensePrize</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;奖品发送完了，请下次参加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RaffleActivity</span> &#123;</span><br><span class="line">    <span class="comment">// state 表示活动当前的状态，是变化的</span></span><br><span class="line">    <span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 奖品的数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4个属性，表示4种状态</span></span><br><span class="line">    <span class="type">State</span> <span class="variable">noRaffleState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotRaffleState</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">State</span> <span class="variable">canRaffleState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CanRaffleState</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">State</span> <span class="variable">dispenseState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispenseState</span>(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">State</span> <span class="variable">dispenseOutState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispenseOutState</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化当前的状态为不能抽奖状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RaffleActivity</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = getNoRaffleState();</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        state.deductMoney();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raffle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state.raffle()) &#123;</span><br><span class="line">            state.dispensePrize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每领取一次奖品，数量减一</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curCount</span> <span class="operator">=</span> count;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> curCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RaffleActivity</span> <span class="variable">activity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RaffleActivity</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--- 第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;次抽奖 ---&quot;</span>);</span><br><span class="line">            activity.deductMoney();</span><br><span class="line">            activity.raffle();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>定义了一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：人们可以选择支付方式，现金支付和微信支付，我们可以传入不同的实现类来改变其支付行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 支付接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 现金支付实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CashPayment</span> <span class="keyword">implements</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The pay method is cash&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 微信支付实现 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeChatPayment</span> <span class="keyword">implements</span> <span class="title class_">Payment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The pay method is wechat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用者 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    Payment payment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPayment</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.payment = payment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span>&#123;</span><br><span class="line">        payment.pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setPayment(<span class="keyword">new</span> <span class="title class_">CashPayment</span>());</span><br><span class="line">        person.pay();</span><br><span class="line">        person.setPayment(<span class="keyword">new</span> <span class="title class_">WeChatPayment</span>());</span><br><span class="line">        person.pay();</span><br><span class="line">        <span class="comment">// 也可以通过lambda表达式来自定义实现</span></span><br><span class="line">        person.setPayment(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;The pay method is alipay&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        person.pay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>“工厂方法模式”只生产一种产品，”抽象工厂模式”可以生产多种产品</p><h2 id="2-图示"><a href="#2-图示" class="headerlink" title="2. 图示"></a>2. 图示</h2><p><img src="https://img-blog.csdnimg.cn/20201221182905631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><p>场景：定制鼠标和键盘，有戴尔和惠普两个工厂，需要不同的鼠标只需要实例化不同的工厂即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 鼠标 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 惠普鼠标 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpMouse</span> <span class="keyword">extends</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Hp mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 戴尔鼠标 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DellMouse</span> <span class="keyword">extends</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Dell mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 键盘 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 惠普键盘 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpKeyboard</span> <span class="keyword">extends</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Hp keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 戴尔键盘 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DellKeyboard</span> <span class="keyword">extends</span> <span class="title class_">Keyboard</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Dell keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 抽象PC工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PcFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Keyboard <span class="title function_">createKeyboard</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 惠普PC工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpFactory</span> <span class="keyword">extends</span> <span class="title class_">PcFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HpMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Keyboard <span class="title function_">createKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HpKeyboard</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 戴尔PC工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DellFactory</span> <span class="keyword">extends</span> <span class="title class_">PcFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DellMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Keyboard <span class="title function_">createKeyboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DellKeyboard</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PcFactory</span> <span class="variable">pcFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HpFactory</span>();</span><br><span class="line">        pcFactory.createKeyboard().print();</span><br><span class="line">        pcFactory.createMouse().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>将实现与抽象放在两个不同的类层次中，使两个层次可以独立改变</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：有品牌Vivo、小米，有类型折叠式、滑盖式，一个手机3个操作：打开、关闭、打电话。<br>每个品牌的每种类型操作是不同的，这个时候可以用到桥接模式来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vivo</span> <span class="keyword">implements</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Vivo call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoMi</span> <span class="keyword">implements</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Xiaomi open&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Xiaomi close&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Xiaomi call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(Brand brand)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.brand.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FoldedPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FoldedPhone</span><span class="params">(Brand brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠样式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠样式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;折叠样式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SlidePhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SlidePhone</span><span class="params">(Brand brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">&quot;滑盖式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;滑盖式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;滑盖式手机&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FoldedPhone</span>(<span class="keyword">new</span> <span class="title class_">Vivo</span>()).open();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SlidePhone</span>(<span class="keyword">new</span> <span class="title class_">Vivo</span>()).close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FoldedPhone</span>(<span class="keyword">new</span> <span class="title class_">XiaoMi</span>()).call();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">SlidePhone</span>(<span class="keyword">new</span> <span class="title class_">XiaoMi</span>()).open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工厂方法模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>“简单工厂模式”是由一个工厂对象决定创建出哪一种产品类的实例，但是违反了开闭原则。</p><p>“工厂方法模式”是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p><p>定义⼀个创建对象的接口，让其子类自己决定实例化哪⼀个工厂类，工厂模式使其创建过程延迟到子类进行。</p><h2 id="2-图示"><a href="#2-图示" class="headerlink" title="2. 图示"></a>2. 图示</h2><p><img src="https://img-blog.csdnimg.cn/20201221172306524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><p>场景：定制鼠标，有戴尔和惠普两个工厂，需要不同的鼠标只需要实例化不同的工厂即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 抽象鼠标类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 惠普鼠标 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpMouse</span> <span class="keyword">extends</span> <span class="title class_">Mouse</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Hp mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*戴尔鼠标 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DellMouse</span> <span class="keyword">extends</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is Dell mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 抽象鼠标工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MouseFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 戴尔鼠标工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DellMouseFactory</span> <span class="keyword">extends</span> <span class="title class_">MouseFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DellMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 惠普鼠标工厂 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpMouseFactory</span> <span class="keyword">extends</span> <span class="title class_">MouseFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mouse <span class="title function_">createMouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HpMouse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 当我们需要不同的鼠标时，只需要new不同的工厂即可</span></span><br><span class="line">        <span class="type">MouseFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DellMouseFactory</span>();</span><br><span class="line">        factory.createMouse().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(Builder b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = b.name;</span><br><span class="line">        <span class="built_in">this</span>.age = b.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">builder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> User <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> User.builder().name(<span class="string">&quot;Jerry&quot;</span>).age(<span class="number">18</span>).build();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：游戏角色有血量和魔法，在大战 Boss 前保存自身的状态(血量和魔法)，当大战 Boss 后血量和魔法下降，从备忘录对象恢复到大战前的状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 守护者对象，保存游戏角色的状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Memento</span><span class="params">(<span class="type">int</span> hp, <span class="type">int</span> mp)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hp = hp;</span><br><span class="line"><span class="built_in">this</span>.mp = mp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameRole</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> hp;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Memento <span class="title function_">createMemento</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(hp, mp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverGameRoleFromMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.hp = memento.getHp();</span><br><span class="line"><span class="built_in">this</span>.mp = memento.getMp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当前血量:&quot;</span> + <span class="built_in">this</span>.hp + <span class="string">&quot;,当前魔法:&quot;</span> + <span class="built_in">this</span>.mp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">GameRole</span> <span class="variable">gameRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameRole</span>();</span><br><span class="line">gameRole.setHp(<span class="number">100</span>);</span><br><span class="line">gameRole.setMp(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--- 战斗Boss前状态 ---&quot;</span>);</span><br><span class="line">gameRole.display();</span><br><span class="line"></span><br><span class="line"><span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line">caretaker.setMemento(gameRole.createMemento());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--- 战斗Boss后状态 ---&quot;</span>);</span><br><span class="line">gameRole.setHp(<span class="number">30</span>);</span><br><span class="line">gameRole.setMp(<span class="number">30</span>);</span><br><span class="line">gameRole.display();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;--- 战斗结束 状态恢复 ---&quot;</span>);</span><br><span class="line">gameRole.recoverGameRoleFromMemento(caretaker.getMemento());</span><br><span class="line">gameRole.display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>为子系统中一组接口提供一个一致的接口，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：电脑开启需要一次开启Cpu、内存、磁盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cpu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cpu start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cpu shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Disk</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disk start&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disk shutdown&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span>&#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">Cpu</span>();</span><br><span class="line">        memory = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        disk = <span class="keyword">new</span> <span class="title class_">Disk</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        cpu.start();</span><br><span class="line">        memory.start();</span><br><span class="line">        disk.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>&#123;</span><br><span class="line">        cpu.shutdown();</span><br><span class="line">        memory.shutdown();</span><br><span class="line">        disk.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.start();</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能</p><p>Object类提供clone()方法，可以将对象复制一份，需要实现Cloneable接口，克隆分为深克隆和浅克隆</p><ul><li><p>浅克隆：克隆的是源对象的对象的地址，当源对象的对象中的值发生改变，相应克隆的类也将发生改变</p></li><li><p>深克隆：在重写clone()方法的时候对类内部的对象进行克隆</p></li></ul><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><h3 id="2-1-浅克隆"><a href="#2-1-浅克隆" class="headerlink" title="2.1 浅克隆"></a>2.1 浅克隆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShallowClone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Location</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer x;</span><br><span class="line">        <span class="keyword">private</span> Integer y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> String color;</span><br><span class="line">        <span class="keyword">private</span> Location loc;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Sheep <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> (Sheep) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">1</span>, <span class="string">&quot;白色&quot;</span>, <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep2</span> <span class="operator">=</span> sheep1.clone();</span><br><span class="line">        System.out.println(sheep1.getLoc() == sheep2.getLoc());</span><br><span class="line">        sheep1.getLoc().setX(<span class="number">0</span>);</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-深克隆"><a href="#2-2-深克隆" class="headerlink" title="2.2 深克隆"></a>2.2 深克隆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeepClone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Location</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer x;</span><br><span class="line">        <span class="keyword">private</span> Integer y;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Location <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> (Location) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> String color;</span><br><span class="line">        <span class="keyword">private</span> Location loc;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Sheep <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">            <span class="type">Sheep</span> <span class="variable">sheep</span> <span class="operator">=</span> (Sheep) <span class="built_in">super</span>.clone();</span><br><span class="line">            <span class="built_in">this</span>.setLoc(loc.clone());</span><br><span class="line">            <span class="keyword">return</span> sheep;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">1</span>, <span class="string">&quot;白色&quot;</span>, <span class="keyword">new</span> <span class="title class_">Location</span>(<span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep2</span> <span class="operator">=</span> sheep1.clone();</span><br><span class="line">        System.out.println(sheep1.getLoc() == sheep2.getLoc());</span><br><span class="line">        sheep1.getLoc().setX(<span class="number">0</span>);</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>我们需要向某些对象发送请求，但不知道请求的接受者是谁，也不知道请求的操作是哪个。<br>只需在程序运行时指定具体请求接受者即可。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：使用遥控器控制电灯，遥控器有开、关、撤销 三个功能，而遥控器无需实现电灯的内部逻辑，通过组合的方式使电灯接收者实现，而电灯的接收者是通过客户端自己指定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Command</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOnCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOnCommand</span><span class="params">(LightReceiver light)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(LightReceiver light)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightReceiver</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯打开了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电灯关闭了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteController</span>&#123;</span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line">    Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteController</span><span class="params">()</span>&#123;</span><br><span class="line">        onCommands = <span class="keyword">new</span> <span class="title class_">Command</span>[<span class="number">5</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> <span class="title class_">Command</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> <span class="title class_">NoCommand</span>();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> <span class="title class_">NoCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(<span class="type">int</span> idx, Command onCommand, Command offCommand)</span>&#123;</span><br><span class="line">        onCommands[idx] = onCommand;</span><br><span class="line">        offCommands[idx] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onButtonIsPushed</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        onCommands[idx].execute();</span><br><span class="line">        undoCommand = onCommands[idx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offButtonIsPushed</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        offCommands[idx].execute();</span><br><span class="line">        undoCommand = offCommands[idx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undoButtonIsPushed</span><span class="params">(<span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LightReceiver</span> <span class="variable">lightReceiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightReceiver</span>();</span><br><span class="line">        <span class="type">LightOnCommand</span> <span class="variable">lightOnCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOnCommand</span>(lightReceiver);</span><br><span class="line">        <span class="type">LightOffCommand</span> <span class="variable">lightOffCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LightOffCommand</span>(lightReceiver);</span><br><span class="line">        <span class="type">RemoteController</span> <span class="variable">remoteController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteController</span>();</span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>, lightOnCommand, lightOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---- 按下开灯按钮 ----&quot;</span>);</span><br><span class="line">        remoteController.onButtonIsPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---- 按下关灯按钮 ----&quot;</span>);</span><br><span class="line">        remoteController.offButtonIsPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;---- 按下撤销按钮 ----&quot;</span>);</span><br><span class="line">        remoteController.undoButtonIsPushed(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>运用共享技术有效地支持大量细粒度的对象</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：不通过new的方式在地图上创建多个树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> Tree tree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Tree tree)</span> &#123;</span><br><span class="line">        System.out.println(tree.getName() + <span class="string">&quot;\t被创建，描述:&quot;</span> + tree.getData());</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.tree = tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Tree&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Tree <span class="title function_">getTree</span><span class="params">(String name, String data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Tree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(name, data);</span><br><span class="line">        map.put(name, tree);</span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>,<span class="number">4</span>, TreeFactory.getTree(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;description of xxx&quot;</span>));</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>,<span class="number">5</span>, TreeFactory.getTree(<span class="string">&quot;yyy&quot;</span>, <span class="string">&quot;description of yyy&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1. 饿汉式"></a>1. 饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton1</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    INSTANCE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2. 懒汉式"></a>2. 懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class Singleton&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-代理类的作用"><a href="#1-代理类的作用" class="headerlink" title="1. 代理类的作用"></a>1. 代理类的作用</h2><p>为对象提供一个替身，以控制对这个对象的访问，即通过代理对象访问目标对象。<br>被代理的对象可以是远程对象，创建开销大的对象，需要安全控制的对象。<br>三种代理模式：静态代理、动态代理、Cglib代理。<br>Spring中的Aop底层就是动态代理。</p><h2 id="2-静态代理和动态代理"><a href="#2-静态代理和动态代理" class="headerlink" title="2. 静态代理和动态代理"></a>2. 静态代理和动态代理</h2><ul><li>静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。</li><li>动态代理：在程序运行时，运用反射机制动态创建而成。</li></ul><h2 id="3-静态代理实现"><a href="#3-静态代理实现" class="headerlink" title="3. 静态代理实现"></a>3. 静态代理实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ClothFactory factory;   <span class="comment">// 用被代理对象进行实例化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyClothFactory</span><span class="params">(ClothFactory factory)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做一些准备工作&quot;</span>);</span><br><span class="line">        factory.produceCloth();</span><br><span class="line">        System.out.println(<span class="string">&quot;代理工厂做一些收尾工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NikeClothFactory</span> <span class="keyword">implements</span> <span class="title class_">ClothFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">produceCloth</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;耐克工厂生产一批运动服&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStaticProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建被代理类的对象</span></span><br><span class="line">        <span class="type">NikeClothFactory</span> <span class="variable">nike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NikeClothFactory</span>();</span><br><span class="line">        <span class="comment">// 创建代理类的对象</span></span><br><span class="line">        <span class="type">ProxyClothFactory</span> <span class="variable">proxyClothFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyClothFactory</span>(nike);</span><br><span class="line">        proxyClothFactory.produceCloth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：可以通过调用代理类的生产方法，在主业务逻辑的前后加入了代理逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代理工厂做一些准备工作</span><br><span class="line">耐克工厂生产一批运动服</span><br><span class="line">代理工厂做一些收尾工作</span><br></pre></td></tr></table></figure><h2 id="4-动态代理实现"><a href="#4-动态代理实现" class="headerlink" title="4. 动态代理实现"></a>4. 动态代理实现</h2><p>使用了Lambda表达式可以极大地简化代码逻辑<br>核心方法：<code>Proxy.newProxyInstance(loader, interfaces, handler)</code><br>loader：被代理类的类加载器。<br>interfaces：被代理类实现的接口。<br>handler：方法调用处理器，通过<code>InvocationHandler </code>获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">    String <span class="title function_">getBelief</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">implements</span> <span class="title class_">Human</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBelief</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I believe I can fly&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我喜欢吃&quot;</span> + food);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">superMan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();</span><br><span class="line">        <span class="comment">// 定义handler</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (proxy, method, args1) -&gt; method.invoke(superMan, args1);</span><br><span class="line">        <span class="comment">// 获取代理类对象</span></span><br><span class="line">        <span class="type">Human</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Human) Proxy.newProxyInstance(superMan.getClass().getClassLoader(), superMan.getClass().getInterfaces(), handler);</span><br><span class="line">        <span class="comment">// 下列方法是代理对象执行的</span></span><br><span class="line">        System.out.println(proxyInstance.getBelief());</span><br><span class="line">        proxyInstance.eat(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I believe I can fly</span><br><span class="line">我喜欢吃苹果</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>用一个 中介对象来封装一系列的对象交互。中介者使各个对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>场景：当闹铃响起时，电视开始播放；当电视关闭时，闹铃关闭。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Colleague&gt; colleagueMap;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; interMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mediator</span><span class="params">()</span> &#123;</span><br><span class="line">        colleagueMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        interMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String name, Colleague colleague)</span> &#123;</span><br><span class="line">        colleagueMap.put(name, colleague);</span><br><span class="line">        <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Alarm) &#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;Alarm&quot;</span>, name);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleague <span class="keyword">instanceof</span> Tv) &#123;</span><br><span class="line">            interMap.put(<span class="string">&quot;Tv&quot;</span>, name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(<span class="type">int</span> stateChange, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (colleagueMap.get(name) <span class="keyword">instanceof</span> Alarm) &#123;</span><br><span class="line">            action(stateChange);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colleagueMap.get(name) <span class="keyword">instanceof</span> Tv) &#123;</span><br><span class="line">            action(stateChange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(<span class="type">int</span> stateChange)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stateChange == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Alarm</span> <span class="variable">alarm</span> <span class="operator">=</span> (Alarm) colleagueMap.get(interMap.get(<span class="string">&quot;Alarm&quot;</span>));</span><br><span class="line">            <span class="type">Tv</span> <span class="variable">tv</span> <span class="operator">=</span> (Tv) colleagueMap.get(interMap.get(<span class="string">&quot;Tv&quot;</span>));</span><br><span class="line">            alarm.start();</span><br><span class="line">            tv.start();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stateChange == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">Alarm</span> <span class="variable">alarm</span> <span class="operator">=</span> (Alarm) colleagueMap.get(interMap.get(<span class="string">&quot;Alarm&quot;</span>));</span><br><span class="line">            <span class="type">Tv</span> <span class="variable">tv</span> <span class="operator">=</span> (Tv) colleagueMap.get(interMap.get(<span class="string">&quot;Tv&quot;</span>));</span><br><span class="line">            alarm.stop();</span><br><span class="line">            tv.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Colleague</span><span class="params">(Mediator mediator, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Mediator <span class="title function_">getMediator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> stateChange)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Alarm</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Alarm</span><span class="params">(Mediator mediator, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(mediator, name);</span><br><span class="line">        mediator.register(name, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> stateChange)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMediator().getMessage(stateChange, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;闹钟响了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;闹钟停了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tv</span><span class="params">(Mediator mediator, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(mediator, name);</span><br><span class="line">        mediator.register(name, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> stateChange)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getMediator().getMessage(stateChange, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电视开了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电视关了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Mediator</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mediator</span>();</span><br><span class="line">        <span class="type">Alarm</span> <span class="variable">alarm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Alarm</span>(mediator, <span class="string">&quot;Alarm&quot;</span>);</span><br><span class="line">        <span class="type">Tv</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tv</span>(mediator, <span class="string">&quot;Tv&quot;</span>);</span><br><span class="line">        alarm.sendMessage(<span class="number">0</span>);</span><br><span class="line">        tv.sendMessage(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>亿级流量多级缓存</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E4%BA%BF%E7%BA%A7%E6%B5%81%E9%87%8F%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h2 id="第一级缓存：DNS域名解析"><a href="#第一级缓存：DNS域名解析" class="headerlink" title="第一级缓存：DNS域名解析"></a>第一级缓存：DNS域名解析</h2><p>客户端访问一个域名的时候，会去DNS服务器上获取域名对应的IP并缓存到本地，一个域名可以对应多个IP</p><p><img src="https://img-blog.csdnimg.cn/20210113220847835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="第二级缓存：Nginx缓存"><a href="#第二级缓存：Nginx缓存" class="headerlink" title="第二级缓存：Nginx缓存"></a>第二级缓存：Nginx缓存</h2><h3 id="Nginx全局共享内存缓存"><a href="#Nginx全局共享内存缓存" class="headerlink" title="Nginx全局共享内存缓存"></a>Nginx全局共享内存缓存</h3><blockquote><p>使用 lua 访问 nginx 的内存，线程越多，性能损耗越大</p><p>不是特别高并发的情况下可以用 shared_dict</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">lua_shared_dict</span> shared_data <span class="number">1m</span>;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> shared_data = ngx.shared.shared_data  </span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> i = shared_data:get(<span class="string">&quot;i&quot;</span>)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> i <span class="keyword">then</span>  </span><br><span class="line">    i = <span class="number">1</span>  </span><br><span class="line">    shared_data:set(<span class="string">&quot;i&quot;</span>, i)  </span><br><span class="line">    ngx.say(<span class="string">&quot;lazy set i &quot;</span>, i, <span class="string">&quot;&lt;br/&gt;&quot;</span>)  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">i = shared_data:incr(<span class="string">&quot;i&quot;</span>, <span class="number">1</span>)  </span><br><span class="line">ngx.say(<span class="string">&quot;i=&quot;</span>, i, <span class="string">&quot;&lt;br/&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="lua-resty-lrucache"><a href="#lua-resty-lrucache" class="headerlink" title="lua-resty-lrucache"></a>lua-resty-lrucache</h3><p>Lua 实现的一个简单的 LRU 缓存，适合在 Lua 空间里直接缓存较为复杂的 Lua 数据结构：</p><p>它相比 ngx_lua 共享内存字典可以省去较昂贵的序列化操作，相比 memcached 这样的外部服务又能省去较昂贵的 socket 操作</p><p>lrucache 有两种实现</p><ul><li>resty.lrucache<ul><li>适合用来缓存命中率高或读操作远远大于写操作的缓存业务</li></ul></li><li>resty.lrucache.pureffi<ul><li>适合用来缓存命中率低或需要对key进行频繁增、删操作的缓存业务</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> lrucache = <span class="built_in">require</span> <span class="string">&quot;resty.lrucache&quot;</span></span><br><span class="line"><span class="keyword">local</span> c, err = lrucache.new(<span class="number">200</span>)</span><br><span class="line">c:set(<span class="string">&quot;dog&quot;</span>, <span class="number">32</span>)</span><br><span class="line">    c:set(<span class="string">&quot;cat&quot;</span>, <span class="number">56</span>)</span><br><span class="line">    ngx.say(<span class="string">&quot;dog: &quot;</span>, c:get(<span class="string">&quot;dog&quot;</span>))</span><br><span class="line">    ngx.say(<span class="string">&quot;cat: &quot;</span>, c:get(<span class="string">&quot;cat&quot;</span>))</span><br><span class="line"></span><br><span class="line">    c:set(<span class="string">&quot;dog&quot;</span>, &#123; age = <span class="number">10</span> &#125;, <span class="number">0.1</span>)  <span class="comment">-- expire in 0.1 sec</span></span><br><span class="line">    c:delete(<span class="string">&quot;dog&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/openresty/lua-resty-lrucache#name">https://github.com/openresty/lua-resty-lrucache#name</a></p><h3 id="URL一致性哈希负载均衡"><a href="#URL一致性哈希负载均衡" class="headerlink" title="URL一致性哈希负载均衡"></a>URL一致性哈希负载均衡</h3><p>nginx url_hash：Nginx第三方模块，在转发请求时如果后端服务器宕机，会导致503错误</p><p>有针对性的对url进行一致性hash 定向负载到后端Nginx </p><p>提高Nginx缓存系统命中率</p><h3 id="Kong-基于Openresty的流量网关"><a href="#Kong-基于Openresty的流量网关" class="headerlink" title="Kong 基于Openresty的流量网关"></a>Kong 基于Openresty的流量网关</h3><p><a href="https://konghq.com/">https://konghq.com/</a></p><p><a href="https://github.com/kong/kong">https://github.com/kong/kong</a></p><p>Kong 基于 OpenResty，是一个云原生、快速、可扩展、分布式的微服务抽象层（Microservice Abstraction Layer），也叫 API 网关（API Gateway），在 Service Mesh 里也叫 API 中间件（API Middleware）。</p><p>Kong 开源于 2015 年，核心价值在于高性能和扩展性。从全球 5000 强的组织统计数据来看，Kong 是现在依然在维护的，在生产环境使用最广泛的 API 网关。</p><p>Kong 宣称自己是世界上最流行的开源微服务 API 网关（The World’s Most Popular Open Source Microservice API Gateway）。</p><p>核心优势：</p><ul><li><p>可扩展：可以方便的通过添加节点水平扩展，这意味着可以在很低的延迟下支持很大的系统负载。</p></li><li><p>模块化：可以通过添加新的插件来扩展 Kong 的能力，这些插件可以通过 RESTful Admin API 来安装和配置。</p></li><li><p>在任何基础架构上运行：Kong 可以在任何地方都能运行，比如在云或混合环境中部署 Kong，单个或全球的数据中心。</p></li></ul><h2 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h2><h3 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h3><p>http1.1支持</p><p>在HTTP协议中If-Modified-Since和If-None-Match分别对应Last-Modified和ETag</p><p>Entity Tag 的缩写，中文译过来就是实体标签的意思.</p><p>HTTP中并没有指定如何生成ETag，哈希是比较理想的选择。</p><p>在计算Etag的时候，会产生CPU的耗费，所以也可以用时间戳，但这样直接使用Last-Modified即可。</p><p>ETag 用来校验用户请求的资源是否有变化，作用和lastmodified很像，区别是lastmodified精确到秒，ETag可以用hash算法来生成更精确的比对内容。</p><p>当用户首次请求资源的时候返回给用户数据和200状态码并生成ETag，再次请求的时候服务器比对ETag，没有发生变化的话返回304</p><h3 id="Cache-Control、-Last-Modified-、Expires"><a href="#Cache-Control、-Last-Modified-、Expires" class="headerlink" title="Cache-Control、 Last-Modified 、Expires"></a>Cache-Control、 Last-Modified 、Expires</h3><p>Last-Modified : 表示文档最后修改时间，浏览器在访问重复资源的时候会发送IF-Modified-Since 携带此时间去服务器验证，如果时间匹配则返回304，浏览器加载本地资源</p><p>Expires： 文档过期时间，在浏览器内可以通过这个时间来判断是否发送请求</p><p>Cache-Control ：http1.1的规范，使用max-age表示文件可以在浏览器中缓存的时间以秒为单位</p><p>Cache-Control：缓存头，分为响应头和请求头</p><table><thead><tr><th>标记</th><th>类型</th><th>功能</th></tr></thead><tbody><tr><td>public</td><td>响应头</td><td>响应的数据可以被缓存，客户端和代理层都可以缓存</td></tr><tr><td>private</td><td>响应头</td><td>可私有缓存，客户端可以缓存，代理层不能缓存（CDN，proxy_pass）</td></tr><tr><td>no-cache</td><td>请求头</td><td>可以使用本地缓存，但是必须发送请求到服务器回源验证</td></tr><tr><td>no-store</td><td>请求和响应</td><td>应禁用缓存</td></tr><tr><td>max-age</td><td>请求和响应</td><td>文件可以在浏览器中缓存的时间以秒为单位</td></tr><tr><td>s-maxage</td><td>请求和响应</td><td>用户代理层缓存，CDN下发，当客户端数据过期时会重新校验</td></tr><tr><td>max-stale</td><td>请求和响应</td><td>缓存最大使用时间，如果缓存过期，但还在这个时间范围内则可以使用缓存数据</td></tr><tr><td>min-fresh</td><td>请求和响应</td><td>缓存最小使用时间，</td></tr><tr><td>must-revalidate</td><td>请求和响应</td><td>当缓存过期后，必须回源重新请求资源。比no-cache更严格。因为HTTP 规范是允许客户端在某些特殊情况下直接使用过期缓存的，比如校验请求发送失败的时候。那么带有must-revalidate的缓存必须校验，其他条件全部失效。</td></tr><tr><td>proxy-revalidate</td><td>请求和响应</td><td>和must-revalidate类似，只对CDN这种代理服务器有效，客户端遇到此头，需要回源验证</td></tr><tr><td>stale-while-revalidate</td><td>响应</td><td>表示在指定时间内可以先使用本地缓存，后台进行异步校验</td></tr><tr><td>stale-if-error</td><td>响应</td><td>在指定时间内，重新验证时返回状态码为5XX的时候，可以用本地缓存</td></tr><tr><td>only-if-cached</td><td>响应</td><td>那么只使用缓存内容，如果没有缓存 则504 getway timeout</td></tr></tbody></table><p>在浏览器和服务器端验证文件是否过期的时候，浏览器在二次请求的时候会携带IF-Modified-Since属性</p><h3 id="Cache-Control和ETag的区别"><a href="#Cache-Control和ETag的区别" class="headerlink" title="Cache-Control和ETag的区别"></a>Cache-Control和ETag的区别</h3><p>Cache-Control直接是通过不请求来实现，而ETag是会发请求的，只不过服务器根据请求的东西的内容有无变化来判断是否返回请求的资源</p><p>java实现Cache-Control Last-Modified</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheController</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">MyFile</span> <span class="variable">file</span> <span class="operator">=</span> MyFile.getInstance();</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">last</span><span class="params">(<span class="meta">@RequestHeader(value=&quot;IF-Modified-Since&quot;,required = false)</span> Date ifModifiedSince)</span> &#123;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;EEE, d MMM yyyy HH:mm:ss &#x27;GMT&#x27;&quot;</span>, Locale.US);</span><br><span class="line"><span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(now);<span class="comment">// 系统当前时间</span></span><br><span class="line"><span class="type">long</span> <span class="variable">maxAge</span> <span class="operator">=</span> <span class="number">20</span>;<span class="comment">// 缓存时间</span></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != ifModifiedSince &amp;&amp; ifModifiedSince.getTime() == file.getLastModified() ) &#123;</span><br><span class="line">System.out.println(<span class="number">304</span>);</span><br><span class="line">&#125;</span><br><span class="line">headers.add(<span class="string">&quot;Date&quot;</span>, simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(now)));</span><br><span class="line">headers.add(<span class="string">&quot;Expires&quot;</span>, simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(now + maxAge * <span class="number">1000</span>)));</span><br><span class="line">headers.add(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;max-age=&quot;</span>+maxAge);</span><br><span class="line">headers.add(<span class="string">&quot;Last-Modified&quot;</span>, simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>(file.getLastModified())));</span><br><span class="line"><span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&lt;a href =&#x27;&#x27;&gt;hi点我&lt;/a&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body,headers,HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFile</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> lastModified;</span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> expireTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MyFile file ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">MyFile</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;file...&quot;</span>;</span><br><span class="line"><span class="built_in">this</span>.lastModified = System.currentTimeMillis() /<span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">this</span>.expireTime = <span class="number">10</span> *<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MyFile <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(file==<span class="literal">null</span>) &#123;</span><br><span class="line">file = <span class="keyword">new</span> <span class="title class_">MyFile</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="强制刷新"><a href="#强制刷新" class="headerlink" title="强制刷新"></a>强制刷新</h3><p>在强制刷新的时候浏览器就不在发送<code>IF-Modified-Since</code>了，而会带上<code>from disk cache &amp; from memory cache</code></p><p>可以验证请求是否使用了浏览器缓存和是否发送请求给服务器端。</p><p>当点击链接、引入外部资源和浏览器的前进后退的时候。</p><p>from memory cache：这个资源是直接从内存中拿到的，<strong>不会请求服务器</strong>一般已经加载过该资源且缓存在了内存当中，当关闭该页面时，此资源就被内存释放掉了，再次重新打开相同页面时不会出现from memory cache的情况</p><p>from disk cache：是从磁盘当中取出的，也是在已经在之前的某个时间加载过该资源，<strong>不会请求服务器</strong>但是此资源不会随着该页面的关闭而释放掉，因为是存在硬盘当中的，下次打开仍会from disk cache</p><p>Age：是CDN添加的属性表示在CDN中缓存了多少秒</p><p>via：用来标识CDN缓存经历了哪些服务器，缓存是否命中，使用的协议</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>漏桶算法、令牌桶算法、计数器</p><h3 id="Tomcat限流"><a href="#Tomcat限流" class="headerlink" title="Tomcat限流"></a>Tomcat限流</h3><p>server.xml 配置文件中的 Connector 节点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">maxConnections</span>=<span class="string">&quot;800&quot;</span> <span class="attr">acceptCount</span>=<span class="string">&quot;500&quot;</span> <span class="attr">maxThreads</span>=<span class="string">&quot;400&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">maxThreads：tomcat能并发处理的最大线程数</span><br><span class="line">acceptCount：tomcat起动的线程数达到最大时，接受排队的请求个数，默认值为100 </span><br><span class="line">maxConnections：瞬时最大连接数，超出会排队等待</span><br></pre></td></tr></table></figure><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>域名由两部分组成，name 和 domain，比如 baidu.com，baidu 是名，com是域</p><p>二级域名：a.baidu.com</p><p>三级域名：b.a.baidu.com</p><p>以此类推</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统设计</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>越早拦截，成本越低，吞吐量越大</p></blockquote><h3 id="判断活动开始"><a href="#判断活动开始" class="headerlink" title="判断活动开始"></a>判断活动开始</h3><p>Redis中存储一个ttl为抢购开始时间的key，各个服务器通过校验key是否过期，来判别活动开始。</p><h3 id="开始抢购"><a href="#开始抢购" class="headerlink" title="开始抢购"></a>开始抢购</h3><p>客户端：按钮置灰，防止重复点击</p><p>网关：通过 Nginx-lua 直接查询 redis，发现超量过多时直接返回用户 “已售空”</p><p>服务端：</p><ol><li>基于 UserId 去重，防止刷单</li><li>缓存预热，将要查询的热点数据先放入redis中，防止大量请求直接打到DB</li><li>维护一个请求计数，只通过比实际库存量稍大的请求到MQ里，其余请求响应 “已售空”</li><li>数据库更新采用乐观锁，防止超卖</li></ol><p>服务端伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MQ 生产者 */</span></span><br><span class="line"><span class="keyword">if</span> (!redis.exists(userId))&#123;<span class="comment">// 过滤重复用户</span></span><br><span class="line">    redis.set(userId, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(redis.decr(goodsId) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;已售空&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mq.convertAndSet(userId, goodsId);<span class="comment">// 将符合条件的用户放到 MQ 消费</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* MQ 消费者 */</span></span><br><span class="line">update my_goods <span class="type">set</span> <span class="variable">stock</span> <span class="operator">=</span> stock - <span class="number">1</span>, version = version + <span class="number">1</span> <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span> <span class="type">and</span> <span class="variable">version</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大型系统设计</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%A4%A7%E5%9E%8B%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="性能瓶颈"><a href="#性能瓶颈" class="headerlink" title="性能瓶颈"></a>性能瓶颈</h2><p>关于性能的几个要点：IO，缓存，限流，资源隔离服务降级</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><ol><li>使用多线程的方式来处理请求</li><li>增加连接数：tomcat、mysql、redis等</li><li>服务无状态，便于横向扩展，扩机器</li><li>让服务能力对等（serviceUrl）</li><li>减少响应时间：异步、缓存、数据库优化、减少微服务调用链、使用长连接替代轮询</li></ol><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ol><li>客户端&#x2F;浏览器缓存：localStorage，sessionStorage</li><li>流量接入层缓存：HttpDNS、Waf、全网CDN</li><li>应用接入层缓存：Nginx静态文件缓存、Nginx动态文件缓存（Openresty + Lua）网关</li><li>应用缓存层：redis</li><li>应用业务层：JVM缓存，MQ</li><li>数据持久层：Mysql</li></ol><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><blockquote><p>在使用缓存和降级都无效的场景，如当达到阈值后限制接口调用频率，访问次数等，在出现服务不可用之前，提前把服务降级，只服务好一部分用户。</p></blockquote><p><strong>计数器算法</strong>：比如线程池大小，数据库连接池大小、nginx连接数等都属于计数器算法</p><p><strong>漏桶算法</strong>：按照固定速率流出请求，流入速率不控制，当桶内请求达到阈值，新请求则被拒绝</p><p><strong>令牌桶算法</strong>：大小固定的令牌桶可自行以恒定的速率源源不断地产生令牌。如果令牌不被消耗，或者被消耗的速度小于产生的速度，令牌就会不断地增多，直到把桶填满。</p><p><strong>并发限流</strong>：设置系统阈总的qps数，Tomcat中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acceptCount 响应连接数</span><br><span class="line">maxConnections 瞬时最大连接数</span><br><span class="line">maxThreads 最大线程数</span><br></pre></td></tr></table></figure><p><strong>接口限流</strong></p><p>接口总数：可以使用atomic类或者semaphore进行限流</p><p>接口时间窗口：可以使用<code>Guava Cache</code>，类似于一个<code>ConcurrentMap</code>，但不完全一样</p><p>最基础的不同是<code>ConcurrentMap</code>保存所有的元素知道它们被明确删除,<code>Guava Cache</code>可以配置自动过期</p><h3 id="guava实现"><a href="#guava实现" class="headerlink" title="guava实现"></a>guava实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>28.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>LoadingCache</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LoadingCache&lt;Long, AtomicLong&gt; counter = CacheBuilder.newBuilder()</span><br><span class="line">    .expireAfterWrite(<span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">    .removalListener(notification -&gt; &#123;</span><br><span class="line">        <span class="comment">// 缓存移除的时候会触发这个监听器</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .build(<span class="keyword">new</span> <span class="title class_">CacheLoader</span>&lt;Long, AtomicLong&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AtomicLong <span class="title function_">load</span><span class="params">(Long second)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;load:&quot;</span> + second);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException &#123;</span><br><span class="line">    <span class="comment">// 使用当前的秒级时间作为key</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">currSecond</span> <span class="operator">=</span> System.currentTimeMillis() / <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">// 模拟执行100次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            <span class="comment">// 每秒最多放行10个请求，否则自旋</span></span><br><span class="line">            <span class="keyword">if</span> (counter.get(currSecond).incrementAndGet() &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>令牌桶实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每秒产生2个令牌</span></span><br><span class="line"><span class="type">RateLimiter</span> <span class="variable">rateLimiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 阻塞的方式获取令牌，返回获取到令牌的时间</span></span><br><span class="line">    System.out.println(rateLimiter.acquire());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源隔离服务降级"><a href="#资源隔离服务降级" class="headerlink" title="资源隔离服务降级"></a>资源隔离服务降级</h2><blockquote><p>某个服务出现故障时，可以隔离故障，阻止传播，防止雪崩</p></blockquote><p>线程隔离：线程池隔离、信号量隔离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;uri, 线程数&gt; map;<span class="comment">// 根据uri分配对应线程数</span></span><br><span class="line">ThreadPoll(线程数) poll;<span class="comment">// 根据线程数创建线程池</span></span><br><span class="line"><span class="keyword">if</span> (线程满了)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br></pre></td></tr></table></figure><p> 服务熔断：计数，连续失败次数达到阈值后熔断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进程隔离：cpu、内存这些资源可以通过不同的虚拟机进程来做隔离，如集群</p><p>集群隔离：如秒杀等计算IO高的服务需要独立拆分模块</p><p>机房隔离异地多活：将服务器整体建立副本在多机房做冷备份，使用DNS，HttpDNS，负载均衡等技术快速切换</p><p>读写分离：mysql，redis等数据存储服务集群化</p><p>动静分离：将静态资源从原有服务中隔离出来</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RBAC权限设计</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/RBAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/RBAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="RBAC-概述"><a href="#RBAC-概述" class="headerlink" title="RBAC 概述"></a>RBAC 概述</h2><p>RBAC模型（Role-Based Access Control：基于角色的访问控制）</p><p>权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。</p><p>权限：具备操作某个事务的能力</p><p>角色：一系列权限的集合</p><h2 id="RBAC-数据库表设计"><a href="#RBAC-数据库表设计" class="headerlink" title="RBAC 数据库表设计"></a>RBAC 数据库表设计</h2><p>用户表：user_id, user_name</p><p>角色表：role_id, role_name</p><p>权限表：permission_id, permission_key</p><p>用户角色关联表：user_id, role_name</p><p>角色权限关联表：role_name, permission_key</p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-单向链表"><a href="#1-单向链表" class="headerlink" title="1. 单向链表"></a>1. 单向链表</h2><p>单向链表是链表的一种，它由节点组成，每个节点都包含下一个节点的指针，下图就是一个单链表，表头为空，表头的后继节点是”结点10”(数据为10的结点)，”节点10”的后继结点是”节点20”(数据为10的结点)，…</p><p><img src="https://pic4.zhimg.com/80/v2-392a58393fd03c2893bfb21b3a7b0d97_1440w.jpg" alt="img"></p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    E element;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;E&gt; tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(e, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            Node&lt;E&gt; tmp = head;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(e, tmp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(e, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = node(index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        Node&lt;E&gt; tmp = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">        Node&lt;E&gt; tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.print((tmp) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    LinkedList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    list.add(<span class="number">0</span>, <span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">    list.add(<span class="number">1</span>, <span class="string">&quot;eee&quot;</span>);</span><br><span class="line">    list.remove(<span class="number">1</span>);</span><br><span class="line">    list.showAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-双向链表"><a href="#2-双向链表" class="headerlink" title="2. 双向链表"></a>2. 双向链表</h2><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。</p><p><img src="https://pic3.zhimg.com/80/v2-2ee9141bae02c577c1143fe42bad1456_1440w.jpg" alt="img"></p><h2 id="3-环形链表"><a href="#3-环形链表" class="headerlink" title="3. 环形链表"></a>3. 环形链表</h2><p>约瑟夫问题：N个人围成一圈，从第一个开始报数，第M个将被出圈，最后剩下一个</p><p>例如N&#x3D;6，M&#x3D;5，出圈的顺序是：5，4，6，2，3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleCircleLinkedListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="type">int</span> no;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> no)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.no = no;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&#123;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        Node first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> num)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">1</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;num must greater then 0&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.size = num;</span><br><span class="line">            <span class="comment">// create circle linked list</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">                    first = node;</span><br><span class="line">                    first.next = first; <span class="comment">// make a circle</span></span><br><span class="line">                    curr = first;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    curr.next = node;</span><br><span class="line">                    node.next = first;</span><br><span class="line">                    curr = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> first;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;The no of node: %d\n&quot;</span>, curr.no);</span><br><span class="line">                <span class="keyword">if</span> (curr.next == first)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 计算出圈顺序</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> count 数几个数字</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">(<span class="type">int</span> count)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (first == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;List is empty&quot;</span>);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> first;</span><br><span class="line">            <span class="keyword">while</span> (curr.next != first) &#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (curr != first) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    first = first.next;</span><br><span class="line">                    curr = curr.next;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;The out no of node: &quot;</span> + first.no);</span><br><span class="line">                <span class="comment">// delete the out node</span></span><br><span class="line">                first = first.next;</span><br><span class="line">                curr.next = first;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Last node: &quot;</span> + first.no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        list.init(<span class="number">5</span>);</span><br><span class="line">        list.showAll();</span><br><span class="line">        System.out.println();</span><br><span class="line">        list.out( <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>递归调用规则：</p><ol><li>当程序执行到一个方法时，就会开辟一个独立的空间（栈）</li><li>每个空间的数据（局部变量）是独立的</li><li>如果方法中使用的是引用类型的变量，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归</li><li>当一个方法执行完毕，或者return，就会返回，遵守谁调用，就将结果返回给谁，同时方法执行完毕或返回时，该方法也就执行完毕</li></ol><p>通过递归解决阶乘问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> factorial(n - <span class="number">1</span>) * n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过递归解决迷宫问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归解决迷宫问题: 求最短路径</span></span><br><span class="line"><span class="comment"> * 策略: 下 右 上 左</span></span><br><span class="line"><span class="comment"> * map[1][1]: 起点</span></span><br><span class="line"><span class="comment"> * map[6][6]: 终点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Maze</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NOT_WALKED</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WALL</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WALKED</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEAD_WAY</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] map = initMaze();</span><br><span class="line">        walk(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        printMap(map);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        printMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] initMaze()&#123;</span><br><span class="line">        <span class="type">int</span>[][] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">8</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = WALL;</span><br><span class="line">            map[<span class="number">7</span>][i] = WALL;</span><br><span class="line">            map[i][<span class="number">0</span>] = WALL;</span><br><span class="line">            map[i][<span class="number">7</span>] = WALL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = WALL;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = WALL;</span><br><span class="line">        map[<span class="number">2</span>][<span class="number">2</span>] = WALL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">walk</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">6</span>] == WALKED)&#123;    <span class="comment">// 表示已经到终点了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (map[i][j] == NOT_WALKED)&#123;   <span class="comment">// 如果可以走</span></span><br><span class="line">            map[i][j] = WALKED;         <span class="comment">// 设置为走过</span></span><br><span class="line">            <span class="keyword">if</span> (walk(map, i + <span class="number">1</span>, j))&#123;           <span class="comment">// 下</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(walk(map, i, j + <span class="number">1</span>))&#123;     <span class="comment">// 右</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (walk(map, i - <span class="number">1</span>, j))&#123;   <span class="comment">// 上</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (walk(map, i, j - <span class="number">1</span>))&#123;    <span class="comment">// 左</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map[i][j] = DEAD_WAY;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMap</span><span class="params">(<span class="type">int</span>[][] map)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">                System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>队列是一个有序列表，可以用数组或链表实现，遵循先进先出原则</p><p>队列分为：单向队列、双向队列</p><h2 id="单向队列"><a href="#单向队列" class="headerlink" title="单向队列"></a>单向队列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleQueue</span> &#123;</span><br><span class="line">    <span class="comment">/* 队列最大大小 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 队列中元素的实际数目 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 头指针 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 尾指针 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 队列数组 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SingleQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Object</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Queue is full, cannot add&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果队列尾部指向顶了，那么循环回来，执行队列的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (rear == maxSize - <span class="number">1</span>) &#123;</span><br><span class="line">                rear = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//队尾指针加1，然后在队尾指针处插入新的数据</span></span><br><span class="line">            array[++rear] = value;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Queue is empty, cannot remove&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> array[front];</span><br><span class="line">        array[front] = <span class="literal">null</span>;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">if</span> (front == maxSize) &#123;</span><br><span class="line">            front = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看队头数据</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否满了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">size</span> <span class="operator">=</span>= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回队列的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：</p><p>insertRight()、insertLeft()、removeLeft()、removeRight()</p><h2 id="环形队列"><a href="#环形队列" class="headerlink" title="环形队列"></a>环形队列</h2><p>数组实现环形队列：尾索引的下一个为头索引时表示队列满</p><ul><li>初始化：数组的front和rear都指向0.</li><li>入队：队不满，先队尾位置传值，再 rear &#x3D; (rear + 1) % maxsize;</li><li>出队：队不空，先取队头位置元素，front &#x3D; (front + 1) % maxsize;</li><li>是否为空：rear &#x3D;&#x3D; front</li><li>大小：(rear + maxsize - front) % maxsize;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CircleQueue</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> arr[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircleQueue</span><span class="params">(<span class="type">int</span> maxSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">rear</span> <span class="operator">=</span>= front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;cannot add element to full queue&quot;</span>);</span><br><span class="line">        arr[rear] = n;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;cannot poll element to empty queue&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> arr[front];</span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> front; i &lt; front + size(); i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (rear - front + maxSize) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最大大小 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 实际大小 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 队列数组 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            array[size++] = value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> size - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; value &gt; array[j]) &#123;</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j + <span class="number">1</span>] = value;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动</span></span><br><span class="line">    <span class="comment">// 被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> size - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> array[k];</span><br><span class="line">        array[k] = -<span class="number">1</span>;  <span class="comment">// -1表示这个位置的数据被移除了</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看优先级最高的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peekMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否满了</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size == maxSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%A0%88/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>线性表的一种，限制仅在线性表的一端进行插入和删除操作</p><p>其中允许插入和删除的一端称为栈顶（top），不允许插入和删除的一端称为栈底（bottom）</p><h2 id="栈的基本操作和代码实现"><a href="#栈的基本操作和代码实现" class="headerlink" title="栈的基本操作和代码实现"></a>栈的基本操作和代码实现</h2><p>基本操作：初始化、判断是否为空、求栈深、读取栈顶元素、出栈&#x2F;入栈、栈置空等。</p><p>抽象出栈的基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IStack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object obj)</span>;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">top</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>栈的顺序存储数据结构Java实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span> <span class="keyword">implements</span> <span class="title class_">IStack</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxsize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> elem[] = <span class="keyword">new</span> <span class="title class_">int</span>[maxsize];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span>&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.栈置空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">    top = <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.判断栈是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top &gt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.进栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == maxsize)</span><br><span class="line">        System.out.print(<span class="string">&quot;stack overflow&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        elem[top++] = data;<span class="comment">//进栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pubic <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        top--;<span class="comment">//栈顶指针减1</span></span><br><span class="line">        <span class="keyword">return</span> elem[top];<span class="comment">//返回原栈顶元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.求栈深操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.读取栈顶元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(top == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> elem[top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链式存储栈"><a href="#链式存储栈" class="headerlink" title="链式存储栈"></a>链式存储栈</h2><p>链栈结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链栈中的数据结点结构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    StackNode next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈的基本操作不变</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedStack</span> <span class="keyword">implements</span> <span class="title class_">IStack</span>&#123;</span><br><span class="line">    StackNode top;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStack</span><span class="params">()</span>&#123;</span><br><span class="line">        top.data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.链栈的进栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="type">StackNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StackNode</span>();</span><br><span class="line">    node.data = data;</span><br><span class="line">    node.next = top;<span class="comment">// 链入新的结点</span></span><br><span class="line">    top = node;<span class="comment">// 修改栈顶指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.链栈的出栈操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="keyword">if</span>(top == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        data = top.data;</span><br><span class="line">        top = top.next;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用场景"><a href="#栈的应用场景" class="headerlink" title="栈的应用场景"></a>栈的应用场景</h2><p>子程序调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</p><p>处理递归调用：和子程序调用类似，只是除了存储下一个指令的地址外，也将参数、区域变量等存入堆栈中。</p><p>表达式转换：中缀表达式转后缀表达式</p><p>图形的深度优先搜索法（depth-first）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> maxSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">top</span> <span class="operator">=</span>= -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Stack is full&quot;</span>);</span><br><span class="line">        top++;</span><br><span class="line">        arr[top] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Stack is Empty&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> arr[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Begin with top when traversing</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀、中缀、后缀表达式"><a href="#前缀、中缀、后缀表达式" class="headerlink" title="前缀、中缀、后缀表达式"></a>前缀、中缀、后缀表达式</h2><ul><li><p>前缀表达式</p><p>从右至左扫描表达式，遇到数字时，将数字压入栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果压入栈，重复上述过程得到最终结果</p><p>例：(3+4)*5-6 的前缀表达式为 - * + 3 4 5 6 </p></li><li><p>中缀表达式</p><p>就是常见的表达式 (3+4)*5-6 </p></li><li><p>后缀表达式（逆波兰表达式）</p><p>从左向右扫描，遇到数字时，将数字压入栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算，并将结果压入栈，重复上述过程直到表达式的最右端</p><p>例：(3+4)*5-6 的后缀表达式为 3 4 + 5 * 6 -</p></li></ul><p><strong>中缀表达式转后缀表达式</strong></p><ol><li><p>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p></li><li><p>从左至右扫描中缀表达式；</p></li><li><p>遇到操作数时，将其压s2；</p></li><li><p>遇到运算符时，比较其与s1栈顶运算符的优先级：</p><ol><li><p>如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</p></li><li><p>否则，若优先级比栈顶运算符的高，也将运算符压入s1；</p></li><li><p>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较；</p></li></ol></li><li><p>遇到括号时：</p><ol><li>如果是左括号“(”，则直接压入s1</li><li>如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</li></ol></li><li><p>重复步骤2至5，直到表达式的最右边</p></li><li><p>将s1中剩余的运算符依次弹出并压入s2</p></li><li><p>依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="线性-x2F-非线性结构"><a href="#线性-x2F-非线性结构" class="headerlink" title="线性&#x2F;非线性结构"></a>线性&#x2F;非线性结构</h2><p><strong>线性结构</strong>：元素之间存在一对一的线性关系，常见的有：数组、队列、链表、栈</p><p>线性结构有两种不同的存储结构：</p><ul><li>顺序表：存储的元素是连续的<ul><li>优点：支持随机存取，存储密度高</li><li>缺点：大片连续空间分配不方便，改变容量不方便</li></ul></li><li>链表：存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息<ul><li>优点：离散的小空间分配方便，改变容量方便</li><li>缺点：不可随机存取，存储密度低</li></ul></li></ul><p><strong>非线性结构</strong>：二维数组，多维数组，广义表，树结构，图结构</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%A0%91/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><strong>二叉树的遍历方式</strong></p><p>前序遍历：先访问根节点，再遍历左子树，最后遍历右子树。时间复杂度 O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>)&#123;</span><br><span class="line">        visit(n);</span><br><span class="line">        preOrder(n.left);</span><br><span class="line">        preOrder(n.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历：先遍历左子树，再访问根节点，最后遍历右子树。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">InOrder</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>)&#123;</span><br><span class="line">        InOrder(n.left);</span><br><span class="line">        visit(n);</span><br><span class="line">        InOrder(n.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历：从左到后从叶子节点遍历左右子树，最后访问根节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>)&#123;</span><br><span class="line">        postOrder(n.left);</span><br><span class="line">        postOrder(n.right)</span><br><span class="line">        visit(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>层次遍历：从根节点一层一层的从左到右遍历整个二叉树树</p><p>算法思想：</p><ol><li>初始将根入队并访问根节点</li><li>若有左子树，则将左子树的根入队</li><li>若有右子树，则将右子树的根入队</li><li>然后出队，访问该节点</li><li>反复这个过程直到队列空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">levelOrder</span><span class="params">(BiTreeNode t)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">Queue&lt;BiTreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;();</span><br><span class="line">BiTreeNode curr;</span><br><span class="line">queue.add(t);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">curr = queue.remove();</span><br><span class="line">System.out.println(curr.value);</span><br><span class="line"><span class="keyword">if</span> (curr.left != <span class="literal">null</span>)</span><br><span class="line">queue.add(curr.left);</span><br><span class="line"><span class="keyword">if</span> (curr.right != <span class="literal">null</span>)</span><br><span class="line">queue.add(curr.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序遍历转换为非递归算法</strong></p><ol><li>初始时依次扫描根节点的所有左侧节点并将它们一一进栈</li><li>出栈一个节点，访问它</li><li>扫描该节点的右孩子节点并将其进栈</li><li>依次扫描右孩子节点的所有左侧节点并一一进栈</li><li>反复该过程直到栈空为止</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">InOrder</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> n;</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack.push(p);</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            visit(stack.pop());</span><br><span class="line">       p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用遍历构造二叉树</strong></p><p>先序 &#x2F; 后序遍历序列 + 中序遍历序列可以确定一棵二叉树</p><p>先序遍历序列 + 后序遍历序列不能确定一棵二叉树</p><p>原因：中序遍历序列可以确定左右子树，先序 &#x2F; 后序 遍历序列可以确定根节点</p><ol><li>在先序序列中，第一个节点是根节点</li><li>根节点将中序遍历序列划分为两部分</li><li>然后在先序序列中确定两部分的节点，并且两部分的第一个节点分别为左子树的根和右子树的根</li><li>在子树中重复递归该过程，便能唯一确定一棵二叉树</li></ol><p><img src="https://img-blog.csdnimg.cn/20210204231919982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><p>根据先序、中序、后序遍历的顺序，实现线索二叉树</p><p>前驱、后继结点：如先序序列 124536，2的前驱结点为1，后继结点为4</p><p>最常用的是中序线索二叉树，因为找前驱结点非常方便</p><ul><li><p>若无左子树，则将左指针指向其前驱结点</p></li><li><p>若无右子树，则将右指针指向其后继结点</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210206204518750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>线索二叉树的结点结构</p><p>这种结点结构构成的二叉链表作为二叉树的存储结构，称为线索链表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object data;<span class="comment">// 数据</span></span><br><span class="line">    <span class="keyword">public</span> Node leftChild;<span class="comment">// 左孩子</span></span><br><span class="line">    <span class="keyword">public</span> Node rightChild;<span class="comment">// 右孩子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> leftTag;<span class="comment">// 左标志位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> rightTag;<span class="comment">// 右标志位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序线索二叉树线索化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 传入线索二叉树的根结点 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createInThread</span><span class="params">(Node n)</span>&#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="literal">null</span>)&#123;</span><br><span class="line">        InThread(n, pre);</span><br><span class="line">        <span class="comment">// 将最后两个根结点的右孩子置为空，右标志位置为1</span></span><br><span class="line">        pre.rightChild = <span class="literal">null</span>;</span><br><span class="line">        pre.rightTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">inThread</span><span class="params">(Node p, Node pre)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">null</span>)&#123;</span><br><span class="line">        InThread(p.leftChild, pre);</span><br><span class="line">        <span class="keyword">if</span> (p.leftChild == <span class="literal">null</span>)&#123;</span><br><span class="line">            p.leftChild = pre;</span><br><span class="line">            p.leftTag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.rightChild == <span class="literal">null</span>)&#123;</span><br><span class="line">        pre.rightChild = p;</span><br><span class="line">        pre.rightTag = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = p;</span><br><span class="line">    InThread(p.rightChild, pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><blockquote><p>BST，也称二叉查找树</p></blockquote><ul><li><p>若左子树非空，则左子树上所有结点关键字均小于根结点的关键字</p></li><li><p>若右子树非空，则右子树上所有结点关键字均大于根结点的关键字</p></li><li><p>左右子树本身也分别是一棵二叉排序树</p></li></ul><p><strong>二叉排序树案例</strong></p><p>左子树结点值 &lt; 根结点值 &lt; 右子树结点值</p><p>二叉排序树中序遍历序列是一个递增的有序序列</p><p><img src="https://img-blog.csdnimg.cn/20210206213633852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><blockquote><p>AVL 树，任意结点的平衡因子绝对值不超过1</p><p>平衡因子 &#x3D; 左子树高度 - 右子树高度</p></blockquote><p>计算高度为 h 的最小平衡二叉树的结点数 N(h)</p><p>N(h) &#x3D; N(h-1) + N(h-2) + 1</p><p>N(0) &#x3D; 0</p><p>N(1) &#x3D; 1</p><p><strong>LL平衡旋转</strong></p><p>当插入结点不满足平衡时，平衡二叉树会对其进行调整，调整方式：</p><p>右旋：将 A 的左孩子 B 代替 A，将 A 结点称为 B 的右子树根结点，而 B 的原右子树则作为 A 的左子树</p><p>左旋：将 A 的右孩子 B 代替 A，将 A 结点称为 B 的左子树根结点，而 B 的原左子树则作为 A 的右子树</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><blockquote><p>也称最优二叉树，含有 n 个带权叶子结点带权路径长度最小的二叉树</p></blockquote><p>路径长度：路径上所经历边的个数</p><p>结点的权：结点被赋予的数值</p><p>树的带权路径长度：WPL，树中所有叶结点的带权路径长度之和</p><p><img src="https://img-blog.csdnimg.cn/20210206215016264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>最长子树不超过最短子树的两倍，损失部分查询性能提升插入性能，可能导致树的高度过高</p><p>左旋：逆时针旋转，父节点被右孩子取代，而自己成功自己的左孩子</p><p>右旋：顺时针旋转，父节点被左孩子取代，而自己成为自己的右孩子</p><p><img src="https://img-blog.csdnimg.cn/20200209094426919.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><blockquote><p>横向存储更多数据</p></blockquote><ul><li>所有键值分布在整棵树中</li><li>搜索有可能在非叶子结点结束，在关键字全集内做一次查找,性能逼近二分查找</li><li>每个节点最多拥有m个子树</li><li>根节点最少有两个子树</li><li>分支节点至少拥有m&#x2F;2颗子树（除根节点和叶子节点外都是分支节点）</li><li>所有叶子节点都在同一层、每个节点最多可以有m-1个key，并且以升序排列</li></ul><p><img src="https://img-blog.csdnimg.cn/20210123104042810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><blockquote><p>B树变种</p></blockquote><ul><li>非叶子节点不存储data，值存储索引（冗余），可以放更多的索引。</li><li>叶子节点包含所有索引字段。</li><li>叶子节点用指针连接，提高访问的性能。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020710474436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>时间空间复杂度</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-时间复杂度"><a href="#1-时间复杂度" class="headerlink" title="1. 时间复杂度"></a>1. 时间复杂度</h2><p><img src="https://img-blog.csdnimg.cn/20201216220144701.png" alt="在这里插入图片描述"></p><p>常对幂指阶：常数级&lt;对数级&lt;幂数级&lt;指数级&lt;阶乘</p><p>结论1：顺序执行的代码只影响常数项，可以忽略</p><p>结论2：只需挑循环中的一个基本操作分析它的执行次数与n的关系即可</p><p>练习：计算时间复杂度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">loveYou</span><span class="params">(<span class="type">int</span> n)</span>&#123;<span class="comment">// n为问题规模</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">        i = i * <span class="number">2</span>;</span><br><span class="line">        printf(<span class="string">&quot;I love you %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设总循环的次数为x，则由循环条件可知，循环结束刚好满足2^x &gt; n</p><p>x &#x3D; log₂n + 1</p><p>T(n) &#x3D; O(log₂n)</p><h2 id="2-空间复杂度"><a href="#2-空间复杂度" class="headerlink" title="2. 空间复杂度"></a>2. 空间复杂度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S(n) = O(1)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S(n) = O(n)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> arr[n];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// S(n) = O(n²)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr1[n][n];</span><br><span class="line"><span class="type">int</span> arr2[n];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归调用空间复杂度：空间复杂度 &#x3D; 递归调用的深度</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法分类"><a href="#排序算法分类" class="headerlink" title="排序算法分类"></a>排序算法分类</h2><ul><li><strong>比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此也称为非线性时间比较类排序。</li><li><strong>非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此也称为线性时间非比较类排序。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210207105306939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzMwNDMxNjgtMTg2NzgxNzg2OS5wbmc?x-oss-process=image/format,png" alt="img"></p><p><strong>术语说明</strong></p><ul><li>稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</li><li>不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</li><li>内排序：所有排序操作都在内存中完成；</li><li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li>时间复杂度： 一个算法执行所耗费的时间。</li><li>空间复杂度：运行完一个程序所需内存的大小。</li></ul><p><strong>图片名词解释</strong></p><ul><li>n: 数据规模</li><li>k: “桶”的个数</li><li>In-place: 占用常数内存，不占用额外内存</li><li>Out-place: 占用额外内存</li></ul><h2 id="十种排序算法"><a href="#十种排序算法" class="headerlink" title="十种排序算法"></a>十种排序算法</h2><h3 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p><h4 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h4><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><h4 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105442865.gif" alt="在这里插入图片描述"></p><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[j + <span class="number">1</span>];</span><br><span class="line">                array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">                array[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h3><p>选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 </p><h4 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h4><p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i&#x3D;1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h4 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105727587.gif" alt="在这里插入图片描述"></p><h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectionSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j] &lt; array[minIndex]) <span class="comment">//找到最小的数</span></span><br><span class="line">                minIndex = j; <span class="comment">//将最小数的索引保存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[minIndex];</span><br><span class="line">        array[minIndex] = array[i];</span><br><span class="line">        array[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h3 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h3><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h4 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h4><p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h4 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105758399.gif" alt="在这里插入图片描述"></p><h4 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertionSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    <span class="type">int</span> current;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        current = array[i + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class="line">            array[preIndex + <span class="number">1</span>] = array[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-算法分析"><a href="#3-4-算法分析" class="headerlink" title="3.4 算法分析"></a>3.4 算法分析</h4><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><h4 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h4><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk&#x3D;1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h4 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105815955.gif" alt="在这里插入图片描述"></p><h4 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] shellSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> array.length;</span><br><span class="line">    <span class="type">int</span> temp, gap = len / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; len; i++) &#123;</span><br><span class="line">            temp = array[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> i - gap;</span><br><span class="line">            <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class="line">                array[preIndex + gap] = array[preIndex];</span><br><span class="line">                preIndex -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            array[preIndex + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h4><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。　</p><h3 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h3><p>归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2路归并。 </p><h4 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h4><ul><li>把长度为n的输入序列分成两个长度为n&#x2F;2的子序列</li><li>对这两个子序列分别采用归并排序</li><li>将两个排序好的子序列合并成一个最终的排序序列</li></ul><h4 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105842366.gif" alt="在这里插入图片描述"></p><h4 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] MergeSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> array.length / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span>[] left = Arrays.copyOfRange(array, <span class="number">0</span>, mid);</span><br><span class="line">    <span class="type">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);</span><br><span class="line">    <span class="keyword">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] merge(<span class="type">int</span>[] left, <span class="type">int</span>[] right) &#123;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[left.length + right.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; index &lt; result.length; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= left.length)</span><br><span class="line">            result[index] = right[j++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= right.length)</span><br><span class="line">            result[index] = left[i++];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &gt; right[j])</span><br><span class="line">            result[index] = right[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result[index] = left[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h4><p>归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h3 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h3><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h4 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h4><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序</li></ul><h4 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105900736.gif" alt="在这里插入图片描述"></p><h4 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] QuickSort(<span class="type">int</span>[] array, <span class="type">int</span> start, <span class="type">int</span> end) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length &lt; <span class="number">1</span> || start &lt; <span class="number">0</span> || end &gt;= array.length || start &gt; end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">smallIndex</span> <span class="operator">=</span> partition(array, start, end);</span><br><span class="line">    <span class="keyword">if</span> (smallIndex &gt; start)</span><br><span class="line">        QuickSort(array, start, smallIndex - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (smallIndex &lt; end)</span><br><span class="line">        QuickSort(array, smallIndex + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> (<span class="type">int</span>) (start + Math.random() * (end - start + <span class="number">1</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">smallIndex</span> <span class="operator">=</span> start - <span class="number">1</span>;</span><br><span class="line">    swap(array, pivot, end);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++)</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt;= array[end]) &#123;</span><br><span class="line">            smallIndex++;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; smallIndex)</span><br><span class="line">                swap(array, i, smallIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> smallIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h3><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h4 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h4><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;&#x3D;R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><h4 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105917305.gif" alt="在这里插入图片描述"></p><h4 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 声明全局变量，用于记录数组array的长度 */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] HeapSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    len = array.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">1</span>) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// 构建一个最大堆</span></span><br><span class="line">    buildMaxHeap(array);</span><br><span class="line">    <span class="comment">// 循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        swap(array, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(array, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 建立最大堆 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buildMaxHeap</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="comment">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (len / <span class="number">2</span> - <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(array, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调整使之成为最大堆 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="comment">// 如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> &lt; len &amp;&amp; array[i * <span class="number">2</span>] &gt; array[maxIndex])</span><br><span class="line">        maxIndex = i * <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt; len &amp;&amp; array[i * <span class="number">2</span> + <span class="number">1</span>] &gt; array[maxIndex])</span><br><span class="line">        maxIndex = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class="line">    <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">        swap(array, maxIndex, i);</span><br><span class="line">        adjustHeap(array, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h3><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h4 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h4><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><h4 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207105945567.gif" alt="在这里插入图片描述"></p><h4 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] countingSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length == <span class="number">0</span>) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="type">int</span> bias, min = array[<span class="number">0</span>], max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">            max = array[i];</span><br><span class="line">        <span class="keyword">if</span> (array[i] &lt; min)</span><br><span class="line">            min = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    bias = <span class="number">0</span> - min;</span><br><span class="line">    <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">    Arrays.fill(bucket, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        bucket[array[i] + bias]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (index &lt; array.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucket[i] != <span class="number">0</span>) &#123;</span><br><span class="line">            array[index] = i - bias;</span><br><span class="line">            bucket[i]--;</span><br><span class="line">            index++;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h4><p>计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h3 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h4 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h4><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><h4 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h4><p><img src="https://img-blog.csdnimg.cn/20210207110011683.gif" alt="在这里插入图片描述"></p><h4 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title function_">BucketSort</span><span class="params">(ArrayList&lt;Integer&gt; array, <span class="type">int</span> bucketSize)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span> || array.size() &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array.get(<span class="number">0</span>), min = array.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 找到最大值最小值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array.get(i) &gt; max)</span><br><span class="line">            max = array.get(i);</span><br><span class="line">        <span class="keyword">if</span> (array.get(i) &lt; min)</span><br><span class="line">            min = array.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bucketCount</span> <span class="operator">=</span> (max - min) / bucketSize + <span class="number">1</span>;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketCount);</span><br><span class="line">    ArrayList&lt;Integer&gt; resultArr = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">        bucketArr.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">        bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bucketSize == <span class="number">1</span>) &#123; <span class="comment">// 如果带排序数组中有重复数字时  感谢 @见风任然是风 朋友指出错误</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketArr.get(i).size(); j++)</span><br><span class="line">                resultArr.add(bucketArr.get(i).get(j));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucketCount == <span class="number">1</span>)</span><br><span class="line">                bucketSize--;</span><br><span class="line">            ArrayList&lt;Integer&gt; temp = BucketSort(bucketArr.get(i), bucketSize);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; temp.size(); j++)</span><br><span class="line">                resultArr.add(temp.get(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h4><p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 </p><h3 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h3><p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h4 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h4><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><h4 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h4><p><img src="https://img-blog.csdnimg.cn/2021020711004592.gif" alt="在这里插入图片描述"></p><h4 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] RadixSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (array == <span class="literal">null</span> || array.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">// 先算出最大数的位数；</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        max = Math.max(max, array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxDigit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">        max /= <span class="number">10</span>;</span><br><span class="line">        maxDigit++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="number">10</span>, div = <span class="number">1</span>;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        bucketList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDigit; i++, mod *= <span class="number">10</span>, div *= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (array[j] % mod) / div;</span><br><span class="line">            bucketList.get(num).add(array[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketList.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketList.get(j).size(); k++)</span><br><span class="line">                array[index++] = bucketList.get(j).get(k);</span><br><span class="line">            bucketList.get(j).clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h4><p>基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。</p><p>基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="外排序"><a href="#外排序" class="headerlink" title="外排序"></a>外排序</h3><p>传统的排序算法一般指内排序算法，针对的是数据可以一次全部载入内存中的情况。但是面对海量数据，即数据不可能一次全部载入内存，需要用到外排序的方法。外排序采用分块的方法（分而治之），首先将数据分块，对块内数据按选择一种高效的内排序策略进行排序。然后采用归并排序的思想对于所有的块进行排序，得到所有数据的一个有序序列。</p><p>例如，考虑一个1G文件，可用内存100M的排序方法。首先将文件分成10个100M，并依次载入内存中进行排序，最后结果存入硬盘。得到的是10个分别排序的文件。接着从每个文件载入9M的数据到输入缓存区，输出缓存区大小为10M。对输入缓存区的数据进行归并排序，输出缓存区写满之后写在硬盘上，缓存区清空继续写接下来的数据。对于输入缓存区，当一个块的9M数据全部使用完，载入该块接下来的9M数据，一直到所有的9个块的所有数据都已经被载入到内存中被处理过。最后我们得到的是一个1G的排序好的存在硬盘上的文件。</p><p><strong>1TB数据使用32GB内存如何排序</strong> </p><ol><li>把磁盘上的1TB数据分割为40块（chunks），每份25GB。（注意，要留一些系统空间！） </li><li>顺序将每份25GB数据读入内存，使用quick sort算法排序。 </li><li>把排序好的数据（也是25GB）存放回磁盘。 </li><li>循环40次，现在，所有的40个块都已经各自排序了。（剩下的工作就是如何把它们合并排序！） </li><li>从40个块中分别读取25G&#x2F;40&#x3D;0.625G入内存（40 input buffers）。 </li><li>执行40路合并，并将合并结果临时存储于2GB 基于内存的输出缓冲区中。当缓冲区写满2GB时，写入硬盘上最终文件，并清空输出缓冲区；当40个输入缓冲区中任何一个处理完毕时，写入该缓冲区所对应的块中的下一个0.625GB，直到全部处理完成。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>串</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E4%B8%B2/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串模式匹配"><a href="#字符串模式匹配" class="headerlink" title="字符串模式匹配"></a>字符串模式匹配</h2><h3 id="暴力匹配"><a href="#暴力匹配" class="headerlink" title="暴力匹配"></a>暴力匹配</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str, String subStr)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] s = str.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] t = subStr.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.length &amp;&amp; j &lt; t.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == t[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - (j - <span class="number">1</span>);<span class="comment">// 每次比对失败回溯到开始节点+1的位置</span></span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == t.length)</span><br><span class="line">        <span class="keyword">return</span> (i - j);     <span class="comment">//主串中存在该模式返回下标号</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;          <span class="comment">//主串中不存在该模式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><blockquote><p>用于字符串子串的查找，通过消除回溯来提高匹配效率</p></blockquote><p>对于每模式串 t 的每个元素 t[i]，都存在一个实数 k ，使得模式串 t 开头的 k 个字符依次与 t[i] 前面的 k 个字符相同，如果这样的 k 有多个，则取最大的一个。</p><p>如果 j &#x3D; k 时才发现匹配失败，说明 1 ~ k - 1 都匹配成功</p><p><img src="https://img-blog.csdnimg.cn/2021020420593768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String s, String t)</span>&#123;</span><br><span class="line">    <span class="type">char</span>[] s_arr = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] t_arr = t.toCharArray();</span><br><span class="line">    <span class="type">int</span>[] next = getNextArray(t_arr);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;s_arr.length &amp;&amp; j&lt;t_arr.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j == -<span class="number">1</span> || s_arr[i]==t_arr[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == t_arr.length)</span><br><span class="line">        <span class="keyword">return</span> i-j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getNextArray(<span class="type">char</span>[] t) &#123;</span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[t.length];</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; t.length; j++) &#123;</span><br><span class="line">        k=next[j-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span> (k!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t[j - <span class="number">1</span>] == t[k]) &#123;</span><br><span class="line">                next[j] = k + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">            next[j] = <span class="number">0</span>;  <span class="comment">//当k==-1而跳出循环时，next[j] = 0，否则next[j]会在break之前被赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/swan-blog/2022/07/26/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h2><blockquote><p>递推其实是一种最简单的状态转移</p></blockquote><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>给定一个 n (0&lt;&#x3D;n&lt;&#x3D;30)，求斐波那契数列的第n项</p><p>递推公式 <code>f[i] = f[i - 1] + f[i - 2] </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    f = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h3 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h3><p>给定一个n (0&lt;&#x3D;n&lt;&#x3D;45) 代表总共有n阶楼梯，一开始在第0阶，每次可以爬1或2个台阶，问总共有多少种不同的方法可以爬到楼顶。</p><p>递推公式 <code>f[i] = f[i - 1] + f[i - 2] </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">climb_stairs</span>(<span class="params">n</span>):</span><br><span class="line">    arr = [<span class="number">1</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> arr[n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(climb_stairs(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><blockquote><p>状态数和时间复杂度呈线性关系，O(n)</p><p>状态转移的时间复杂度是 O(1)，即状态转移的时间与n无关</p></blockquote><h3 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h3><ol><li>设计状态</li><li>写出状态转移方程</li><li>设定初始状态</li><li>执行状态转移</li><li>返回最终解</li></ol><h3 id="爬楼梯最低花费"><a href="#爬楼梯最低花费" class="headerlink" title="爬楼梯最低花费"></a>爬楼梯最低花费</h3><p>给定一个n (n&lt;&#x3D;1000) ，再给定一个n个整数的数组cost， 其中cost[i]是从楼梯第i个台阶向上爬需要支付的费用。一旦支付此费用，即可选择向上爬一个或者两个台阶。可以选择从下标为0或下标为1的台阶开始爬楼梯，请计算并返回达到楼梯顶部的最低花费。</p><p>由于每次只能爬1个或者2个台阶，所以 这个状态只能 <code>f[i - 1]</code> 或者 <code>f[i - 2]</code> 转移过来：</p><ol><li><p>如果从<code>i - 1</code>爬上来，需要的花费就是：<code>f[i - 1] + cost[i - 1]</code></p></li><li><p>如果从<code>i - 2</code>爬上来，需要的花费就是：<code>f[i - 2] + cost[i - 2]</code></p></li></ol><p>得到状态转移方程：<code>f[i] = min(f[i - 1] + cost[i - 1], f[i - 2] + cost[i - 2])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">climb_stairs_cost</span>(<span class="params">n, cost</span>):</span><br><span class="line">    arr = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        arr[i] = <span class="built_in">min</span>(arr[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], arr[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>])</span><br><span class="line">    <span class="keyword">return</span> arr[n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(climb_stairs_cost(<span class="number">10</span>, [<span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">11</span>]))</span><br></pre></td></tr></table></figure><h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><blockquote><p><a href="https://leetcode.cn/problems/house-robber">https://leetcode.cn/problems/house-robber</a></p></blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><ol><li>定义一个状态数组  <code>dp[i]</code> 表示前 <code>i</code> 个整数通过某种选取方案能够获得的最大值</li><li>如果第 <code>i</code> 个整数不取，那么第 <code>i - 1</code> 有取和不取两种情况，于是转换成了 <code>dp[i - 1]</code> 的子问题</li><li>如果第 <code>i</code> 个整数取，那么第 <code>i - 1</code> 个整数肯定不能取，但是第 <code>i - 2</code> 个整数有取和不取两种情况，于是转换成了 <code>dp[i - 2]</code> 的子问题</li><li>得到状态转移方程：<code>dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])</code></li><li>初始状态：<code>dp[0] = nums[0]</code> , <code>dp[1] = max(nums[0], nums[1])</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">    dp = [<span class="number">0</span>] * n</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rob([<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h3 id="删除并获得点数"><a href="#删除并获得点数" class="headerlink" title="删除并获得点数"></a>删除并获得点数</h3><blockquote><p><a href="https://leetcode.cn/problems/delete-and-earn/">https://leetcode.cn/problems/delete-and-earn/</a></p></blockquote><p>给你一个整数数组 nums ，你可以对它进行一些操作。</p><p>每次操作中，选择任意一个 nums[i] ，删除它并获得 nums[i] 的点数。之后，你必须删除 所有 等于 nums[i] - 1 和 nums[i] + 1 的元素。</p><p>开始你拥有 0 个点数。返回你能通过这些操作获得的最大点数。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,4,2]</span><br><span class="line">输出：6</span><br><span class="line">解释：</span><br><span class="line">删除 4 获得 4 个点数，因此 3 也被删除。</span><br><span class="line">之后，删除 2 获得 2 个点数。总共获得 6 个点数。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><ol><li>将所有数字映射到数组<code>val</code>中，数组下标为数字的值，数组的值为数字出现的次数</li><li>那么问题就演变成了上面打家劫舍的问题，即相邻的不能同时计算</li><li>再准备一个数组<code>sum</code>，将数组<code>val</code>的值求和：数组下标×数组值</li><li>以<code>sum</code>为参数沿用打家劫舍逻辑</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete_and_earn</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    val = [<span class="number">0</span>] * <span class="number">10001</span></span><br><span class="line">    <span class="built_in">sum</span> = [<span class="number">0</span>] * <span class="number">10001</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        val[nums[i]] = val[nums[i]] + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10001</span>):</span><br><span class="line">        <span class="built_in">sum</span>[i] = i * val[i]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">len</span>(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">sum</span>[<span class="number">0</span>], <span class="built_in">sum</span>[<span class="number">1</span>])</span><br><span class="line">    dp = [<span class="number">0</span>] * n</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="built_in">sum</span>[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="built_in">max</span>(<span class="built_in">sum</span>[<span class="number">0</span>], <span class="built_in">sum</span>[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + <span class="built_in">sum</span>[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(delete_and_earn([<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h3 id="买卖股票的最佳时机（前缀最值）"><a href="#买卖股票的最佳时机（前缀最值）" class="headerlink" title="买卖股票的最佳时机（前缀最值）"></a>买卖股票的最佳时机（前缀最值）</h3><p>给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><ol><li>定义一个状态数组  <code>dp[i]</code> 表示前 <code>i</code> 个元素的最小值，<code>dp[i - 1]</code>表示前<code>i - 1</code>个元素的最小值</li><li>那么前<code>i</code>个元素最小值就是 <code>dp[i] = min(dp[i - 1], prices[i])</code></li><li>定义初始状态 <code>dp[0] = prices[0]</code></li><li>得到最小价格的状态数组<code>dp</code></li><li>依次对比每个价格及其之前的最小价格的差值，得到最大利润</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_profit</span>(<span class="params">prices</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(prices)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dp = [prices[<span class="number">0</span>]] + [<span class="number">0</span>] * (n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>], prices[i])</span><br><span class="line">    maximum_profit = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        maximum_profit = <span class="built_in">max</span>(maximum_profit, prices[i] - dp[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> maximum_profit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(max_profit([<span class="number">7</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure><h3 id="将每个元素替换为右侧最大元素（后缀最值）"><a href="#将每个元素替换为右侧最大元素（后缀最值）" class="headerlink" title="将每个元素替换为右侧最大元素（后缀最值）"></a>将每个元素替换为右侧最大元素（后缀最值）</h3><blockquote><p><a href="https://leetcode.cn/problems/replace-elements-with-greatest-element-on-right-side/">https://leetcode.cn/problems/replace-elements-with-greatest-element-on-right-side/</a></p></blockquote><p>给你一个数组 <code>arr</code> ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 <code>-1</code> 替换。</p><p>完成所有替换操作后，请你返回这个数组。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [17,18,5,4,6,1]</span><br><span class="line">输出：[18,6,6,6,1,-1]</span><br><span class="line">解释：</span><br><span class="line">- 下标 0 的元素 --&gt; 右侧最大元素是下标 1 的元素 (18)</span><br><span class="line">- 下标 1 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)</span><br><span class="line">- 下标 2 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)</span><br><span class="line">- 下标 3 的元素 --&gt; 右侧最大元素是下标 4 的元素 (6)</span><br><span class="line">- 下标 4 的元素 --&gt; 右侧最大元素是下标 5 的元素 (1)</span><br><span class="line">- 下标 5 的元素 --&gt; 右侧没有其他元素，替换为 -1</span><br></pre></td></tr></table></figure><p><strong>解答：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [<span class="number">0</span>] * (n - <span class="number">1</span>) + [-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">0</span>, n - <span class="number">1</span>)):</span><br><span class="line">        dp[i] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>], nums[i])</span><br><span class="line">    <span class="keyword">return</span> dp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f([<span class="number">17</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="找到最大的递增序列长度"><a href="#找到最大的递增序列长度" class="headerlink" title="找到最大的递增序列长度"></a>找到最大的递增序列长度</h3><p>给定一个数组 [1, 5, 2, 4, 3]，找到其最大的递增序列长度：3</p><p>数字1的执行过程：1与5、2、4、3比较，5与2 4 3比较，2与4 3比较，4与3比较</p><p>5的执行过程：5与2 4 3比较，2与4 3比较，4与3比较</p><p>依次类推…</p><p>得到递归树：</p><img src="https://img-blog.csdnimg.cn/e7e0c3a0f1974e0381afba2bb99f86f9.png" alt="在这里插入图片描述" style="zoom:25%;" /><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">nums, cur</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :return: the length of longest increasing subsequence from cur.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> cur == <span class="built_in">len</span>(nums) - <span class="number">1</span>:  <span class="comment"># if current value is the last one, return 1.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    max_len = <span class="number">1</span>  <span class="comment"># init max_len as 1.</span></span><br><span class="line">    <span class="keyword">for</span> nxt <span class="keyword">in</span> <span class="built_in">range</span>(cur + <span class="number">1</span>, <span class="built_in">len</span>(nums)):  <span class="comment"># find next items one by one</span></span><br><span class="line">        <span class="keyword">if</span> nums[nxt] &gt; nums[cur]:  <span class="comment"># if next item &gt; curr item</span></span><br><span class="line">            max_len = <span class="built_in">max</span>(max_len, f(nums, nxt) + <span class="number">1</span>)  <span class="comment"># recursion get the max length</span></span><br><span class="line">    <span class="keyword">return</span> max_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_length</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f(nums, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_length = get_max_length(arr)</span><br><span class="line"><span class="built_in">print</span>(max_length)</span><br></pre></td></tr></table></figure><h4 id="带备忘录的递归（递归树的剪枝）实现"><a href="#带备忘录的递归（递归树的剪枝）实现" class="headerlink" title="带备忘录的递归（递归树的剪枝）实现"></a>带备忘录的递归（递归树的剪枝）实现</h4><p>递归实现的缺陷是会重复执行前面已经执行过的操作，而我们可以使用memo将前面已经计算得出的长度保存下来，下次递归的时候直接返回即可。</p><p>如 f(0) &#x3D; 3, f(1) &#x3D; 1, f(2) &#x3D; 2, f(3) &#x3D; 1, f(4) &#x3D; 1</p><p>在递归计算 f(0) 的时候其实已经递归计算了 f(1) - f(4) 了，那么从f(1)开始就不用计算长度了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">nums, cur</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :return: the length of longest increasing subsequence from cur. If value exist in memo, return directly.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    memo = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> cur <span class="keyword">in</span> memo:</span><br><span class="line">        <span class="keyword">return</span> memo[cur]</span><br><span class="line">    <span class="keyword">if</span> cur == <span class="built_in">len</span>(nums) - <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    max_len = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> nxt <span class="keyword">in</span> <span class="built_in">range</span>(cur + <span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[nxt] &gt; nums[cur]:</span><br><span class="line">            max_len = <span class="built_in">max</span>(max_len, f(nums, nxt) + <span class="number">1</span>)</span><br><span class="line">    memo[cur] = max_len</span><br><span class="line">    <span class="keyword">return</span> max_len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_length</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(f(nums, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_length = get_max_length(arr)</span><br><span class="line"><span class="built_in">print</span>(max_length)</span><br></pre></td></tr></table></figure><h4 id="动态规划实现"><a href="#动态规划实现" class="headerlink" title="动态规划实现"></a>动态规划实现</h4><p>由上述递归方式，我们可以归纳出这样一个结论：</p><blockquote><p>f(0) &#x3D; max{f(1), f(2), f(3), f(4)} + 1<br>f(1) &#x3D; max{f(2), f(3), f(4)} + 1<br>f(2) &#x3D; max{f(3), f(4)} + 1<br>f(3) &#x3D; max{f(4)} + 1<br>f(4) &#x3D; 1</p></blockquote><p>那么只要从后往前推导就可以解决这个问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_max_length</span>(<span class="params">nums</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(nums)  <span class="comment"># n = 5</span></span><br><span class="line">    arr = [<span class="number">1</span>] * n  <span class="comment"># [1, 1, 1, 1, 1]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(n)):  <span class="comment"># i -&gt; 4,3,2,1,0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[i]:</span><br><span class="line">                arr[i] = <span class="built_in">max</span>(arr[i], arr[j] + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(arr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_length = get_max_length([<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(max_length)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>收藏等于学了</title>
      <link href="/swan-blog/2022/07/26/%E6%94%B6%E8%97%8F%E7%AD%89%E4%BA%8E%E5%AD%A6%E4%BA%86/"/>
      <url>/swan-blog/2022/07/26/%E6%94%B6%E8%97%8F%E7%AD%89%E4%BA%8E%E5%AD%A6%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>Java全栈知识体系</p><p><a href="https://pdai.tech/">https://pdai.tech/</a></p><p>为什么这么设计系列文章</p><p><a href="https://draveness.me/whys-the-design/">https://draveness.me/whys-the-design/</a></p><p>为什么LongAdder比Atomic性能高</p><p><a href="https://mp.weixin.qq.com/s/ND0a6qm98QtuIWNYgF7U3A">https://mp.weixin.qq.com/s/ND0a6qm98QtuIWNYgF7U3A</a></p><p>Java8使用@sun.misc.Contended避免伪共享</p><p><a href="https://www.jianshu.com/p/c3c108c3dcfd">https://www.jianshu.com/p/c3c108c3dcfd</a></p><p>理解CPU Cache</p><p><a href="https://www.jianshu.com/p/900554f11881">https://www.jianshu.com/p/900554f11881</a></p><p>虚拟内存</p><p><a href="https://juejin.cn/post/6990237426903957540#heading-6">https://juejin.cn/post/6990237426903957540#heading-6</a></p><p>系统设计</p><p><a href="https://www.raychase.net/?s=%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1">https://www.raychase.net/?s=%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Webpack/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><h2 id="1-npm的基本使用"><a href="#1-npm的基本使用" class="headerlink" title="1. npm的基本使用"></a>1. npm的基本使用</h2><p><strong>npm初始化</strong> </p><p>npm init -y</p><p><strong>npm安装jquery</strong></p><p>npm i jquery -S</p><p>-S： –save（保存）</p><p>包名会被注册在package.json的dependencies里面，在生产环境下这个包的依赖依然存在。</p><p>-D：–dev（开发）</p><p>包名会被注册在package.json的devDependencies里面，仅在开发环境下存在的包。</p><h2 id="2-Webpack的基本使用"><a href="#2-Webpack的基本使用" class="headerlink" title="2 Webpack的基本使用"></a>2 Webpack的基本使用</h2><h3 id="2-1-在项目中安装和配置Webpack"><a href="#2-1-在项目中安装和配置Webpack" class="headerlink" title="2.1 在项目中安装和配置Webpack"></a>2.1 在项目中安装和配置Webpack</h3><ol><li>安装webpack相关的包</li></ol><p>  npm i webpack webpack-cli -D</p><ol start="2"><li><p>在项目的根目录中，创建 webpack.config.js 配置文件</p></li><li><p>在 webpack 配置文件中，初始化如下基本配置</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"> <span class="comment">// mode 用来指定构建模式</span></span><br><span class="line"> <span class="comment">// &#x27;development&#x27; 不压缩与混淆，速度快</span></span><br><span class="line"> <span class="comment">// &#x27;production&#x27;  压缩与混淆，速度慢</span></span><br><span class="line"> <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在package.json配置文件中 scripts 节点下，新增 dev 脚本</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该节点下的脚本可以通过 npm run 运行</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>终端运行 npm run dev，启动 webpack 进行打包</li></ol><h3 id="2-2-WebPack打包配置"><a href="#2-2-WebPack打包配置" class="headerlink" title="2.2 WebPack打包配置"></a>2.2 WebPack打包配置</h3><p>webpack的4.x版本中默认约定</p><p>打包的入口文件为 src &gt; index.js</p><p>打包的输出文件为 dist &gt; main.js</p><p>如果要修改打包的入口与出口，可以在 webpack.config.js 中新增如下配置信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)    <span class="comment">// 导入node.js中专门操作的模块</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 打包入口文件的路径，__dirname表示当前目录绝对路径</span></span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 输出文件的存放路径</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="comment">// 输出文件的名称</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-WebPack自动打包"><a href="#2-3-WebPack自动打包" class="headerlink" title="2.3 WebPack自动打包"></a>2.3 WebPack自动打包</h3><ol><li><p>安装自动打包工具</p><p>npm i webpack-dev-server -D</p></li><li><p>修改package.json</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>修改引入的sciprt路径为  &#x2F;bundle.js (该配置文件存在于内存中)</p></li><li><p>运行 npm run dev</p></li></ol><h3 id="2-4-WebPack加载器"><a href="#2-4-WebPack加载器" class="headerlink" title="2.4 WebPack加载器"></a>2.4 WebPack加载器</h3><p><strong>1 通过 loader 打包非 js 模块</strong></p><p>webPack 默认只能打包 .js 后缀名结尾的模块，其它非 .js 后缀名结尾的模块需要调用 loader 才可以正常打包。</p><p>如: less-loader sass-loader url-loader</p><p><strong>2 打包处理 css文件</strong></p><ol><li><p>运行 npm i style-loader css-loader -D 命令，安装处理 css 文件的 loader</p></li><li><p>在 webpack.config.js 的 module &gt; rules 数组中， 添加规则如下</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        <span class="comment">// test表示匹配文件的类型，use表示要调用的loader</span></span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Maven/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven-加载顺序"><a href="#Maven-加载顺序" class="headerlink" title="Maven 加载顺序"></a>Maven 加载顺序</h2><p>从左到右依次</p><p><img src="https://img-blog.csdnimg.cn/20200623083158201.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hfd2Zlbmc=,size_16,color_FFFFFF,t_70" alt="img"></p><h2 id="Snapshot-Release"><a href="#Snapshot-Release" class="headerlink" title="Snapshot Release"></a>Snapshot Release</h2><p>快照版本和正式版本的主要区别在于，本地获取这些依赖的机制有所不同。</p><p>构建正式版本（release）时，第一次构建的时候会把该包从远程仓库中下载到本地仓库缓存，以后再次构建都不会去访问远程仓库了，你只有在重新发布的时候升级版本，才能使用到你最新添加的功能。</p><p>构建快照版本（snapshots）时，会优先去下载远程仓库最新的包，Maven的Repository的时候中有个配置项，可以配置对于SNAPSHOT版本向远程仓库中查找的频率。频率共有四种，分别是always、daily、interval、never。</p><ul><li><p>always：每次都去远程仓库查看是否有更新</p></li><li><p>daily：只在第一次的时候查看是否有更新，当天的其它时候则不会查看</p></li><li><p>interval：允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次</p></li><li><p>never：不会去远程仓库中查找（和正式版本的行为一样）</p></li></ul><h2 id="Maven-Profile"><a href="#Maven-Profile" class="headerlink" title="Maven Profile"></a>Maven Profile</h2><p>可以使用 <code>-P</code> 指定profile</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn groupId:artifactId:goal -P profile-1</span><br></pre></td></tr></table></figure><p>Profiles可以在 Maven settings 中通过 <code>&lt;activeProfiles&gt;</code> 激活</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>profile-1<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-打包源码插件"><a href="#Maven-打包源码插件" class="headerlink" title="Maven 打包源码插件"></a>Maven 打包源码插件</h2><p>在 pom.xml 中添加以下内容，可以在maven生成jar的同时生成sources包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-命令"><a href="#Maven-命令" class="headerlink" title="Maven 命令"></a>Maven 命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mvn install 跳过测试环节</span></span><br><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h2 id="项目中的Common模块打包"><a href="#项目中的Common模块打包" class="headerlink" title="项目中的Common模块打包"></a>项目中的Common模块打包</h2><p>Common模块都<strong>不加入</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包的时候去父工程打包 <code>mvn clean install</code></p><h2 id="本地Jar包安装到Maven仓库"><a href="#本地Jar包安装到Maven仓库" class="headerlink" title="本地Jar包安装到Maven仓库"></a>本地Jar包安装到Maven仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=<span class="string">&quot;com.abc&quot;</span> -DartifactId=<span class="string">&quot;mavenTest&quot;</span> -Dversion=<span class="string">&quot;1.0.0&quot;</span> -Dpackaging=<span class="string">&quot;jar&quot;</span> -Dfile=<span class="string">&quot;test.jar&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Pom样例"><a href="#Pom样例" class="headerlink" title="Pom样例"></a>Pom样例</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打包时上传源码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置远程上传依赖的私有仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>&#123;Your repository&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>&#123;Your repository&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven-引入自定义-Jar-包"><a href="#Maven-引入自定义-Jar-包" class="headerlink" title="Maven 引入自定义 Jar 包"></a>Maven 引入自定义 Jar 包</h2><p>1.将jar放到项目根目录（lib文件夹下）</p><p><img src="https://img2022.cnblogs.com/blog/1761926/202207/1761926-20220727145959787-69400310.png" alt="img"></p><p>2.修改pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>*******<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>*******<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/*******-1.1-20220629.060335-9.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.修改package配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将项目根目录下的lib文件中的jar包全部打入BOOT-INF/lib文件下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>BOOT-INF/lib/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将项目根目录下的src/main/resources文件中的配置文件全部打入默认文件下--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven配置私服"><a href="#Maven配置私服" class="headerlink" title="Maven配置私服"></a>Maven配置私服</h2><h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><p>Maven配置私服有两种方式</p><ol><li><code>settings.xml</code> ：全局配置方式</li><li><code>pom.xml</code> ：项目独享方式</li></ol><p>若 <code>settings.xml</code> 和 <code>pom.xml</code> 同时配置了，则以 <code>pom.xml</code> 为准</p><p>当我们在maven使用maven-public仓库地址的时候，会按照如下顺序访问：本地仓库 -&gt; 私服仓库 -&gt; 中央仓库</p><p>PS：私服仓库和中央仓库的顺序可以在Maven私服中配置</p><h3 id="Maven配置使用私服（下载依赖）"><a href="#Maven配置使用私服（下载依赖）" class="headerlink" title="Maven配置使用私服（下载依赖）"></a>Maven配置使用私服（下载依赖）</h3><ol><li>通过 <code>settings.xml</code> 配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>local<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果并没有搭建私服，可以直接使用阿里云Maven仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>local<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过 <code>pom.xml</code> 配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果并没有搭建私服，可以直接使用阿里云Maven仓库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven配置使用私服（下载插件）"><a href="#Maven配置使用私服（下载插件）" class="headerlink" title="Maven配置使用私服（下载插件）"></a>Maven配置使用私服（下载插件）</h3><ol><li>通过 <code>settings.xml</code> 配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>local<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>通过 <code>pom.xml</code> 配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/nexus/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven配置使用私服（发布依赖）"><a href="#Maven配置使用私服（发布依赖）" class="headerlink" title="Maven配置使用私服（发布依赖）"></a>Maven配置使用私服（发布依赖）</h3><ol><li>修改 <code>settings.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>pom.xml</code></li></ol><blockquote><p>注意：repository中的id要与server中的id一致</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="settings-xml-私服的完整配置"><a href="#settings-xml-私服的完整配置" class="headerlink" title="settings.xml 私服的完整配置"></a>settings.xml 私服的完整配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="string"><span class="tag">                              http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>local<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>local<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Nexus-Management-Repository"><a href="#Nexus-Management-Repository" class="headerlink" title="Nexus Management Repository"></a>Nexus Management Repository</h2><h3 id="Nexus安装（Docker）"><a href="#Nexus安装（Docker）" class="headerlink" title="Nexus安装（Docker）"></a>Nexus安装（Docker）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取Nexus镜像</span></span><br><span class="line">docker pull sonatype/nexus3</span><br><span class="line"><span class="comment"># 创建宿主机目录</span></span><br><span class="line"><span class="built_in">mkdir</span> –vp /usr/local/nexus-data</span><br><span class="line"><span class="comment"># 运行Nexus容器</span></span><br><span class="line">docker run -d --name nexus3 -p 8081:8081 -v /usr/local/nexus-data:/var/nexus-data sonatype/nexus3</span><br></pre></td></tr></table></figure><p>浏览器访问 <a href="http://127.0.0.1:8081/">http://127.0.0.1:8081</a> 进入Nexus控制台</p><h3 id="Nexus登陆"><a href="#Nexus登陆" class="headerlink" title="Nexus登陆"></a>Nexus登陆</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入Nexus容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 4057a8835ca8 /bin/bash</span><br><span class="line"><span class="comment"># 查看默认密码</span></span><br><span class="line"><span class="built_in">cat</span> nexus-data/admin.password</span><br><span class="line">e806f582-5ca1-4e3f-a5dc-65044aa1cd0f</span><br></pre></td></tr></table></figure><p>输入账号密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin</span><br><span class="line">e806f582-5ca1-4e3f-a5dc-65044aa1cd0f</span><br></pre></td></tr></table></figure><p>登陆后修改密码即可</p><h3 id="Nexus仓库说明"><a href="#Nexus仓库说明" class="headerlink" title="Nexus仓库说明"></a>Nexus仓库说明</h3><h4 id="默认仓库说明"><a href="#默认仓库说明" class="headerlink" title="默认仓库说明"></a>默认仓库说明</h4><ul><li><strong>maven-central</strong>：<strong>maven</strong> 中央库，默认从 <strong><a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></strong> 拉取 <strong>jar</strong></li><li><strong>maven-releases</strong>：私库发行版 <strong>jar</strong>，初次安装请将 <strong>Deployment policy</strong> 设置为 <strong>Allow redeploy</strong></li><li><strong>maven-snapshots</strong>：私库快照（调试版本）<strong>jar</strong></li><li><strong>maven-public</strong>：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地 <strong>maven</strong> 基础配置 <strong>settings.xml</strong> 或项目 <strong>pom.xml</strong> 中使用</li></ul><h4 id="仓库类型说明"><a href="#仓库类型说明" class="headerlink" title="仓库类型说明"></a>仓库类型说明</h4><ul><li><strong>group</strong>：这是一个仓库聚合的概念，用户仓库地址选择 <strong>Group</strong> 的地址，即可访问 <strong>Group</strong> 中配置的，用于方便开发人员自己设定的仓库。<strong>maven-public</strong> 就是一个 <strong>Group</strong> 类型的仓库，内部设置了多个仓库，访问顺序取决于配置顺序，<strong>3.x</strong> 默认为 <strong>Releases</strong>、<strong>Snapshots</strong>、<strong>Central</strong>，当然你也可以自己设置。</li><li><strong>hosted</strong>：私有仓库，内部项目的发布仓库，专门用来存储我们自己生成的 <strong>jar</strong> 文件</li><li><strong>snapshots</strong>：本地项目的快照仓库</li><li><strong>releases</strong>： 本地项目发布的正式版本</li><li><strong>proxy</strong>：代理类型，从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的 <strong>Configuration</strong> 页签下 <strong>Remote Storage</strong> 属性的值即被代理的远程仓库的路径），如可配置阿里云 <strong>maven</strong> 仓库</li><li><strong>central</strong>：中央仓库</li></ul><h3 id="Nexus仓库操作"><a href="#Nexus仓库操作" class="headerlink" title="Nexus仓库操作"></a>Nexus仓库操作</h3><p>maven-central 中可以修改中央仓库地址为阿里云镜像地址 <a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a></p><p><img src="https://img-blog.csdnimg.cn/40a5568801384e3091238f6ba9b0b339.png" alt="在这里插入图片描述"></p><p>maven-public 中可以修改拉取依赖的优先级顺序</p><p><img src="https://img-blog.csdnimg.cn/10d782dde3b74a16966da7a2187e5428.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Hexo/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="Hexo-搭建"><a href="#Hexo-搭建" class="headerlink" title="Hexo 搭建"></a>Hexo 搭建</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Node.js</li><li>Git</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="启动本地项目"><a href="#启动本地项目" class="headerlink" title="启动本地项目"></a>启动本地项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化Hexo项目</span></span><br><span class="line">hexo init demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 启动本地Hexo项目</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><ol><li>在Github上创建仓库 demo</li><li>安装插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置文件<code>_config.yml</code> 配置远程部署仓库</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/rongkezan/demo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改配置文件<code>_config.yml</code> 配置根目录</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://rongkezan.github.io/demo</span></span><br></pre></td></tr></table></figure><ol start="5"><li>部署</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2 id="Hexo-主题-–-Fluid"><a href="#Hexo-主题-–-Fluid" class="headerlink" title="Hexo 主题 – Fluid"></a>Hexo 主题 – Fluid</h2><ol><li><p>Fluid官方文档：<a href="https://hexo.fluid-dev.com/docs">https://hexo.fluid-dev.com/docs</a></p></li><li><p>拉取Fluid主题</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</span><br></pre></td></tr></table></figure><ol start="3"><li>修改配置文件<code>_config.yml</code> 主题配置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">fluid</span></span><br></pre></td></tr></table></figure><ol start="4"><li>创建关于页</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><ol start="5"><li>覆盖配置</li></ol><p>复制官方配置文件到博客目录下： <code>_config.fluid.yml</code></p><p>官方配置文件：<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Git/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-仓库操作"><a href="#Git-仓库操作" class="headerlink" title="Git 仓库操作"></a>Git 仓库操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote --help</span><br></pre></td></tr></table></figure><p>查看远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>添加远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitee.com/KeithRong/demo.git</span><br></pre></td></tr></table></figure><p>删除远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><h2 id="Git-推送操作"><a href="#Git-推送操作" class="headerlink" title="Git 推送操作"></a>Git 推送操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch --help</span><br><span class="line">git add --help</span><br><span class="line">git commit --help</span><br><span class="line">git push --help</span><br></pre></td></tr></table></figure><p>将本地分支推送关联远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="Git-分支操作"><a href="#Git-分支操作" class="headerlink" title="Git 分支操作"></a>Git 分支操作</h2><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout --help</span><br><span class="line">git merge --help</span><br><span class="line">git rebase --help</span><br></pre></td></tr></table></figure><p>创建新分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b [branch_name]</span><br></pre></td></tr></table></figure><p>删除远程分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete [branch_name]</span><br></pre></td></tr></table></figure><h2 id="Linux记住Git账号密码"><a href="#Linux记住Git账号密码" class="headerlink" title="Linux记住Git账号密码"></a>Linux记住Git账号密码</h2><p>配置Git用户名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your username&quot;</span></span><br></pre></td></tr></table></figure><p>配置Git用户邮箱</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;your email&quot;</span></span><br></pre></td></tr></table></figure><p>配置Git记住密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>拉取Git仓库后会让你输入一次账号密码，之后就不用再输入了。</p><p>刚才的配置信息保存在 root 目录下的 <code>.gitconfig</code> <code>.git-credential</code></p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Mac/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Mac/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac命令行快捷键"><a href="#Mac命令行快捷键" class="headerlink" title="Mac命令行快捷键"></a>Mac命令行快捷键</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Control</span></span><br><span class="line">control + d <span class="comment"># 命令行中代表发送EOF终止输入</span></span><br><span class="line">control + u <span class="comment"># 删除光标之前到行首的字符</span></span><br><span class="line">control + k <span class="comment"># 删除光标之前到行尾的字符(比较常用)</span></span><br><span class="line">control + a <span class="comment"># 移动光标到行首(常用)</span></span><br><span class="line">control + e <span class="comment"># 移动光标到行尾</span></span><br><span class="line">control + l <span class="comment"># 清屏，相当于clear命令</span></span><br><span class="line">control + r <span class="comment"># 显示：号提示，根据用户输入查找相关历史命令</span></span><br><span class="line">control + w <span class="comment"># 删除当前光标位置单词</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commond</span></span><br><span class="line">commond + t <span class="comment"># 新建标签页</span></span><br><span class="line">commond + d <span class="comment"># 垂直分屏</span></span><br><span class="line">commone + <span class="built_in">shift</span> + d <span class="comment"># 水平分屏</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arthas</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Arthas/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Arthas/</url>
      
        <content type="html"><![CDATA[<h2 id="Arthas-可以解决的问题"><a href="#Arthas-可以解决的问题" class="headerlink" title="Arthas 可以解决的问题"></a>Arthas 可以解决的问题</h2><ol><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li><li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到JVM的实时运行状态？</li><li>怎么快速定位应用的热点，生成火焰图？</li><li>怎样直接从JVM内查找某个类的实例？</li></ol><h2 id="Arthas-安装"><a href="#Arthas-安装" class="headerlink" title="Arthas 安装"></a>Arthas 安装</h2><p>下载<code>arthas-boot.jar</code>，然后用<code>java -jar</code>的方式启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://arthas.aliyun.com/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure><h2 id="Arthas-使用"><a href="#Arthas-使用" class="headerlink" title="Arthas 使用"></a>Arthas 使用</h2><blockquote><p>命令列表 <a href="https://arthas.gitee.io/commands.html">https://arthas.gitee.io/commands.html</a></p></blockquote><h3 id="Attach到进程"><a href="#Attach到进程" class="headerlink" title="Attach到进程"></a>Attach到进程</h3><p>启动 Arthas 后，会让你选择一个应用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar arthas-boot.jar</span><br><span class="line">* [1]: 35542</span><br><span class="line">  [2]: 71560 math-game.jar</span><br></pre></td></tr></table></figure><p><code>math-game</code> 进程是第2个，则输入<code>2</code>，按<code>回车/enter</code>。Arthas会attach到目标进程，并输出日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Try to attach process 71560</span><br><span class="line">[INFO] Attach process 71560 success.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.</span><br><span class="line"> /  O  \ |  .--. <span class="string">&#x27;&#x27;</span>--.  .--<span class="string">&#x27;|  &#x27;</span>--<span class="string">&#x27;  | /  O  \ &#x27;</span>   .-<span class="string">&#x27;</span></span><br><span class="line"><span class="string">|  .-.  ||  &#x27;</span>--<span class="string">&#x27;.&#x27;</span>   |  |   |  .--.  ||  .-.  |`.  `-.</span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-<span class="string">&#x27;    |</span></span><br><span class="line"><span class="string">`--&#x27;</span> `--<span class="string">&#x27;`--&#x27;</span> <span class="string">&#x27;--&#x27;</span>   `--<span class="string">&#x27;   `--&#x27;</span>  `--<span class="string">&#x27;`--&#x27;</span> `--<span class="string">&#x27;`-----&#x27;</span></span><br><span class="line"> </span><br><span class="line">wiki: https://arthas.aliyun.com/doc</span><br><span class="line">version: 3.0.5.20181127201536</span><br><span class="line">pid: 71560</span><br><span class="line">time: 2018-11-28 19:16:24</span><br></pre></td></tr></table></figure><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>输入 <code>dashboard</code> ，按<code>回车/enter</code>，会展示当前进程的信息，按<code>ctrl+c</code>可以中断执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ dashboard</span><br><span class="line">ID     NAME                   GROUP          PRIORI STATE  %CPU    TIME   INTERRU DAEMON</span><br><span class="line">17     pool-2-thread-1        system         5      WAITIN 67      0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">27     Timer-for-arthas-dashb system         10     RUNNAB 32      0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">11     AsyncAppender-Worker-a system         9      WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">9      Attach Listener        system         9      RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">3      Finalizer              system         8      WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">2      Reference Handler      system         10     WAITIN 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">4      Signal Dispatcher      system         9      RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">26     as-command-execute-dae system         10     TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">13     job-timeout            system         9      TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">true</span></span><br><span class="line">1      main                   main           5      TIMED_ 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">14     nioEventLoopGroup-2-1  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">18     nioEventLoopGroup-2-2  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">23     nioEventLoopGroup-2-3  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">15     nioEventLoopGroup-3-1  system         10     RUNNAB 0       0:0    <span class="literal">false</span>   <span class="literal">false</span></span><br><span class="line">Memory             used   total max    usage GC</span><br><span class="line">heap               32M    155M  1820M  1.77% gc.ps_scavenge.count  4</span><br><span class="line">ps_eden_space      14M    65M   672M   2.21% gc.ps_scavenge.time(m 166</span><br><span class="line">ps_survivor_space  4M     5M    5M           s)</span><br><span class="line">ps_old_gen         12M    85M   1365M  0.91% gc.ps_marksweep.count 0</span><br><span class="line">nonheap            20M    23M   -1           gc.ps_marksweep.time( 0</span><br><span class="line">code_cache         3M     5M    240M   1.32% ms)</span><br><span class="line">Runtime</span><br><span class="line">os.name                Mac OS X</span><br><span class="line">os.version             10.13.4</span><br><span class="line">java.version           1.8.0_162</span><br><span class="line">java.home              /Library/Java/JavaVir</span><br><span class="line">                       tualMachines/jdk1.8.0</span><br><span class="line">                       _162.jdk/Contents/Hom</span><br><span class="line">                       e/jre</span><br></pre></td></tr></table></figure><h3 id="Watch"><a href="#Watch" class="headerlink" title="Watch"></a>Watch</h3><blockquote><p>让你能方便的观察到指定函数的调用情况。</p><p>能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 观察该方法的 入参、目标、返回值(默认可不传)</span></span><br><span class="line">watch com.demo.service.impl.ProductionServiceImpl queryProductions -x 2</span><br><span class="line"><span class="comment"># 观察该方法的 入参</span></span><br><span class="line">watch com.demo.service.impl.ProductionServiceImpl queryProductions -x 2 &#123;param&#125;</span><br><span class="line"><span class="comment"># 观察该方法的 入参、异常</span></span><br><span class="line">watch com.demo.service.impl.ProductionServiceImpl queryProductions -x 2 &#123;param,throwExp&#125;</span><br></pre></td></tr></table></figure><p>更多用法 <a href="https://arthas.gitee.io/watch.html">https://arthas.gitee.io/watch.html</a></p><h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><blockquote><p>查看当前线程信息，查看线程的堆栈</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 展示第一页线程信息</span></span><br><span class="line">thread</span><br><span class="line"><span class="comment"># 展示所有线程信息</span></span><br><span class="line">thread -all</span><br><span class="line"><span class="comment"># 展示当前最忙的前N个线程并打印堆栈</span></span><br><span class="line">thread -n 3</span><br><span class="line"><span class="comment"># 展示指定线程的运行堆栈</span></span><br><span class="line">thread [<span class="built_in">id</span>]</span><br><span class="line"><span class="comment"># 找出当前阻塞其他线程的线程</span></span><br><span class="line">thread -b</span><br></pre></td></tr></table></figure><p>更多用法 <a href="https://arthas.gitee.io/thread.html">https://arthas.gitee.io/thread.html</a></p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><blockquote><p>输出当前方法被调用的调用路径</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack com.demo.service.impl.ProductionServiceImpl queryProductions</span><br></pre></td></tr></table></figure><p>更多用法 <a href="https://arthas.gitee.io/stack.html">https://arthas.gitee.io/stack.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>雪花算法</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/31b98dc293134cc7a6c604dc6afadb41.png" alt="在这里插入图片描述"></p><ul><li>snowflake：一共64位</li><li>第一部分：1位，一直都是0<ul><li>二进制里第一位如果是1，则代表是负数，但我们生成的ID都是正数，所以第一位统一是0</li></ul></li><li>第二部分：41位，表示时间戳<ul><li>41位可以表达的数字可以有 <code>2^41 - 1</code> 个，换算为年有69年时间</li><li><code>T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69</code></li></ul></li><li>第三部分：5位，表示机房ID</li><li>第四部分：5位，表示机器ID</li><li>第五部分：12位，表示序列号，即某个机房某台机器上这一毫秒内同时生成的ID的序号<ul><li>1毫秒内最多可以生成4095个序列号</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Zookeeper/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Zookeeper/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>zookeeper是一个目录结构，node可以存放数据（1M）</p><p>节点分为：持久节点、临时节点（session）、序列节点。</p><p><strong>zookeeper提供了一系列的保证</strong></p><p>顺序性：客户端发送的请求将会被顺序的处理。</p><p>原子性：更新要么失败要么成功，没中间状态。</p><p>单系统映像：无论客户端连接到哪个服务器，都将看到相同的服务视图。</p><p>可靠性：一旦应用更新，它将从那时起持续到客户端覆盖更新。</p><p>实时性：系统的客户视图保证特定的时间范围内是最新的。</p><p><strong>应用场景</strong></p><p>配置中心、负载均衡、命名服务、DNS服务、集群管理</p><h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><blockquote><p>分布式一致性算法</p></blockquote><h3 id="Paxos-概念"><a href="#Paxos-概念" class="headerlink" title="Paxos 概念"></a>Paxos 概念</h3><p>Paxos 前提：没有拜占庭将军问题，即所有节点都是可信的，Paxos 只有在一个可信的环境中才能成立。</p><p>所有的变更都需要通过一个提议，每个提议都有一个编号，这个编号是一直增长的。每个提议都需要超过半数的议员同意才能生效。每个议员只会同意大于当前编号的提议，包括已生效的和未生效的。议会有一个目标：保证所有的议员对于提议都能达成一致的看法。在所有议员中有一个总统，只有总统有权发出提议，如果议员有自己的提议，必须发给总统并由总统来提出。</p><h3 id="ZAB"><a href="#ZAB" class="headerlink" title="ZAB"></a>ZAB</h3><blockquote><p>原子广播协议</p></blockquote><p>Zookeeper 如何实现最终一致性</p><p>假设一个 Zookeeper 集群中有3台机器，1台 Leader，2台 Follower</p><ol><li>客户端将创建节点的请求发送给 Follower</li><li>Follower 将请求转发给 Leader</li><li>Leader 在内部生成一个事务ID，并且将 Log 日志写入队列，推送给 Follower</li><li>此时若 Follower1 返回了 ok，而 Follower2 没返回，而 Leader 收到 Follower1 的请求后也返回了 ok，根据半数通过原则，Leader 会将写请求放入队列，所以即使 Follower2 没返回 ok，也会同步数据，实现最终一致性</li></ol><p><img src="https://img-blog.csdnimg.cn/20210130205016592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三种角色"><a href="#三种角色" class="headerlink" title="三种角色"></a>三种角色</h2><p>Leader：负责处理集群的写请求，并发起投票，只有超过半数的节点同意后才会提交该请求。</p><p>Follower：处理读请求，转发写请求给leader，在选举leader时参与投票。</p><p>Observer：处理读请求，转发写请求给leader，没投票能力</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将一台服务变成 observer</span></span><br><span class="line">server.3=node03:2888:3888:observer</span><br></pre></td></tr></table></figure><h2 id="Linux-安装-Zookeeper"><a href="#Linux-安装-Zookeeper" class="headerlink" title="Linux 安装 Zookeeper"></a>Linux 安装 Zookeeper</h2><p>下载 解压 改名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirror.bit.edu.cn/apache/zookeeper/stable/apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line">tar xf apache-zookeeper-3.5.9-bin.tar.gz</span><br><span class="line">mv apache-zookeeper-3.5.9-bin/ zookeeper</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export ZOOKEEPER=/root/server/zookeeper</span><br><span class="line">export PATH=$PATH:$ZOOKEEPER/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>启动，查看状态，连接客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start</span><br><span class="line">zkServer.sh status</span><br><span class="line">zkCli.sh</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-基本命令"><a href="#Zookeeper-基本命令" class="headerlink" title="Zookeeper 基本命令"></a>Zookeeper 基本命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看节点</span></span><br><span class="line">ls /</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建节点/test,值为value</span></span><br><span class="line">create /test &quot;value&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不会覆盖创建 会创建出 /test0000000001 节点</span></span><br><span class="line">create -s /test &quot;value2&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数据</span></span><br><span class="line">get /test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置数据</span></span><br><span class="line">set /test &quot;value2&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监听节点</span></span><br><span class="line">watch /test</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">概念解释</span></span><br><span class="line">cZxid = 0x200000002# 创建的事务ID</span><br><span class="line">mZxid = 0x200000003# 修改的事务ID</span><br><span class="line">pZxid = 0x200000004 # 子节点创建/删除的事务ID</span><br></pre></td></tr></table></figure><p><strong>watch</strong></p><p>客户端1创建了临时节点 <code>/test/a</code></p><p>客户端2监听了这个节点 <code>/test/a</code></p><p>当客户端1挂掉的时候，<code>/test/a</code> 这个节点会有事件（event）产生，这时可以回调客户端2</p><h2 id="Zookeeper集群"><a href="#Zookeeper集群" class="headerlink" title="Zookeeper集群"></a>Zookeeper集群</h2><p>配置 zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=node01:2888:3888</span><br><span class="line">server.2=node02:2888:3888</span><br><span class="line">server.3=node03:2888:3888</span><br></pre></td></tr></table></figure><p>3888：选主投票用的</p><p>2888：leader 接收 write 请求</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>复制 zoo_sample.cfg 到 zoo.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>参数解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">心跳时间（毫秒）</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">follower连接leader时，初始化有10次心跳机会连接leader，结合tickTime即20s</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">follower同步leader时，同步心跳有5次机会，结合tikeTime即10s</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">持久化目录</span></span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">zookeeper的端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许最大的客户端连接数</span></span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><h2 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h2><p>每个 zk 服务器会有 ID，选举的时候首选会选数据最全的 zk，即 事务ID（Zxid）最大的，如果 Zxid 都一样，那么会选 ID 最大的。</p><p>目前有5台服务器，每台服务器均没有数据，它们的编号分别是1,2,3,4,5,按编号依次启动，它们的选择举过程如下：</p><ul><li>服务器1启动，给自己投票，然后发投票信息，由于其它机器还没有启动所以它收不到反馈信息，服务器1的状态一直属于Looking(选举状态)。</li><li>服务器2启动，给自己投票，同时与之前启动的服务器1交换结果，由于服务器2的编号大所以服务器2胜出，但此时投票数没有大于半数，所以两个服务器的状态依然是LOOKING。</li><li>服务器3启动，给自己投票，同时与之前启动的服务器1,2交换信息，由于服务器3的编号最大所以服务器3胜出，此时投票数正好大于半数，所以服务器3成为领导者，服务器1,2成为小弟。</li><li>服务器4启动，给自己投票，同时与之前启动的服务器1,2,3交换信息，尽管服务器4的编号大，但之前服务器3已经胜出，所以服务器4只能成为小弟。</li><li>服务器5启动，后面的逻辑同服务器4成为小弟。</li></ul><h2 id="Zookeeper-Java-Api"><a href="#Zookeeper-Java-Api" class="headerlink" title="Zookeeper Java Api"></a>Zookeeper Java Api</h2><p>引入 Zookeeper 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 连接zk服务</span></span><br><span class="line">    <span class="type">ZooKeeper</span> <span class="variable">zk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;127.0.0.1:2181&quot;</span>, <span class="number">3000</span>, watchedEvent -&gt; &#123;</span><br><span class="line">        Watcher.Event.<span class="type">KeeperState</span> <span class="variable">state</span> <span class="operator">=</span> watchedEvent.getState();</span><br><span class="line">        Watcher.Event.<span class="type">EventType</span> <span class="variable">type</span> <span class="operator">=</span> watchedEvent.getType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state == Watcher.Event.KeeperState.SyncConnected) &#123;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    latch.await();</span><br><span class="line">    <span class="comment">// 打印zk状态，如果不加 CountDownLatch，则会打印 connecting，因为是异步连接</span></span><br><span class="line">    ZooKeeper.<span class="type">States</span> <span class="variable">state</span> <span class="operator">=</span> zk.getState();</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">        <span class="keyword">case</span> CONNECTING:</span><br><span class="line">            System.out.println(<span class="string">&quot;connecting&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CONNECTED:</span><br><span class="line">            System.out.println(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建节点</span></span><br><span class="line">    zk.create(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;myData&quot;</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步获取数据</span></span><br><span class="line">    <span class="type">byte</span>[] node = zk.getData(<span class="string">&quot;/test&quot;</span>, event -&gt; System.out.println(event.toString()), <span class="keyword">new</span> <span class="title class_">Stat</span>());</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(node));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置数据</span></span><br><span class="line">    zk.setData(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;newData&quot;</span>.getBytes(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步获取数据</span></span><br><span class="line">    zk.getData(<span class="string">&quot;/test&quot;</span>, <span class="literal">false</span>, (rc, path, ctx, data, stat) -&gt;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data)), <span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞线程 以便获取异步的数据</span></span><br><span class="line">    Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Zookeeper-分布式锁"><a href="#Zookeeper-分布式锁" class="headerlink" title="Zookeeper 分布式锁"></a>Zookeeper 分布式锁</h2><p>redis 作为分布式锁的缺点：单点会挂，需要开启内存持久化，效率会变慢</p><p>zookeeper 分布式锁流程</p><ol><li>线程会在 zk 中创建临时有序节点</li><li>节点序号最小的可以获得锁</li><li>每个节点可以看到所有前面的节点，一旦锁被释放，zk只给第二个节点发事件回调</li></ol><p>简单来说，每次都创建节点的ID会递增，ID越小越先被执行</p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkWatchLock</span> <span class="keyword">implements</span> <span class="title class_">Watcher</span>, AsyncCallback.StringCallback,</span><br><span class="line">        AsyncCallback.Children2Callback, AsyncCallback.StatCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ZooKeeper</span> <span class="variable">zk</span> <span class="operator">=</span> ZkUtils.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String pathName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建lock有序节点，值是线程名</span></span><br><span class="line">        zk.create(<span class="string">&quot;/lock&quot;</span>, threadName.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE,</span><br><span class="line">                CreateMode.EPHEMERAL_SEQUENTIAL, <span class="built_in">this</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zk.delete(pathName, -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(threadName + <span class="string">&quot; unlock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Watcher</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(WatchedEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getType() == Event.EventType.NodeDeleted) &#123;</span><br><span class="line">            zk.getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">false</span>, <span class="built_in">this</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Children2Callback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(<span class="type">int</span> rc, String path, Object ctx, List&lt;String&gt; children, Stat stat)</span> &#123;</span><br><span class="line">        <span class="comment">// 每一个节点都能看到自己前面的节点</span></span><br><span class="line">        System.out.println(threadName + <span class="string">&quot; look locks&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line">            System.out.print(child + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将节点排序</span></span><br><span class="line">        Collections.sort(children);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否是第一个节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> children.indexOf(pathName.substring(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zk.setData(<span class="string">&quot;/&quot;</span>, threadName.getBytes(), -<span class="number">1</span>);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (KeeperException | InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            zk.exists(<span class="string">&quot;/&quot;</span> + children.get(i - <span class="number">1</span>), <span class="built_in">this</span>, <span class="built_in">this</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StringCallback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(<span class="type">int</span> rc, String path, Object ctx, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(threadName + <span class="string">&quot;\tcreate node : &quot;</span> + name);</span><br><span class="line">            pathName = name;</span><br><span class="line">            zk.getChildren(<span class="string">&quot;/&quot;</span>, <span class="literal">false</span>, <span class="built_in">this</span>, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * StatCallback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processResult</span><span class="params">(<span class="type">int</span> rc, String path, Object ctx, Stat stat)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkLockClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">                <span class="type">ZkWatchLock</span> <span class="variable">zkWatchLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZkWatchLock</span>();</span><br><span class="line">                zkWatchLock.setThreadName(threadName);</span><br><span class="line">                <span class="comment">//抢锁</span></span><br><span class="line">                zkWatchLock.lock();</span><br><span class="line">                <span class="comment">//干活</span></span><br><span class="line">                System.out.println(threadName + <span class="string">&quot; working...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                zkWatchLock.unLock();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">15000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>Zookeeper 有个 sync 同步（可选项），客户端发起查询请求的时候，Zk会发起一个同步请求给 Leader，完成同步之后再返回，同步是基于回调的方式，不会阻塞。</p><p>zookeeper缺陷：Leader 宕机后 Follower 节点会重新进行选举，选举期间整个集群都是不可用的，这就导致了在选举期间注册服务瘫痪。</p><p>临时节点：和 Session 绑定，且 Session 也需要消耗事务ID，当连接上 zk 的时候会生成一个 Session，连接断开后 Session 消失</p><p>zk是有 Session 概念的，所以没有连接池的概念</p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ</title>
      <link href="/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RocketMQ%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="http://rocketmq.apache.org/">http://rocketmq.apache.org</a></p></blockquote><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p><img src="https://rocketmq.apache.org/assets/images/RocketMQ%E9%83%A8%E7%BD%B2%E6%9E%B6%E6%9E%84-ee0435f80da5faecf47bca69b1c831cb.png" alt="RocketMQ Architecture"></p><h4 id="Nameserver"><a href="#Nameserver" class="headerlink" title="Nameserver"></a>Nameserver</h4><p>底层由netty实现，提供了路由管理、服务注册、服务发现的功能，是一个无状态节点</p><ul><li>nameserver是服务发现者：集群中各个角色（producer、broker、consumer等）都需要定时想nameserver上报自己的状态，以便互相发现彼此，超时不上报的话，nameserver会把它从列表中剔除</li><li>nameserver可以部署多个，当多个nameserver存在的时候，其他角色同时向他们上报信息，以保证高可用</li><li>NameServer集群间互不通信，没有主备的概念</li><li>nameserver内存式存储，nameserver中的broker、topic等信息默认不会持久化</li><li>为什么不用zookeeper：rocketmq希望为了提高性能，CAP定理，客户端负载均衡</li></ul><h4 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h4><ul><li>Broker 面向 Producer 和 Consumer 接受和发送消息</li><li>向 Nameserver 提交自己的信息</li><li>是消息中间件的消息存储、转发服务器。</li><li>每个Broker节点，在启动时，都会遍历NameServer列表，与每个NameServer建立长连接，注册自己的信息，之后定时上报。</li></ul><p><strong>Broker集群</strong></p><ul><li>Broker高可用，可以配成Master&#x2F;Slave结构，Master可写可读，Slave只可以读，Master将写入的数据同步给Slave。<ul><li>一个Master可以对应多个Slave，但是一个Slave只能对应一个Master</li><li>Master与Slave的对应关系通过指定相同的BrokerName，不同的BrokerId来定义BrokerId为0表示Master，非0表示Slave</li></ul></li><li>Master多机负载，可以部署多个broker<ul><li>每个Broker与nameserver集群中的所有节点建立长连接，定时注册Topic信息到所有nameserver。</li></ul></li></ul><h4 id="Consumer-Group"><a href="#Consumer-Group" class="headerlink" title="Consumer Group"></a>Consumer Group</h4><p>消费者可能存在多个，一个消费者集群就代表一个 Group，消息投递到 Group 后只要某一个消费者消费了，就算成功消费，即消息的消费是以 Group 为单位的。</p><h4 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h4><ul><li>消息的生产者</li><li>通过集群中的其中一个节点（随机选择）建立长连接，获得Topic的路由信息，包括Topic下面有哪些Queue，这些Queue分布在哪些Broker上等</li><li>接下来向提供Topic服务的Master建立长连接，且定时向Master发送心跳</li></ul><h4 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h4><p>消息的消费者，通过NameServer集群获得Topic的路由信息，连接到对应的Broker上消费消息。</p><p>注意，由于Master和Slave都可以读取消息，因此Consumer会与Master和Slave都建立连接。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Topic是一个逻辑上的概念，实际上Message是在每个Broker上以Queue的形式记录。</p><p><img src="https://img-blog.csdnimg.cn/2021030118144581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><blockquote><p>消息的发送和接收</p></blockquote><h3 id="同步发送接收消息"><a href="#同步发送接收消息" class="headerlink" title="同步发送接收消息"></a>同步发送接收消息</h3><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Producer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException, RemotingException, InterruptedException, MQBrokerException &#123;</span><br><span class="line">        <span class="type">DefaultMQProducer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQProducer</span>(<span class="string">&quot;MyGroup&quot;</span>);</span><br><span class="line">        <span class="comment">// Set nameServer address</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">&quot;192.168.25.101:9876&quot;</span>);</span><br><span class="line">        producer.start();</span><br><span class="line">        producer.setSendMsgTimeout(<span class="number">6000</span>);</span><br><span class="line">        <span class="comment">// Topic: The address to which message will be sent</span></span><br><span class="line">        <span class="comment">// Body: The real message</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;myMessage&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">// Synchronized send, it will blocking, slow but don&#x27;t lose message</span></span><br><span class="line">        <span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br><span class="line">        <span class="comment">// Get consumer&#x27;s fallback</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException &#123;</span><br><span class="line">        <span class="type">DefaultMQPushConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMQPushConsumer</span>(<span class="string">&quot;MyConsumer&quot;</span>);</span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">&quot;192.168.25.101:9876&quot;</span>);</span><br><span class="line">        <span class="comment">// Each consumer just focus one topic</span></span><br><span class="line">        <span class="comment">// Topic: the address to which message will be sent</span></span><br><span class="line">        <span class="comment">// Filter: * refers to not filter</span></span><br><span class="line">        consumer.subscribe(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> <span class="title class_">MessageListenerConcurrently</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title function_">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs, ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msgStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody());</span><br><span class="line">                    System.out.println(msgStr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// This message will be consumed by one consumer in default situation, point to point.</span></span><br><span class="line">                <span class="comment">// On the other hand, consumer can update status of message, ack</span></span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        consumer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;Consumer started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者常用的发送模式"><a href="#生产者常用的发送模式" class="headerlink" title="生产者常用的发送模式"></a>生产者常用的发送模式</h3><ol><li>只发送消息，不考虑消息是否成功消费、</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;myOnewayMessage&quot;</span>.getBytes());</span><br><span class="line">producer.sendOneway(message);</span><br></pre></td></tr></table></figure><ol start="2"><li>同步发送消息，可靠，阻塞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;myMessage&quot;</span>.getBytes());</span><br><span class="line"><span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br></pre></td></tr></table></figure><ol start="3"><li>异步发送消息，可靠，不阻塞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;myAsyncMessage&quot;</span>.getBytes());</span><br><span class="line">producer.send(message, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Send message success, sendResult:&quot;</span> + sendResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="comment">// You can catch this exception, do some compensation, retry maybe.</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Send message exception, e:&quot;</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>发送带有 TAG、KEY 的消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;myTopic&quot;</span>, <span class="string">&quot;MyTag&quot;</span>, <span class="string">&quot;MyKey&quot;</span>, <span class="string">&quot;myMessage&quot;</span>.getBytes());</span><br><span class="line"><span class="type">SendResult</span> <span class="variable">result</span> <span class="operator">=</span> producer.send(message);</span><br></pre></td></tr></table></figure><h2 id="重试机制"><a href="#重试机制" class="headerlink" title="重试机制"></a>重试机制</h2><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步发送时 重试次数，默认 2</span></span><br><span class="line">producer.setRetryTimesWhenSendAsyncFailed(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 同步发送时 重试次数，默认 2</span></span><br><span class="line">producer.setRetryTimesWhenSendFailed(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 是否向其他broker发送请求 默认false</span></span><br><span class="line">producer.setRetryAnotherBrokerWhenNotStoreOK(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set consume timeout (minute)</span></span><br><span class="line">consumer.setConsumeTimeout(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -&gt; &#123;</span><br><span class="line"><span class="comment">// return status &#x27;RECONSUME_LATER&#x27;,it will retry to consume this message.</span></span><br><span class="line">    <span class="keyword">return</span> ConsumeConcurrentlyStatus.RECONSUME_LATER;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Broker投递</strong></p><p>只有在消息模式为集群模式（MessageModel.CLUSTERING）时，Broker才会自动进行重试，广播消息不重试</p><p>重投使用<code>messageDelayLevel</code></p><p>默认值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">messageDelayLevel 1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span><br></pre></td></tr></table></figure><h2 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h2><p><strong>引起重复消费的原因</strong></p><p>ACK：正常情况下 Consumer 消费完消息之后会发送 ACK 通知 Broker，Broker 从队列中剔除这条消息，当 ACK 因为网络原因无法发送到 Broker，Broker 会认为该消息没有被消费，消息重投机制会把消息再次投递。</p><p>Group：在集群模式下，消息在 Broker 中会保证相同 Group 的 Consumer 消费一次，但针对不同 Group 的 Consumer 会推送多次。</p><p><strong>解决方案</strong></p><p>数据库：处理消息前，使用消息表主键带有约束字段中 insert</p><p>Map（单机）：putIfAbsent</p><p>Redis：分布式锁</p><h2 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h2><p><strong>生产者</strong></p><p>使用 MessageQueueSelector 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageQueueSelector</span> &#123;</span><br><span class="line">    MessageQueue <span class="title function_">select</span><span class="params">(<span class="keyword">final</span> List&lt;MessageQueue&gt; mqs, <span class="keyword">final</span> Message msg, <span class="keyword">final</span> Object arg)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelectMessageQueueByHash：通过第三个参数判断发送到哪个队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Same arg message will send to same queue.</span></span><br><span class="line">producer.send(message, <span class="keyword">new</span> <span class="title class_">SelectMessageQueueByHash</span>(), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MessageListenerConcurrently: 并发消费，会开启多个线程</span></span><br><span class="line">consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) </span><br><span class="line">                                 -&gt; ConsumeConcurrentlyStatus.CONSUME_SUCCESS);</span><br><span class="line"><span class="comment">// MessageListenerOrderly: 顺序消费，一个队列开启一个线程</span></span><br><span class="line">consumer.registerMessageListener((MessageListenerOrderly) (msgs, context) </span><br><span class="line">                                 -&gt; ConsumeOrderlyStatus.SUCCESS);</span><br><span class="line"><span class="comment">// 设置最大线程数</span></span><br><span class="line">consumer.setConsumeThreadMax(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 设置最小线程数</span></span><br><span class="line">consumer.setConsumeThreadMin(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/"/>
      <url>/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h2 id="MQ种类"><a href="#MQ种类" class="headerlink" title="MQ种类"></a>MQ种类</h2><table><thead><tr><th align="left">特性</th><th align="left">RabbitMQ</th><th align="left">RocketMQ</th><th align="left">kafka</th></tr></thead><tbody><tr><td align="left">开发语言</td><td align="left">erlang</td><td align="left">java</td><td align="left">scala</td></tr><tr><td align="left">单机吞吐量</td><td align="left">万级</td><td align="left">10万级</td><td align="left">10万级</td></tr><tr><td align="left">时效性</td><td align="left">us级</td><td align="left">ms级</td><td align="left">ms级以内</td></tr><tr><td align="left">可用性</td><td align="left">高(主从架构)</td><td align="left">非常高(分布式架构)</td><td align="left">非常高(分布式架构)</td></tr><tr><td align="left">功能特性</td><td align="left">基于erlang开发，所以并发能力很强，性能极其好，延时很低;管理界面较丰富</td><td align="left">MQ功能比较完备，扩展性佳</td><td align="left">只支持主要的MQ功能，像一些消息查询，消息回溯等功能没有提供，毕竟是为大数据准备的，在大数据领域应用广。</td></tr></tbody></table><h2 id="RabbitMQ工作模型"><a href="#RabbitMQ工作模型" class="headerlink" title="RabbitMQ工作模型"></a>RabbitMQ工作模型</h2><p><img src="https://img-blog.csdnimg.cn/20210103225243278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>工作流程：</p><p>生产者发送消息给交换机，交换机根据路由规则将消息分发到各个队列中，消费者监听队列，当发现有消息的时候将消息取走。</p><p>Channel：信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信道发送出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信道的概念，以复用一条TCP连接。</p><p>VHost：虚拟主机，可以用其分组。提高资源利用率，避免命名的冲突。</p><p>Exchange：地址清单，帮助消息分发到各个队列。</p><p>Queue：队列，用于存储消息。</p><h2 id="RabbitMQ路由分发规则"><a href="#RabbitMQ路由分发规则" class="headerlink" title="RabbitMQ路由分发规则"></a>RabbitMQ路由分发规则</h2><h3 id="1-Direct"><a href="#1-Direct" class="headerlink" title="1. Direct"></a>1. Direct</h3><p>点对点消息模型，消息中的路由键（routing key）如果和Binding中的绑定键（binding key）一致，交换机就将消息发送到对应的队列中。它是完全匹配、单播的模式。</p><p><img src="https://img-blog.csdnimg.cn/2021010322530492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-Fanout"><a href="#2-Fanout" class="headerlink" title="2. Fanout"></a>2. Fanout</h3><p>每个发到fanout类型交换机的消息都会分到所有绑定的队列上去，fanout不处理路由键，它转发消息是最快的，广播模式。</p><p><img src="https://img-blog.csdnimg.cn/20210103225322591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="3-Topic"><a href="#3-Topic" class="headerlink" title="3.  Topic"></a>3.  Topic</h3><p>通过模式匹配分配消息的路由键属性，将路由键和某个模式匹配，可以识别两个通配符“#”、“*”，有选择性地进行广播。</p><ul><li># 匹配0个或多个单词</li><li>* 匹配一个单词</li></ul><p><img src="https://img-blog.csdnimg.cn/20210103225338676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="SpringBoot-使用RabbitMQ"><a href="#SpringBoot-使用RabbitMQ" class="headerlink" title="SpringBoot 使用RabbitMQ"></a>SpringBoot 使用RabbitMQ</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置队列、交换机、绑定关系"><a href="#2-配置队列、交换机、绑定关系" class="headerlink" title="2. 配置队列、交换机、绑定关系"></a>2. 配置队列、交换机、绑定关系</h3><h4 id="2-1-配置方式一"><a href="#2-1-配置方式一" class="headerlink" title="2.1 配置方式一"></a>2.1 配置方式一</h4><h5 id="2-1-1-队列交换机定义"><a href="#2-1-1-队列交换机定义" class="headerlink" title="2.1.1 队列交换机定义"></a>2.1.1 队列交换机定义</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">firstQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;sardine.queue.first&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;sardine.exchange.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindFirst</span><span class="params">(<span class="meta">@Qualifier(&quot;firstQueue&quot;)</span> Queue queue, <span class="meta">@Qualifier(&quot;directExchange&quot;)</span> DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(directExchange).with(<span class="string">&quot;demo.first&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-2-消费者"><a href="#2-1-2-消费者" class="headerlink" title="2.1.2 消费者"></a>2.1.2 消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;sardine.queue.first&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;rabbitmq receive:&quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-1-3-生产者"><a href="#2-1-3-生产者" class="headerlink" title="2.1.3 生产者"></a>2.1.3 生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;sardine.exchange.direct&quot;</span>, <span class="string">&quot;demo.first&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="comment">// 测试结果: rabbitmq receive:Hello World</span></span><br></pre></td></tr></table></figure><h4 id="2-2-配置方式二"><a href="#2-2-配置方式二" class="headerlink" title="2.2 配置方式二"></a>2.2 配置方式二</h4><h5 id="2-2-1-Direct模式"><a href="#2-2-1-Direct模式" class="headerlink" title="2.2.1 Direct模式"></a>2.2.1 Direct模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queuesToDeclare = @Queue(&quot;work&quot;))</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;work&quot;</span>, i);</span><br><span class="line"><span class="comment">// 测试结果: 平均分配到各个队列</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">message1 = 0</span></span><br><span class="line"><span class="comment">message2 = 1</span></span><br><span class="line"><span class="comment">message1 = 2</span></span><br><span class="line"><span class="comment">message2 = 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="2-2-2-Fanout模式"><a href="#2-2-2-Fanout模式" class="headerlink" title="2.2.2 Fanout模式"></a>2.2.2 Fanout模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;fanout.exchange&quot;, type = ExchangeTypes.FANOUT)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;fanout.exchange&quot;, type = ExchangeTypes.FANOUT)</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;fanout.exchange&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;Fanout message&quot;</span>);</span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">message1 = Fanout message</span></span><br><span class="line"><span class="comment">message2 = Fanout message</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="2-2-3-Topic模式"><a href="#2-2-3-Topic模式" class="headerlink" title="2.2.3 Topic模式"></a>2.2.3 Topic模式</h5><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;user.save&quot;, &quot;user.*&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message1 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(bindings = &#123;</span></span><br><span class="line"><span class="meta">            @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue,</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(name = &quot;topic.exchange&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">                    key = &#123;&quot;order.#&quot;, &quot;produce.#&quot;, &quot;user.*&quot;&#125;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;message2 = &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;user.keith&quot;</span>, <span class="string">&quot;Topic user message&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试结果: 由于两个队列都有user.* 所以都会收到消息</span></span><br><span class="line"><span class="comment"> * message2 = Topic user message</span></span><br><span class="line"><span class="comment"> * message1 = Topic user message</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;topic.exchange&quot;</span>, <span class="string">&quot;produce.add.save&quot;</span>, <span class="string">&quot;Topic produce message&quot;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试结果: 由于只有队列2有produce.# 所有只有队列2收到消息</span></span><br><span class="line"><span class="comment"> * message2 = Topic produce message</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="过期队列"><a href="#过期队列" class="headerlink" title="过期队列"></a>过期队列</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>过期时间TTL表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收，过了之后消息自动删除。</p><p>设置消息和队列的两种方式</p><ul><li>通过队列属性设置，队列中所有消息都有相同的过期时间</li><li>对消息单独设置，每条消息的TTL可以不同</li></ul><p>以上两种方法如果同时使用，则消息的过期时间以两者之间TTL较小的为准。消息在队列的生存时间一旦超过设置的TTL值，就称为dead message 被投递到死信队列，消费者无法再收到该消息。</p><h3 id="Spring-Boot-配置"><a href="#Spring-Boot-配置" class="headerlink" title="Spring Boot 配置"></a>Spring Boot 配置</h3><h4 id="xml-配置"><a href="#xml-配置" class="headerlink" title="xml 配置"></a>xml 配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义过期队列及属性 不存在则自动创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;myTtlQueue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.ttl.queue&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 投递到该队列的消息如果没有消费将在6秒后被删除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;long&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义定向交换机，根据不同的路由key投递信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">&quot;myDirExchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.dir.exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">&quot;my.ttl.dlx&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;my.ttl.queue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>消息在6秒内未被消费则会过期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;my.dir.exchange&quot;</span>, <span class="string">&quot;my.ttl.dlx&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210103224630359.png" alt="在这里插入图片描述"></p><h3 id="单个消息配置过期时间"><a href="#单个消息配置过期时间" class="headerlink" title="单个消息配置过期时间"></a>单个消息配置过期时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">messageProperties.setExpiration(<span class="string">&quot;5000&quot;</span>);</span><br><span class="line"><span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(<span class="string">&quot;This message will expired in 5s&quot;</span>.getBytes(), messageProperties);</span><br><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;sardine.exchange.direct&quot;</span>, <span class="string">&quot;demo.first&quot;</span>, message);</span><br></pre></td></tr></table></figure><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>DLX，全称为Dead Letter Exchange，可以称为死信交换机。当消息在一个队列中变成死信（dead message）之后，它能被重新发送到另一个交换机中，这个交换机就是DLX，绑定DLX的队列就称之为死信队列。</p><p>消息变成死信，可能的原因：</p><ul><li>消息被拒绝</li><li>消息过期</li><li>队列达到最大长度</li></ul><p>DLX也是一个正常的交换机，和一般的交换机没什么区别，它能在任何队列上被指定，实际上就是设置某一个队列的属性。当这个队列中存在死信时，Rabbitmq就会自动地将这个消息重新发布到设置的DLX上去，进而被路由到另一个队列，即死信队列。</p><p>要想使用死信队列，只需要在定义队列的时候设置队列参数 <code>x-dead-letter-exchange</code> 指定交换机即可。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://img-blog.csdnimg.cn/20210103134303902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-Boot-配置-1"><a href="#Spring-Boot-配置-1" class="headerlink" title="Spring Boot 配置"></a>Spring Boot 配置</h3><h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><p>消息发送到 <code>定向交换机</code> ，6秒后消息过期，转发到 <code>死信交换机</code>，死信交换机再根据路由键转发到 <code>死信队列</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义过期队列及属性 不存在则自动创建 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;myTtlQueue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.ttl.queue&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 投递到该队列的消息如果没有消费将在6秒后被删除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-message-ttl&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;long&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6000&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置当消息过期后投递到对应的死信交换机 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;x-dead-letter-exchange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;my.dlx.exchange&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:queue-arguments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义定向交换机，根据不同的路由key投递信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">&quot;myDirExchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.dir.exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">&quot;my.ttl.dlx&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;myTtlQueue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义死信队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">&quot;myDlxQueue&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.dlx.queue&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定义死信交换机 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:direct-exchange</span> <span class="attr">id</span>=<span class="string">&quot;myDlxExchange&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my.dlx.exchange&quot;</span> <span class="attr">auto-declare</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过期的消息转移到my.dlx.queue队列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">key</span>=<span class="string">&quot;my.ttl.dlx&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;myDlxQueue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:direct-exchange</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>当消息过期后，会被移动到死信队列中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amqpTemplate.convertAndSend(<span class="string">&quot;my.dir.exchange&quot;</span>, <span class="string">&quot;my.ttl.dlx&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210103224657166.png" alt="在这里插入图片描述"></p><h2 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h2><p>延迟队列存储的对象是对应的延迟信息，所谓”延迟信息”是指消息被发送后，并不想让消费者立刻拿到消息，而是等待特定时间后，消费者才能拿到这个消息进行消费。</p><p>在RabbitMQ中延迟队列可以通过 <code>过期时间 + 死信队列</code>来实现</p><p>应用场景：电商中的支付场景，如果用户下单之后的几十分钟都没有支付成功，那个这个支付的订单则记为支付失败，要进行支付失败的异常处理（将库存加回去），这个时候可以通过延迟队列来实现。</p><p><img src="https://img-blog.csdnimg.cn/20210103134331250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h2><p>确认并保证消息送达，提供了两种方式：发布确认和事务（两者不可同时使用）。</p><p>发布确认的两种方式：消息发送成功确认，消息发送失败回调</p><p><strong>开启手动确认模式</strong></p><p>添加配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">publisher-confirms:</span> <span class="literal">true</span>        <span class="comment"># 开启Confirm确认机制</span></span><br><span class="line"><span class="attr">publisher-returns:</span> <span class="literal">true</span>         <span class="comment"># 开启Return确认机制</span></span><br><span class="line"><span class="attr">template:</span></span><br><span class="line">  <span class="attr">mandatory:</span> <span class="literal">true</span>               <span class="comment"># 消费者在消息没有被路由到合适的队列下会被return监听，不会自动删除</span></span><br><span class="line"><span class="attr">listener:</span></span><br><span class="line">  <span class="attr">simple:</span></span><br><span class="line">    <span class="attr">acknowledge-mode:</span> <span class="string">manual</span>    <span class="comment"># 消费端手动ACK</span></span><br><span class="line">    <span class="attr">retry:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span>             <span class="comment"># 是否支持重试</span></span><br></pre></td></tr></table></figure><p>消息确认处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConfirmCallback</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;correlationData = &quot;</span> + correlationData);</span><br><span class="line">        System.out.println(<span class="string">&quot;ack = &quot;</span> + ack);</span><br><span class="line">        <span class="keyword">if</span> (!ack)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息处理失败:&#123;&#125;&quot;</span>, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息返回处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageReturnCallback</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;returned Message ===&gt; message=&#123;&#125;, replyCode=&#123;&#125; ,replyText=&#123;&#125; ,exchange=&#123;&#125; ,routingKey=&#123;&#125;&quot;</span>, message, replyCode, replyText, exchange, routingKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息发送方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SardineRabbitSender</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MessageConfirmCallback messageConfirmCallback;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MessageReturnCallback messageReturnCallback;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String exchange, String routingKey, Object message)</span> &#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(messageConfirmCallback);</span><br><span class="line">        rabbitTemplate.setReturnCallback(messageReturnCallback);</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange, routingKey, message, msg -&gt; &#123;</span><br><span class="line">            msg.getMessageProperties().setDeliveryMode(MessageDeliveryMode.PERSISTENT);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(UUID.randomUUID().toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息接收方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SardineRabbitReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">            bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(value = &quot;boot.queue&quot;),</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;boot.exchange&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">                    key = &quot;boot.*&quot;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel.basicAck(deliveryTag,<span class="literal">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;收到消息: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息处理失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">if</span> (message.getMessageProperties().getRedelivered())&#123;</span><br><span class="line">                log.error(<span class="string">&quot;消息已重复处理失败，拒绝再次接收&quot;</span>);</span><br><span class="line">                channel.basicReject(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;消息即将再次返回队列处理&quot;</span>);</span><br><span class="line">                <span class="comment">// 消息处理失败，重新入队</span></span><br><span class="line">                channel.basicNack(deliveryTag, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sardineRabbitSender.send(<span class="string">&quot;boot.exchange&quot;</span>, <span class="string">&quot;boot.queue&quot;</span>,<span class="string">&quot;Hello Spring Boot&quot;</span>);</span><br></pre></td></tr></table></figure><p>测试结果（消息确认： <code>channel.basicAck(deliveryTag,false)</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">correlationData = CorrelationData [id=57808143-1800-4e0c-8405-f6e566fa06f1]</span><br><span class="line">ack = true</span><br><span class="line">收到消息: Hello Spring Boot</span><br></pre></td></tr></table></figure><p>测试结果（消息不确认：没有 <code>channel.basicAck(deliveryTag,false)</code>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">收到消息: Hello Spring <span class="type">Boot</span></span><br><span class="line"><span class="variable">correlationData</span> <span class="operator">=</span> CorrelationData [id=0e4890f3-9b02-<span class="number">44e1</span>-8dfc-49b4463415c2]</span><br><span class="line">ack = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="消息追踪"><a href="#消息追踪" class="headerlink" title="消息追踪"></a>消息追踪</h2><p>Docker环境下查看和启用rabbitmq消息追踪</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看rabbitmq所有插件</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmq<span class="literal">-plugins</span> list</span><br><span class="line"><span class="comment"># 启用rabbitmq_tracing</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmq<span class="literal">-plugins</span> enable rabbitmq_tracing</span><br><span class="line"><span class="comment"># 打开rabbitmq消息追踪</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmqctl trace_on</span><br><span class="line"><span class="comment"># 设置消息追踪的VHost</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmqctl trace_on <span class="literal">-p</span> sardine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭rabbitmq消息追踪</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmqctl trace_off</span><br><span class="line"><span class="comment"># 只有administrator角色才能查看日志界面</span></span><br><span class="line">docker exec <span class="literal">-it</span> rabbitmq rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>开启之后发现管理界面多了一个交换机 <code>amp.rabbitmq.trace</code></p><p><img src="https://img-blog.csdnimg.cn/2021010316423370.png" alt="在这里插入图片描述"></p><p>在admin界面中创建一个新的trace</p><p><img src="https://img-blog.csdnimg.cn/20210103164544972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>rabbitmq每发送一次消息都会往日志中写入，所以是比较消耗性能的，只在开发调试中使用</p><p>日志格式（TEXT）</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Node:         rabbit@node1</span><br><span class="line">Connection:   &lt;rabbit@node1.3.3552.0&gt;</span><br><span class="line">Virtual host: /</span><br><span class="line">User:         root</span><br><span class="line">Channel:      1</span><br><span class="line">Exchange:     exchange</span><br><span class="line">Routing keys: [&lt;&lt;&quot;rk&quot;&gt;&gt;]</span><br><span class="line">Routed queues: [&lt;&lt;&quot;queue&quot;&gt;&gt;]</span><br><span class="line">Properties:   [&#123;&lt;&lt;&quot;delivery<span class="built_in">_</span>mode&quot;&gt;&gt;,signedint,1&#125;,&#123;&lt;&lt;&quot;headers&quot;&gt;&gt;,table,[]&#125;]</span><br><span class="line">Payload: </span><br><span class="line">trace test payload.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kong</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Kong/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Kong/</url>
      
        <content type="html"><![CDATA[<h2 id="Kong的安装"><a href="#Kong的安装" class="headerlink" title="Kong的安装"></a>Kong的安装</h2><blockquote><p>Docker方式</p></blockquote><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1. 创建网络"></a>1. 创建网络</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure><h3 id="2-新建挂载卷"><a href="#2-新建挂载卷" class="headerlink" title="2. 新建挂载卷"></a>2. 新建挂载卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create kong-volume</span><br></pre></td></tr></table></figure><h3 id="3-启动Kong数据库容器"><a href="#3-启动Kong数据库容器" class="headerlink" title="3. 启动Kong数据库容器"></a>3. 启动Kong数据库容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">  --network=kong-net \</span><br><span class="line">  -p 5432:5432 \</span><br><span class="line">  -v kong-volume:/var/lib/postgresql/data \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_PASSWORD=kongpass&quot;</span> \</span><br><span class="line">  postgres:9.6</span><br></pre></td></tr></table></figure><h3 id="4-初始化Kong数据"><a href="#4-初始化Kong数据" class="headerlink" title="4. 初始化Kong数据"></a>4. 初始化Kong数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> --network=kong-net \</span><br><span class="line">  -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_PASSWORD=kongpass&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PASSWORD=test&quot;</span> \</span><br><span class="line"> kong/kong-gateway:2.8.1.1-alpine kong migrations bootstrap</span><br></pre></td></tr></table></figure><h3 id="5-启动kong-gateway容器"><a href="#5-启动kong-gateway容器" class="headerlink" title="5. 启动kong-gateway容器"></a>5. 启动kong-gateway容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-gateway \</span><br><span class="line">  --network=kong-net \</span><br><span class="line">  -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_USER=kong&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PG_PASSWORD=kongpass&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;KONG_ADMIN_GUI_URL=http://localhost:8002&quot;</span> \</span><br><span class="line">  -e KONG_LICENSE_DATA \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -p 8443:8443 \</span><br><span class="line">  -p 8001:8001 \</span><br><span class="line">  -p 8444:8444 \</span><br><span class="line">  -p 8002:8002 \</span><br><span class="line">  -p 8445:8445 \</span><br><span class="line">  -p 8003:8003 \</span><br><span class="line">  -p 8004:8004 \</span><br><span class="line">  kong/kong-gateway:2.8.1.1-alpine</span><br></pre></td></tr></table></figure><h3 id="6-测试是否安装成功"><a href="#6-测试是否安装成功" class="headerlink" title="6. 测试是否安装成功"></a>6. 测试是否安装成功</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问</span><br><span class="line">http://localhost:8001</span><br><span class="line">http://localhost:8002</span><br></pre></td></tr></table></figure><h2 id="Kong管理后台Konga安装"><a href="#Kong管理后台Konga安装" class="headerlink" title="Kong管理后台Konga安装"></a>Kong管理后台Konga安装</h2><h3 id="1-新建挂载卷"><a href="#1-新建挂载卷" class="headerlink" title="1. 新建挂载卷"></a>1. 新建挂载卷</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create konga-volume</span><br></pre></td></tr></table></figure><h3 id="2-启动Konga数据库容器"><a href="#2-启动Konga数据库容器" class="headerlink" title="2. 启动Konga数据库容器"></a>2. 启动Konga数据库容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name konga-database \</span><br><span class="line">  --network=kong-net \</span><br><span class="line">  -p 5433:5432 \</span><br><span class="line">  -v konga-volume:/var/lib/postgresql/data \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_USER=konga&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_DB=konga&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;POSTGRES_PASSWORD=konga&quot;</span> \</span><br><span class="line">  postgres:9.6</span><br></pre></td></tr></table></figure><h3 id="3-初始Konga数据"><a href="#3-初始Konga数据" class="headerlink" title="3. 初始Konga数据"></a>3. 初始Konga数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> --network=kong-net \</span><br><span class="line">pantsel/konga:latest -c prepare -a postgres -u postgres://konga:konga@konga-database:5432/konga</span><br></pre></td></tr></table></figure><h3 id="4-启动Konga容器"><a href="#4-启动Konga容器" class="headerlink" title="4. 启动Konga容器"></a>4. 启动Konga容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1337:1337 \</span><br><span class="line">--network kong-net \</span><br><span class="line">--name konga \</span><br><span class="line">-e <span class="string">&quot;DB_ADAPTER=postgres&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;DB_URI=postgres://konga:konga@konga-database:5432&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;NODE_ENV=production&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;DB_PASSWORD=konga&quot;</span> \</span><br><span class="line">pantsel/konga</span><br></pre></td></tr></table></figure><h3 id="5-注册登陆后建立连接并激活"><a href="#5-注册登陆后建立连接并激活" class="headerlink" title="5. 注册登陆后建立连接并激活"></a>5. 注册登陆后建立连接并激活</h3><p><img src="https://img-blog.csdnimg.cn/3a92f6cf363d4a809c0376c98a4217bf.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/facdd2627c274f7d909135dfd6e29667.png" alt="在这里插入图片描述"></p><h2 id="动态负载均衡配置"><a href="#动态负载均衡配置" class="headerlink" title="动态负载均衡配置"></a>动态负载均衡配置</h2><h3 id="组件说明"><a href="#组件说明" class="headerlink" title="组件说明"></a>组件说明</h3><p>service：服务，可以直接指向一个API服务节点（host参数设置为ip+port），也可以指定一个upstream实现负载均衡。简单来说，服务用于映射被转发的后端API的节点集合。</p><p>route：路由，它负责匹配实际请求，映射到service中。</p><p>upstream：对应一组API节点，实现负载均衡。</p><p>target：对应一个API节点。</p><img src="https://img-blog.csdnimg.cn/f4c6e213e4bb4beeb1ef2e0a0ead5a62.png" alt="在这里插入图片描述" style="zoom:50%;" /><h3 id="1-配置upstreams"><a href="#1-配置upstreams" class="headerlink" title="1. 配置upstreams"></a>1. 配置upstreams</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://127.0.0.1:8001/upstreams --data <span class="string">&quot;name=my-upstream&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-配置target"><a href="#2-配置target" class="headerlink" title="2. 配置target"></a>2. 配置target</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://127.0.0.1:8001/upstreams/my-upstream/targets --data <span class="string">&quot;target=192.168.0.108:14251&quot;</span> --data <span class="string">&quot;weight=100&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置service"><a href="#3-配置service" class="headerlink" title="3. 配置service"></a>3. 配置service</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># name: service的名称</span></span><br><span class="line"><span class="comment"># host: upstream的名称</span></span><br><span class="line">curl -X POST http://127.0.0.1:8001/services --data <span class="string">&quot;name=my-service&quot;</span> --data <span class="string">&quot;host=my-upstream&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4-配置route"><a href="#4-配置route" class="headerlink" title="4. 配置route"></a>4. 配置route</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://127.0.0.1:8001/services/my-service/routes --data <span class="string">&quot;name=my-route&quot;</span> --data <span class="string">&quot;paths[]=/pms&quot;</span></span><br></pre></td></tr></table></figure><h2 id="鉴权配置"><a href="#鉴权配置" class="headerlink" title="鉴权配置"></a>鉴权配置</h2><h3 id="Basic-Auth"><a href="#Basic-Auth" class="headerlink" title="Basic Auth"></a>Basic Auth</h3><h4 id="1-在service中增加一个插件basic-auth"><a href="#1-在service中增加一个插件basic-auth" class="headerlink" title="1. 在service中增加一个插件basic-auth"></a>1. 在service中增加一个插件basic-auth</h4><blockquote><p>service维度的鉴权</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f40ace592054492faa81bc9b22a7d4c7.png" alt="在这里插入图片描述"></p><h4 id="2-增加一个consumer"><a href="#2-增加一个consumer" class="headerlink" title="2. 增加一个consumer"></a>2. 增加一个consumer</h4><p><img src="https://img-blog.csdnimg.cn/4e8be530d4b240968d8984fa17576705.png" alt="在这里插入图片描述"></p><h4 id="3-在登陆时增加basic-auth"><a href="#3-在登陆时增加basic-auth" class="headerlink" title="3. 在登陆时增加basic-auth"></a>3. 在登陆时增加basic-auth</h4><p><img src="https://img-blog.csdnimg.cn/0afdec090b744d008b55799ac5cf27f6.png" alt="在这里插入图片描述"></p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><h4 id="1-添加JWT插件"><a href="#1-添加JWT插件" class="headerlink" title="1. 添加JWT插件"></a>1. 添加JWT插件</h4><p><img src="https://img-blog.csdnimg.cn/49542558f67c4ec38ac991bc5b6fd7bb.png" alt="在这里插入图片描述"></p><h4 id="2-消费者配置JWT"><a href="#2-消费者配置JWT" class="headerlink" title="2. 消费者配置JWT"></a>2. 消费者配置JWT</h4><p><img src="https://img-blog.csdnimg.cn/437efb2e227a43cd947521e55d7ea7bb.png" alt="在这里插入图片描述"></p><h4 id="3-生成JWT密文"><a href="#3-生成JWT密文" class="headerlink" title="3. 生成JWT密文"></a>3. 生成JWT密文</h4><p><a href="https://jwt.io/">https://jwt.io/</a></p><p>key作为iss，secret作为盐</p><p><img src="https://img-blog.csdnimg.cn/fe688259069f4a95adc9532b7dafbaa3.png" alt="在这里插入图片描述"></p><h4 id="4-构造请求头"><a href="#4-构造请求头" class="headerlink" title="4. 构造请求头"></a>4. 构造请求头</h4><p>请求时加上请求头Authorization，内容为 <code>Bearer 密文</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJpc3MiOiJjb3JTUTRteGM3QWlIUUVGaERPOEtzb043NXlXZnA3NSJ9._p2YA2v1oieEGWWcfHHJSqBhl5nAppfZHkBAGNDFZQA</span><br></pre></td></tr></table></figure><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><h3 id="添加插件Rate-limiting"><a href="#添加插件Rate-limiting" class="headerlink" title="添加插件Rate-limiting"></a>添加插件Rate-limiting</h3><p>可以配置秒、分钟、小时、天等多个维度，可以接受多少请求</p><p><img src="https://img-blog.csdnimg.cn/be52d6b72f1d496baf03b143393a2776.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MQ 常见问题</title>
      <link href="/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/swan-blog/2022/07/26/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/MQ%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><p>当生产者生产的速度长时间远远大于消费的速度时，就会造成消息堆积。</p><ul><li>消息堆积的影响<ul><li>可能导致新消息无法进入队列</li><li>可以导致旧消息无法丢失</li><li>消息等待的消费时间过长，超出了业务容忍范围</li></ul></li><li>产生堆积的情况<ul><li>生产者突然大量发布消息</li><li>消费者消费失败</li><li>消费者出现性能瓶颈</li></ul></li><li>解决办法<ul><li>排查消费者的性能瓶颈</li><li>增加消费者的多线程处理</li><li>部署多个消费者</li></ul></li></ul><p><strong>消息已经堆积如何解决</strong></p><p>消息队列堆积，想办法把消息转移到一个新的队列，增加服务器来慢慢消费。</p><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p>消息生产者发送消息成功，但是MQ没有收到消息，消息在从生产者传输到MQ的过程中丢失，一般是由于网络不稳定等原因。</p><p><strong>解决方案</strong></p><ol><li><p>采用RabbitMQ的消息确认机制，当消息成功被MQ接收到时，会给生产者发送一个确认消息表示接收成功。</p><p>RabbitMQ发送方消息确认模式有三种：普通确认模式，批量确认模式，异步监听确认模式。</p><p>异步监听确认模式：边发送消息边进行确认，不影响主线程任务进行。</p></li><li><p>RabbitMQ持久化交换机、队列、消息，确保MQ服务重启时能从磁盘恢复对应的交换机、队列和消息。</p><p>Spring整合后默认开启了交换机、队列、消息的持久化。</p></li></ol><h2 id="有序消费"><a href="#有序消费" class="headerlink" title="有序消费"></a>有序消费</h2><p><strong>场景1</strong></p><p>当RabbitMQ采用Work Queue模式，此时只会有一个Queue但是会有多个Consumer，同时多个Consumer直接是竞争关系，此时就会出现MQ消息乱序的问题。</p><p>解决方案：生产者根据 ID 计算出一个 Hash 值，然后对队列的个数取余，可以让相同 ID 的所有操作压到同一个队列，且每个队列都只有一个消费者，此时就不会出现乱序的情况。</p><p><img src="https://img-blog.csdnimg.cn/20210126162412781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>场景2</strong></p><p>当RabbitMQ采用简单队列模式的时候，如果消费者采用多线程处理消息，会出现消息乱序的问题。</p><p>解决方案：消费者拉取消息然后根据 ID 算出一个 Hash 然后把相同 ID 的数据压到同一个内存队列，让同一个线程去处理，保证有序。</p><p><img src="https://img-blog.csdnimg.cn/20210126162801750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h2><p>为了防止消息在消费端丢失，会采用手动确认MQ的方式来解决，但是会引出一个问题，消费者处理消息成功，回复MQ时由于网络不稳定等因素未成功，MQ认为消费者消费失败，会通过消息的重发导致重复消费。</p><p>解决方案</p><p>使用redis的setnx命令存储消息id，每次消费前先查询该消息id是否存在，如果存在证明已经消费过则不再进行消费。</p><blockquote><p>setnx(key,value)如果key不存在则插入成功且返回1，如果key存在则不操作且返回0</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/swan-blog/2022/07/26/%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="网络七层协议"><a href="#网络七层协议" class="headerlink" title="网络七层协议"></a>网络七层协议</h2><p><img src="https://img-blog.csdnimg.cn/20210106222050238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="读取百度网页源代码"><a href="#读取百度网页源代码" class="headerlink" title="读取百度网页源代码"></a>读取百度网页源代码</h2><p>第一步：建立连接</p><p>第二步：传输数据（Http协议，规范标准）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /proc/<span class="variable">$</span><span class="variable">$</span>/fd</span><br><span class="line">exec <span class="number">8</span>&lt;&gt; /dev/tcp/www.baidu.com/<span class="number">80</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&#x27;GET /HTTP/1.0\n&#x27;</span> &gt;&amp; <span class="number">8</span></span><br><span class="line"><span class="built_in">cat</span> <span class="number">0</span>&lt;&amp; <span class="number">8</span></span><br></pre></td></tr></table></figure><h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><p>传输控制层：TCP，UDP</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><blockquote><p>三次握手 &gt; 数据传输 &gt; 四次挥手</p><p>称为一个最小粒度 – 不可被分割</p></blockquote><p>TCP：面向连接的可靠的传输协议</p><p>TCP建立连接需要三次握手，三次握手之后双方才会在各自的内存开辟空间</p><p>一台服务器端口的数量：65535</p><p>对于服务器：通过一个端口号可以响应多个QPS</p><p>对于客户端：访问就要建立连接，即访问一个服务器就要占用一个端口</p><p><strong>三次握手</strong></p><ol><li><p>客户端向服务器发出连接请求报文</p></li><li><p>TCP服务器收到请求报文后，如果同意连接，则发出确认报文</p></li><li><p>TCP客户进程收到确认后，还要向服务器给出确认</p></li></ol><p><strong>四次挥手</strong></p><ol><li><p>TCP发送一个FIN(结束)，用来关闭客户到服务端的连接</p></li><li><p>服务端收到这个FIN，他发回一个ACK(确认)</p></li><li><p>服务端发送一个FIN(结束)到客户端，服务端关闭客户端的连接</p></li><li><p>客户端发送ACK(确认)报文确认，并将确认的序号+1，这样关闭完成</p></li></ol><p><strong>查看Socket连接</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="literal">-natp</span></span><br><span class="line">Proto Recv<span class="literal">-Q</span> <span class="built_in">Send-Q</span> Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">22</span>              <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      <span class="number">940</span>/sshd</span><br><span class="line">tcp        <span class="number">0</span>     <span class="number">36</span> <span class="number">172.30</span>.<span class="number">143.74</span>:<span class="number">22</span>        <span class="number">115.198</span>.<span class="number">249.180</span>:<span class="number">51816</span>   ESTABLISHED <span class="number">5789</span>/sshd: root@pts</span><br></pre></td></tr></table></figure><p>Local Address：本地连接地址</p><p>Foregin Address：远程连接地址</p><p>0.0.0.0:22 相当于主进程，当有客户端请求成功，就抛出一个线程进行连接</p><p><strong>TCP在网络拥堵时的处理</strong></p><blockquote><p>堵塞控制是调节 TCP 连接上单次发送的分组数量的算法，通过增减单次发送量逐步调整，使之逼近当前网络的承载量</p></blockquote><p><a href="https://blog.csdn.net/itworld123/article/details/102983947">https://blog.csdn.net/itworld123/article/details/102983947</a></p><p>慢开始（slow - start）</p><p>堵塞避免（congestion avoidance）</p><p>快重传（fast retransmit）</p><p>快恢复（fast recovery）</p><h3 id="IP地址、子网掩码、网关"><a href="#IP地址、子网掩码、网关" class="headerlink" title="IP地址、子网掩码、网关"></a>IP地址、子网掩码、网关</h3><p>ip地址和子网掩码会进行按位与运算</p><p>举例说明</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IPADDR=<span class="number">192.168</span>.<span class="number">150.14</span></span><br><span class="line">NETMASK=<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"><span class="comment"># 按位与 运算后 ip = 192.168.150.0 ，你所处的网段是192.168.150</span></span><br></pre></td></tr></table></figure><p><strong>查看路由表</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">route <span class="literal">-n</span></span><br><span class="line"></span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line"><span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">172.30</span>.<span class="number">143.253</span>  <span class="number">0.0</span>.<span class="number">0.0</span>         UG    <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> eth0</span><br><span class="line"><span class="number">169.254</span>.<span class="number">0.0</span>     <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">0.0</span>     U     <span class="number">1002</span>   <span class="number">0</span>        <span class="number">0</span> eth0</span><br><span class="line"><span class="number">172.17</span>.<span class="number">0.0</span>      <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">0.0</span>     U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> docker0</span><br><span class="line"><span class="number">172.30</span>.<span class="number">128.0</span>    <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">240.0</span>   U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> eth0</span><br></pre></td></tr></table></figure><p><code>gateway 0.0.0.0</code> 解释：同一局域网内无需通过下一跳通信，可以直接通信。</p><p>如果想访问一个外网地址 <code>69.135.169.121</code> 他会先与子网掩码做 <code>按位与运算</code>，做完运算再判断是否处在那个网段，只有匹配上了再进行转发。</p><p>如上述路由表，<code>69.135.169.121</code> 与运算后只能跟 <code>0.0.0.0</code> 所匹配，所以会找到这个网关跳出局域网转发出去。</p><p><strong>查看IP地址和网卡硬件地址的映射</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arp <span class="literal">-a</span></span><br><span class="line"></span><br><span class="line">? (<span class="number">172.17</span>.<span class="number">0.4</span>) at <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">04</span> [<span class="type">ether</span>] on docker0</span><br><span class="line">gateway (<span class="number">172.30</span>.<span class="number">143.253</span>) at ee:ff:ff:ff:ff:ff [<span class="type">ether</span>] on eth0</span><br><span class="line">? (<span class="number">172.17</span>.<span class="number">0.3</span>) at <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">03</span> [<span class="type">ether</span>] on docker0</span><br><span class="line">? (<span class="number">172.17</span>.<span class="number">0.5</span>) at <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">05</span> [<span class="type">ether</span>] on docker0</span><br><span class="line">? (<span class="number">172.17</span>.<span class="number">0.2</span>) at <span class="number">02</span>:<span class="number">42</span>:<span class="built_in">ac</span>:<span class="number">11</span>:<span class="number">00</span>:<span class="number">02</span> [<span class="type">ether</span>] on docker0</span><br></pre></td></tr></table></figure><p>结论：TCP&#x2F;IP协议，基于下一跳机制，IP是基于端点间，mac是基于节点间。</p><h3 id="浏览器同源策略与跨域"><a href="#浏览器同源策略与跨域" class="headerlink" title="浏览器同源策略与跨域"></a>浏览器同源策略与跨域</h3><h4 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h4><p>域名、协议、端口都会造成不同源</p><p>浏览器的同源策略是一种安全功能，同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。所以a.com下的js脚本采用ajax读取b.com里面的文件数据是会报错的。</p><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;、&lt;img&gt; 、&lt;iframe&gt;、&lt;link&gt;、&lt;video&gt;这些标签都可以发起跨域请求</span><br></pre></td></tr></table></figure><h5 id="jsonp跨域访问原理"><a href="#jsonp跨域访问原理" class="headerlink" title="jsonp跨域访问原理"></a>jsonp跨域访问原理</h5><p>此方法只能发起GET请求，通过jsonp发送的请求，会随带 cookie 一起发送。</p><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><p>在浏览器中指定Origin来源，如果在服务器接受范围，请求则成功</p><p>CORS与JSONP的使用目的相同，但是比JSONP更强大。</p><p>JSONP只支持 GET 请求，CORS支持所有类型的 HTTP 请求。</p><p>JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><p>对称加密：DES, 3DES, AEC</p><p>非对称加密：公钥、私钥，公钥通过私钥生成</p><ol><li>明文 &gt; 公钥加密 &gt; 密文 &gt; 私钥解密 &gt; 明文</li><li>明文 &gt; 私钥加密 &gt; 密文 &gt; 公钥解密 &gt; 明文</li></ol><p><strong>流程</strong></p><p>第一次请求，服务器把公钥返回给客户端</p><p>第二次请求，客户端拿刚下发的公钥对数据加密，发送给服务器</p><p><strong>风险</strong></p><p>代理服务器拦截到这个请求，虽然解不开数据包，但是可以通过公钥加密发送一个伪请求</p><p>代理服务器还可以伪造公钥和私钥，浏览器无法判断公钥是不是真的服务器下发的</p><h3 id="证书和数字签名"><a href="#证书和数字签名" class="headerlink" title="证书和数字签名"></a>证书和数字签名</h3><blockquote><p>可以解决伪造公钥私钥的问题</p></blockquote><p>Https中，客户端在走80端口前会先走443端口来获取服务端下发的证书，并生成加密的随机数给服务端</p><p><img src="https://img-blog.csdnimg.cn/20210218212333383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在向443发完请求之后，向80端口发请求</p><p><img src="https://img-blog.csdnimg.cn/20210218205803436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 系统设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/Mongodb/</url>
      
        <content type="html"><![CDATA[<h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.2.8.tgz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar xf mongodb-linux-x86_64-ubuntu1604-4.2.8.tgz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置安装路径</span></span><br><span class="line">export PATH=/usr/local/mongodb4/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>下载地址 <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>配置完环境变量后，创建data文件夹，执行以下命名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath E:\Software\MongoDB\data</span><br></pre></td></tr></table></figure><h3 id="Studio-3T"><a href="#Studio-3T" class="headerlink" title="Studio 3T"></a>Studio 3T</h3><p>下载地址 <a href="https://studio3t.com/download/">https://studio3t.com/download/</a></p><p>破解：重置试用日期</p><p>新建文件 studio3T.bat 到 C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</p><p>运行启动即可</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">ECHO 重置Studio 3T的使用日期......</span><br><span class="line">REG DELETE &quot;HKEY<span class="built_in">_</span>CURRENT<span class="built_in">_</span>USER<span class="keyword">\Software</span><span class="keyword">\JavaSoft</span><span class="keyword">\Prefs</span><span class="keyword">\3</span>t<span class="keyword">\mongochef</span><span class="keyword">\enterprise</span>&quot; /f</span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\.3T\studio-3t\soduz3vqhnnja46uvu3szq--</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\.3T\studio-3t\Lwm3TdTxgYJkXBgVk4s3</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\AppData\Local\t3\dataman\mongodb\app\AppRunner</span></span><br><span class="line">RMDIR /s /q C:<span class="keyword">\Users</span><span class="keyword">\Public</span><span class="keyword">\t</span>3<span class="keyword">\dataman</span><span class="keyword">\mongodb</span><span class="keyword">\app</span><span class="keyword">\AppRunner</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\AppData\Local\Temp\t3\dataman\mongodb\app\AppRunner</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\AppData\Local\ftuwWNWoJl-STeZhVGHKkQ--</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\AppData\Local\Temp\ftuwWNWoJl-STeZhVGHKkQ--</span></span><br><span class="line">RMDIR /s /q <span class="comment">%USERPROFILE%\.cache\ftuwWNWoJl-STeZhVGHKkQ--</span></span><br><span class="line">ECHO 重置完成, 按任意键退出......</span><br><span class="line">pause&gt;nul</span><br><span class="line">EXIT</span><br></pre></td></tr></table></figure><h2 id="mongodb基本操作"><a href="#mongodb基本操作" class="headerlink" title="mongodb基本操作"></a>mongodb基本操作</h2><h3 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1. 数据库操作"></a>1. 数据库操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- databaseName: 数据库名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line">use <span class="operator">&lt;</span>databaseName<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="2-集合操作"><a href="#2-集合操作" class="headerlink" title="2. 集合操作"></a>2. 集合操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- collectionName: 集合名称</span></span><br><span class="line"><span class="comment">-- options: 可选参数, 指定有关内存大小及索引的选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建集合</span></span><br><span class="line">db.createCollection(<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>, <span class="operator">&lt;</span>options<span class="operator">&gt;</span>)</span><br><span class="line"><span class="comment">-- 删除集合</span></span><br><span class="line">db.<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>.<span class="keyword">drop</span>()</span><br></pre></td></tr></table></figure><h3 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h3><p>查询文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query ：可选，使用查询操作符指定查询条件</span></span><br><span class="line"><span class="comment">-- projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</span></span><br><span class="line"></span><br><span class="line">db.collection.find(<span class="operator">&lt;</span>query<span class="operator">&gt;</span>, <span class="operator">&lt;</span>projection<span class="operator">&gt;</span>)</span><br><span class="line">db.collection.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- and 查询</span></span><br><span class="line">db.col.find(</span><br><span class="line">    &#123;</span><br><span class="line">    k1:v1, k2:v2</span><br><span class="line">    &#125;</span><br><span class="line">).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- or 查询</span></span><br><span class="line">db.col.find(</span><br><span class="line">   &#123;$<span class="keyword">or</span>: [&#123;k1: v1&#125;, &#123;k2:v2&#125;]&#125;</span><br><span class="line">).pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">-- or and 结合查询</span></span><br><span class="line">db.col.find(</span><br><span class="line">   &#123;ka1:va1, ka2:va2&#125;,</span><br><span class="line">   &#123;$<span class="keyword">or</span>: [&#123;ko1: vo1&#125;, &#123;ko2:vo2&#125;]&#125;</span><br><span class="line">).pretty()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插入文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- collectionName: 集合名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可传数组或对象</span></span><br><span class="line">db.<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>.<span class="keyword">insert</span>(<span class="operator">&lt;</span>document<span class="operator">&gt;</span>)</span><br><span class="line"><span class="comment">-- 只能传对象</span></span><br><span class="line">db.<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>.insertOne(<span class="operator">&lt;</span>document<span class="operator">&gt;</span>)</span><br><span class="line"><span class="comment">-- 只能传数组</span></span><br><span class="line">db.<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>.insertMany(<span class="operator">&lt;</span>document<span class="operator">&gt;</span>)</span><br><span class="line"></span><br><span class="line">db.<span class="operator">&lt;</span>collectionName<span class="operator">&gt;</span>.save(<span class="operator">&lt;</span>document<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p>更新文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query: 查询条件</span></span><br><span class="line"><span class="comment">-- update: update的对象和一些更新的操作符</span></span><br><span class="line"><span class="comment">-- upsert(Boolean): 可选，如果不存在update的记录，是否插入新数据，默认false</span></span><br><span class="line"><span class="comment">-- multi(Boolean): 可选，只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新，默认false</span></span><br><span class="line"><span class="comment">-- writeConcern :可选，抛出异常的级别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新操作符</span></span><br><span class="line"><span class="comment">-- $set: 修改文档中的指定属性</span></span><br><span class="line"><span class="comment">-- $unset: 删除文档中的指定属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- update默认只修改一个</span></span><br><span class="line">db.collection.update(</span><br><span class="line">   <span class="operator">&lt;</span>query<span class="operator">&gt;</span>,</span><br><span class="line">   <span class="operator">&lt;</span><span class="keyword">update</span><span class="operator">&gt;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: <span class="operator">&lt;</span>upsert<span class="operator">&gt;</span>,</span><br><span class="line">     multi: <span class="operator">&lt;</span>multi<span class="operator">&gt;</span>,</span><br><span class="line">     writeConcern: <span class="operator">&lt;</span>writeConcern<span class="operator">&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- example</span></span><br><span class="line"><span class="comment">-- 修改第一个文档</span></span><br><span class="line">db.inventory.updateOne(</span><br><span class="line">&#123;item: &quot;paper&quot;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    $<span class="keyword">set</span>: &#123;status: &quot;P&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改所有符合条件的文档</span></span><br><span class="line">db.inventory.updatMany(</span><br><span class="line">&#123;item: &quot;paper&quot;&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    $<span class="keyword">set</span>: &#123;status: &quot;P&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>删除文档</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- query: 查询条件</span></span><br><span class="line"><span class="comment">-- justOne: 可选，如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</span></span><br><span class="line"><span class="comment">-- writeConcern :可选，抛出异常的级别。</span></span><br><span class="line"></span><br><span class="line">db.collection.remove(</span><br><span class="line">   <span class="operator">&lt;</span>query<span class="operator">&gt;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: <span class="operator">&lt;</span>justOne<span class="operator">&gt;</span>,</span><br><span class="line">     writeConcern: <span class="operator">&lt;</span>writeConcern<span class="operator">&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="SpringBoot整合Mongodb"><a href="#SpringBoot整合Mongodb" class="headerlink" title="SpringBoot整合Mongodb"></a>SpringBoot整合Mongodb</h2><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Mongodb --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.uri</span>=<span class="string">mongodb://name:pass@localhost:27017/test</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SardineUserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;Jerry&quot;</span>).setAge(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        mongoTemplate.insert(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">        mongoTemplate.updateFirst(query, Update.update(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>), Student.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">        List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span><br><span class="line">        System.out.println(students);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findPage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> Query.query(Criteria.where(<span class="string">&quot;name&quot;</span>).is(<span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">        query.with(PageRequest.of(<span class="number">0</span>, <span class="number">2</span>)); <span class="comment">// page从0开始</span></span><br><span class="line">        query.with(Sort.by(Sort.Direction.ASC, <span class="string">&quot;age&quot;</span>));</span><br><span class="line">        List&lt;Student&gt; students = mongoTemplate.find(query, Student.class);</span><br><span class="line">        System.out.println(students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Sleuth</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Sleuth/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Sleuth/</url>
      
        <content type="html"><![CDATA[<h2 id="链路追踪的目的"><a href="#链路追踪的目的" class="headerlink" title="链路追踪的目的"></a>链路追踪的目的</h2><p>如果能跟踪每个请求，中间请求经过哪些微服务，请求耗时，网络延迟，业务逻辑耗时等。我们就能更好地分析系统瓶颈、解决系统问题。</p><p>链路追踪目的：解决错综复杂的服务调用中链路的查看。排查慢服务。</p><p>市面上链路追踪产品大部分都是基于google的Dapper论文</p><p>zipkin,twitter：开源的，是严格按照谷歌的Dapper论文来的</p><p>pinpoint：韩国的 Naver 公司的</p><p>Cat：美团点评</p><p>EagleEye：淘宝</p><h2 id="链路追踪要考虑的几个问题"><a href="#链路追踪要考虑的几个问题" class="headerlink" title="链路追踪要考虑的几个问题"></a>链路追踪要考虑的几个问题</h2><ol><li>探针的性能消耗，尽量不影响服务本身。</li><li>易用，开发可以很快接入，别浪费太多精力。</li><li>数据分析，要实时分析，维度足够。</li></ol><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h2><blockquote><p>Sleuth 是 Spring Cloud 的分布式跟踪解决方案</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li><p>span：基本工作单元，一次链路调用，创建一个span</p><p>span 用一个64位 ID 唯一标识。包括：ID，描述，时间戳事件，spanId，span父id</p><p>span 被启动和停止时，记录了时间信息，初始化span叫：root span，它的 span id 和 trace id 相等</p></li><li><p>trace：一组共享 <code>root span</code> 的 span 组成的树状结构称为 trace</p><p>trace 也有一个64位 ID，trace 中所有 span 共享一个 trace id，类似于一颗 span 树。</p></li><li><p>annotation：用来记录事件的存在，核心annotation用来定义请求的开始和结束。</p><ol><li><p>CS：Client Send，客户端发起请求，客户端发起请求描述了span开始。</p></li><li><p>SR：Server Received，服务端接到请求，服务端获得请求并准备处理它，SR-CS&#x3D;网络延迟。</p></li><li><p>SS：Server Send，服务器端处理完成，并将结果发送给客户端，表示服务器完成请求处理，响应客户端时，SS-SR&#x3D;服务器处理请求的时间。</p></li><li><p>CR：Client Received，客户端接受服务端信息，span结束的标识，客户端接收到服务器的响应，CR-CS&#x3D;客户端发出请求到服务器响应的总时间。</p></li></ol></li></ol><p>其实数据结构是一颗树，从root span 开始。</p><h3 id="Sleuth-使用"><a href="#Sleuth-使用" class="headerlink" title="Sleuth 使用"></a>Sleuth 使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Sleuth --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请求日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- 发起调用方 ---</span><br><span class="line">[api-driver,1a409c98e7a3cdbf,1a409c98e7a3cdbf,true] </span><br><span class="line"></span><br><span class="line">--- 接收调用方 ---</span><br><span class="line">[service-sms,1a409c98e7a3cdbf,b3d93470b5cf8434,true]</span><br><span class="line"></span><br><span class="line">--- 参数解释 ---</span><br><span class="line">[服务名称，traceId（一条请求调用链中 唯一ID），spanID（基本的工作单元，获取数据等），是否让zipkin收集和展示此信息]</span><br></pre></td></tr></table></figure><h2 id="Spring-Cloud-Zipkin"><a href="#Spring-Cloud-Zipkin" class="headerlink" title="Spring Cloud Zipkin"></a>Spring Cloud Zipkin</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>zipkin是twitter开源的分布式跟踪系统。</p><p>原理收集系统的时序数据，从而追踪微服务架构中系统延时等问题，还有一个友好的界面。</p><p>ZipKin的组成：Collector、Storage、Restful Api、Web UI</p><p>Sleuth 收集跟踪信息通过 http 请求发送给 Zipkin Server，Zipkin 将跟踪信息存储，以及提供RESTful API接口，Zipkin UI 通过调用 Api进行数据展示。默认内存存储，可以用mysql，ES等存储。</p><h3 id="ZipKin-使用"><a href="#ZipKin-使用" class="headerlink" title="ZipKin 使用"></a>ZipKin 使用</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zipkin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411/</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">rate:</span> <span class="number">1</span>  <span class="comment">#采样比例1</span></span><br></pre></td></tr></table></figure><p>下载启动 ZipKin</p><p><a href="https://zipkin.io/pages/quickstart.html">https://zipkin.io/pages/quickstart.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://zipkin.io/quickstart.sh | bash -s</span><br><span class="line">java -jar zipkin.jar</span><br></pre></td></tr></table></figure><p>访问地址：<a href="http://localhost:9411/">http://localhost:9411/</a></p><p><img src="https://img-blog.csdnimg.cn/20210208165821768.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20IOC/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-容器"><a href="#Spring-容器" class="headerlink" title="Spring 容器"></a>Spring 容器</h2><h3 id="Spring-容器-概述"><a href="#Spring-容器-概述" class="headerlink" title="Spring 容器 概述"></a>Spring 容器 概述</h3><p>IoC也称为依赖注入（DI）。 在此过程中，对象仅通过构造函数参数，工厂方法的参数或在构造或从工厂方法返回后在对象实例上设置的属性来定义其依赖项 。 然后，容器在创建bean时注入那些依赖项。 此过程从根本上讲是通过使用类的直接构造或诸如服务定位器模式之类的控件来控制其依赖项的实例化或位置的bean本身的逆过程（因此称为Control的倒置）。</p><p>核心依赖包：<code>org.springframework.beans</code> <code>org.springframework.context</code></p><p>BeanFacotory接口提供了能管理任何类型对象的配置机制，ApplicationContext是它的一个子接口，增加了如下机制：</p><ul><li>Spring AOP 特性的简单集成</li><li>消息资源处理</li><li>事件发布</li><li>应用层面类似 <code>WebApplicationContext</code> 的上下文用于Web应用</li></ul><p>ApplicationContext接口代表Spring IoC容器，并负责实例化，配置和组装Bean</p><p>容器通过读取配置元数据获取有关要实例化，配置和组装哪些对象的指令。</p><p>配置元数据：XML，Java注解，Java代码</p><p>ApplicationContext 常用的两种实现：ClassPathXmlApplicationContext, FileSystemXmlApplicationContext</p><h3 id="Spring-容器整体视图"><a href="#Spring-容器整体视图" class="headerlink" title="Spring 容器整体视图"></a>Spring 容器整体视图</h3><p><img src="https://img-blog.csdnimg.cn/fb97a6a80f914605b92aeb07cc2470bf.png" alt="在这里插入图片描述"></p><h3 id="Spring-接口"><a href="#Spring-接口" class="headerlink" title="Spring 接口"></a>Spring 接口</h3><h4 id="Spring顶层接口图"><a href="#Spring顶层接口图" class="headerlink" title="Spring顶层接口图"></a>Spring顶层接口图</h4><p><img src="https://img-blog.csdnimg.cn/bc2074457f8f4aabad6e23615f2cc6b7.png" alt="在这里插入图片描述"></p><h4 id="BeanRegistry"><a href="#BeanRegistry" class="headerlink" title="BeanRegistry"></a>BeanRegistry</h4><p>Spring 配置文件中每一个<code>&lt;bean&gt;</code>节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册 BeanDefinition 对象的方法。</p><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p><img src="https://img-blog.csdnimg.cn/ba357bb3e1bd496db88567d133da975d.png" alt="在这里插入图片描述"></p><ul><li><strong>BeanFactory</strong>： ApplicationContext 想要访问容器，就必须继承BeanFactory</li><li><strong>ApplicationEventPublisher</strong>：让容器拥有发布应用上下文事件的功能，包括容器启动事件、关闭事件等。实现了 ApplicationListener 事件监听接口的 Bean 可以接收到容器事件 ， 并对事件进行响应处理 。 在 ApplicationContext 抽象实现类AbstractApplicationContext 中，我们可以发现存在一个 ApplicationEventMulticaster，它负责保存所有监听器，以便在容器产生上下文事件时通知这些事件监听者。</li><li><strong>MessageSource</strong>：为应用提供 i18n 国际化消息访问的功能；</li><li><strong>ResourcePatternResolver</strong> ： 所有 ApplicationContext 实现类都实现了类似于PathMatchingResourcePatternResolver 的功能，可以通过带前缀的 Ant 风格的资源文件路径装载 Spring 的配置文件。</li></ul><h3 id="Spring-容器-实例化"><a href="#Spring-容器-实例化" class="headerlink" title="Spring 容器 实例化"></a>Spring 容器 实例化</h3><p>下面代码可以实例化一个Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create and configure beans</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrieve configured instance</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// use configured instance</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure><p>更灵活的变体是使用 GenericApplicationContext 结合读取委托器使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(context).loadBeanDefinitions(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">context.refresh();</span><br></pre></td></tr></table></figure><p>实现ApplicationContextAware接口得到ApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- services --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;petStore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;itemDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;itemDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions for services go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-容器-核心流程"><a href="#Spring-容器-核心流程" class="headerlink" title="Spring 容器 核心流程"></a>Spring 容器 核心流程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// There has a method named &quot;loadBeanDefinitions&quot; attampt to resolve resources like xml, annotation, groovy.</span></span><br><span class="line"><span class="comment">// These sources will be resolved to &quot;BeanDefinition&quot; through &quot;BeanDefinitionReader&quot;. </span></span><br><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line"><span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line"><span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line"><span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line"><span class="comment">// add &quot;BeanPostProcessor&quot; to a CopyOnWriteArrayList named &quot;beanPostProcessors&quot;</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add beans that implement ApplicationListener as listeners.</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="comment">// First, it will merge beans with same beanName, there has a &quot;applyMergedBeanDefinitionPostProcessors&quot; to handle these merged beans.</span></span><br><span class="line"><span class="comment">// Next, it will find from cache whether bean exists, if the bean is not exists, it will create by &quot;ObjectFactory&quot;.</span></span><br><span class="line"><span class="comment">// Finally, put this bean into cache and return this bean.</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event, Observer pattern.</span></span><br><span class="line">finishRefresh();</span><br></pre></td></tr></table></figure><h3 id="Spring-父子容器"><a href="#Spring-父子容器" class="headerlink" title="Spring 父子容器"></a>Spring 父子容器</h3><p>寻找Bean的时候，先从子容器里拿，拿不到再从父容器中拿</p><p>父容器不能访问子容器，子容器可以访问父容器，原因是父容器没有子容器的引用。</p><p>HierarchicalBeanFactory 中只有得到父容器的方法 getParentBeanFactory</p><p>如果在父容器中对Bean进行了增强，而这个Bean定义在了子容器中，那就不会把子容器中的Bean进行增强</p><h2 id="Spring-Bean"><a href="#Spring-Bean" class="headerlink" title="Spring Bean"></a>Spring Bean</h2><p>Spring IoC容器管理一个或多个Bean。这些Bean是使用您提供给容器的配置元数据创建的（例如，以XML<code>&lt;bean/&gt;</code>定义的形式 ）。</p><p>在容器本身内，这些bean定义表示为<code>BeanDefinition</code> 对象，其中包含以下元数据：</p><ul><li>包限定的类名：通常，定义了Bean的实际实现类。</li><li>Bean行为配置元素，用于声明Bean在容器中的行为（作用域，生命周期回调等）。</li><li>引用该bean完成其工作所需的其他bean。这些引用也称为协作者或依赖项。</li><li>要在新创建的对象中设置的其他配置设置。例如，池的大小限制。</li></ul><p>依赖注入的三种方式：构造函数注入、setter注入、接口注入</p><h3 id="Spring-Bean-创建"><a href="#Spring-Bean-创建" class="headerlink" title="Spring Bean 创建"></a>Spring Bean 创建</h3><p><strong>Bean创建流程</strong></p><p>BeanDefinitionReader 通过 xml&#x2F;annotation 获得 Bean 的源信息，Bean 被实例化之后通过一系列的 Processor 最终完成Bean的创建</p><h4 id="1-包扫描注解-组件注解"><a href="#1-包扫描注解-组件注解" class="headerlink" title="1. 包扫描注解  +  组件注解"></a>1. 包扫描注解  +  组件注解</h4><p>@ComponentScan + @Controller @Service @Component …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ComponentScan 使用 Filter 排除某一种类型的 Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例: 排除了Contrller注解的Bean</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.demo&quot;,</span></span><br><span class="line"><span class="meta">        excludeFilters = &#123;@ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Controller.class)&#125;)</span></span><br></pre></td></tr></table></figure><p>FilterType种类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ANNOTATION: 注解</span><br><span class="line">ASSIGNABLE_TYPE: 类型</span><br><span class="line">ASPECTJ: 使用ASPECTJ表达式</span><br><span class="line">REGEX: 使用正则表达式</span><br><span class="line">CUSTOM: 自定义规则(TypeFilter的实现类)</span><br></pre></td></tr></table></figure><h4 id="2-Bean"><a href="#2-Bean" class="headerlink" title="2. @Bean"></a>2. @Bean</h4><p>通常用于导入第三方包里面的组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Import"><a href="#3-Import" class="headerlink" title="3. @Import"></a>3. @Import</h4><p>@Import直接注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@Import(User.class)</span><br><span class="line">public class SpringConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImportSelector：使用Import给容器中导入多个组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;User.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ImportBeanDefinitionRegistrar：手动注册Bean到容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(MyImportBeanDefinitionRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(User.class);</span><br><span class="line">        registry.registerBeanDefinition(<span class="string">&quot;user&quot;</span>, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-FactoryBean"><a href="#4-FactoryBean" class="headerlink" title="4. FactoryBean"></a>4. FactoryBean</h4><p>可用于自定义实例化逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserFactoryBean <span class="title function_">userFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserFactoryBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回的是User对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) applicationContext.getBean(<span class="string">&quot;userFactoryBean&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Spring-Bean-Scope"><a href="#Spring-Bean-Scope" class="headerlink" title="Spring Bean Scope"></a>Spring Bean Scope</h3><ol><li><p>singleton：每个IOC容器仅有一个单实例，容器创建时创建Bean</p><p>使用 <code>@Lazy</code> 注解懒加载Bean，即获取时加载</p></li><li><p>prototype：每次请求产生一个新实例，请求时创建Bean</p></li><li><p>request：每次Http请求产生一个新实例</p></li><li><p>session：每次Http请求产生一个新的Bean，仅在当前Http Session内有效</p></li><li><p>application：类似标准HttpSession作用域</p></li></ol><h3 id="Spring-Bean-创建流程源码"><a href="#Spring-Bean-创建流程源码" class="headerlink" title="Spring Bean 创建流程源码"></a>Spring Bean 创建流程源码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">refresh();</span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line">getBean(beanName);</span><br><span class="line">doGetBean(name, null, null, false);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从缓存中检查是否有这个Bean</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line"><span class="comment">// 如果没有，就实例化一个Bean</span></span><br><span class="line"><span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// 取得依赖的Bean，即创建当前Bean之前需要提前创建的Bean</span></span><br><span class="line">    String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">    <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">            registerDependentBean(dep, beanName);</span><br><span class="line">            getBean(dep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建Bean实例</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        sharedInstance = getSingleton(beanName, () -&gt; createBean(beanName, mbd, args));</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T) bean;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSingleton(beanName, () -&gt; createBean(beanName, mbd, args));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先从Map中拿</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line"><span class="comment">// 没有的话再创建</span></span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line"><span class="comment">// 加到Map中</span></span><br><span class="line">addSingleton(beanName, singletonObject);</span><br></pre></td></tr></table></figure><p> IOC容器之一：保存单实例Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure><p>BeanFactory：负责创建bean实例，容器里保存的所有单例Bean其实是一个map</p><p>ApplicationContext：BeanFactory的子接口，基于BeanFactory创建的对象之上完成容器的功能实现</p><h3 id="Spring-Bean-生命周期回调"><a href="#Spring-Bean-生命周期回调" class="headerlink" title="Spring Bean 生命周期回调"></a>Spring Bean 生命周期回调</h3><blockquote><p>只有单实例Bean才会被容器管理，多实例Bean不会被容器管理</p></blockquote><p>调用顺序</p><ul><li>初始化：对象创建完成，并赋值好，调用初始化方法</li><li>销毁：容器关闭时</li></ul><p>控制 Bean 生命周期行为的三个选项：</p><ul><li>@PostConstruct 和@PreDestroy 注解（推荐）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// init method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// destory method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义 <code>init()</code> 和 <code>destroy()</code> 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现InitializingBean和DisposableBean接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// init method</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// destroy method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BeanPostProcessor：Bean的后置处理器</strong></p><p>Spring底层对BeanPostProcessor的使用：Bean赋值，组件的注入，生命周期注解</p><ul><li>postProcessBeforeInitialization：在初始化（例如 @PostConstruct）之前工作</li><li>postProcessAfterInitialization：在初始化之后工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Bean-属性赋值"><a href="#Spring-Bean-属性赋值" class="headerlink" title="Spring Bean 属性赋值"></a>Spring Bean 属性赋值</h3><p>@Value</p><ol><li>基本数值</li><li>SPEL表达式：<code>#&#123;&#125;</code></li><li>取出配置文件的值：<code>$&#123;&#125; </code></li></ol><p>配合 <code>@PropertySource</code> 使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.nick.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.nick.name</span>=<span class="string">keith</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Bean-自动装配"><a href="#Spring-Bean-自动装配" class="headerlink" title="Spring Bean 自动装配"></a>Spring Bean 自动装配</h3><ol><li><p>@Autowired 根据类型注入，找不到再根据名称注入</p></li><li><p>@Qualifier 根据名称注入，@Primary 根据类型优先注入当前Bean</p></li><li><p>@Resource 根据名称注入，找不到再根据类型注入</p></li><li><p>构造方法注入：默认加载IOC容器中的组件，容器启动会调用无参构造器创建对象，再进行初始化赋值等操作</p></li></ol><p>后置处理器 <code>AutowiredAnnotationBeanPostProcessor</code> 用于解析自动装配</p><h3 id="Bean-Post-Processor"><a href="#Bean-Post-Processor" class="headerlink" title="Bean Post Processor"></a>Bean Post Processor</h3><ol><li><p>BeanPostPorcessor：Bean后置处理器，Bean创建对象初始化前后进行拦截工作</p></li><li><p>BeanFactoryPostProcessor：BeanFactory后置处理器，</p><p>BeanFactory标准初始化所有Bean定义已经保存到加载到BeanFactory，但是Bean实例还未创建</p><p>原理：IOC容器加载时调用 refresh() -&gt; invokeBeanFactoryPostProcessors()调用所有的Processor</p><p>实现 <code>BeanFactoryPostProcessor</code> 接口即可拿到容器的BeanFactory</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Bean Factory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>BeanDefinitionRegistry：在所有Bean将要被加载，而Bean实例还未创建</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 该方法后执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;My Registry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 该方法先执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;My Factory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Profile"><a href="#Spring-Profile" class="headerlink" title="Spring Profile"></a>Spring Profile</h2><p>指定组件在哪个环境的情况下才能注册到容器中，不指定任何环境都能注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">userTest</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is test environment&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Profile(&quot;prod&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">userProd</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is prod environment&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 properties 配置文件中可以根据文件名配置不同的环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">application.properties</span><br><span class="line">application-dev.properties</span><br><span class="line">application-test.properties</span><br></pre></td></tr></table></figure><p>在 yml 配置文件中可以使用 <code>---</code> 分隔配置不同的环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>在 VM options 中加入以下参数表示目前的环境为 test</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">-Dspring.profiles.active</span>=<span class="string">test</span></span><br><span class="line"><span class="comment">## 使用java -jar启动</span></span><br><span class="line"><span class="attr">java</span> <span class="string">-jar -Dspring.profiles.active=test app.jar </span></span><br></pre></td></tr></table></figure><p>在 Environment variables 中加入以下参数表示目前环境为 test</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--spring.profiles.active</span>=<span class="string">test</span></span><br><span class="line"><span class="comment">## 使用java -jar启动</span></span><br><span class="line"><span class="attr">java</span> <span class="string">-jar app.jar --spring.profiles.active=test</span></span><br></pre></td></tr></table></figure><p>加载配置文件关键源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring 启动时 run 方法中准备环境</span></span><br><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line"><span class="comment">// 进入之后调用了ConfigFileApplicationListener.Loader#load</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addPropertySources</span><span class="params">(ConfigurableEnvironment environment, ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">    RandomValuePropertySource.addToEnvironment(environment);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Loader</span>(environment, resourceLoader).load();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 追溯到 ConfigFileApplicationListener#loadForFileExtension 根据文件后缀遍历加载</span></span><br><span class="line"><span class="keyword">for</span> (PropertySourceLoader loader : <span class="built_in">this</span>.propertySourceLoaders) &#123;</span><br><span class="line">    <span class="keyword">for</span> (String fileExtension : loader.getFileExtensions()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processed.add(fileExtension)) &#123;</span><br><span class="line">            loadForFileExtension(loader, location + name, <span class="string">&quot;.&quot;</span> + fileExtension, profile, filterFactory,</span><br><span class="line">                                 consumer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 yml 和 properties 文件的解释</p><p><a href="https://blog.csdn.net/weixin_42103026/article/details/112846171">https://blog.csdn.net/weixin_42103026/article/details/112846171</a></p><h2 id="Spring-事件监听器"><a href="#Spring-事件监听器" class="headerlink" title="Spring 事件监听器"></a>Spring 事件监听器</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>ApplicationListener：监听容器中的事件，事件驱动模型开发。</p><ol><li><p>写一个监听器（实现 <code>ApplicationListener</code>）来监听某个事件（ <code>ApplicationEvent</code> 及其子类）</p></li><li><p>将监听器加入容器中</p></li><li><p>只要容器中有相关事件发布，我们就能监听到这个事件</p><p>例：ContextRefreshedEvent：容器刷新完成（所有Bean都完全创建）会发布这个事件</p></li><li><p>发布一个事件 applicationContext.publishEvent()</p></li></ol><p><strong>实现 <code>ApplicationListener</code> 接口实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 事件对象 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyApplicationEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送事件:&quot;</span> + <span class="built_in">super</span>.getTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事件监听器 */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;MyApplicationEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当容器中发布事件 MyApplicationEvent 以后，方法触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(MyApplicationEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收事件:&quot;</span> + event.getTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发布事件 */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDemoApplicationTests</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContextAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">MyApplicationEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用注解 <code>@EventListener</code> 实现</strong></p><p>可以使用该注解实现与上面 <code>MyApplicationListener</code> 一样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(MyApplicationEvent event)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收事件:&quot;</span> + event.getTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><blockquote><p>Observer模式，优势在于发布一个事件后可以有多个监听器对其作出反应，对其进行处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.发布事件</span></span><br><span class="line">applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">MyApplicationEvent</span>(<span class="built_in">this</span>));</span><br><span class="line"><span class="comment">// 2.广播这个事件</span></span><br><span class="line">getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line"><span class="comment">// 3.获取线程池，后续如果有线程池则异步执行，如果没有则同步执行</span></span><br><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> getTaskExecutor();</span><br><span class="line"><span class="comment">// 4.根据事件和事件类型获取Listeners</span></span><br><span class="line">getApplicationListeners(event, type);</span><br><span class="line"><span class="comment">// 4.1.cacheKey = 事件类型+事件源类型</span></span><br><span class="line"><span class="type">ListenerCacheKey</span> <span class="variable">cacheKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListenerCacheKey</span>(eventType, sourceType);</span><br><span class="line"><span class="comment">// 4.2.通过cacheKey查retrieverCache</span></span><br><span class="line"><span class="type">CachedListenerRetriever</span> <span class="variable">existingRetriever</span> <span class="operator">=</span> <span class="built_in">this</span>.retrieverCache.get(cacheKey);</span><br><span class="line"><span class="comment">// 4.2.1.如果查不到CachedListenerRetriever则就新建并填充，然后put到retrieverCache</span></span><br><span class="line"><span class="type">CachedListenerRetriever</span> <span class="variable">newRetriever</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CachedListenerRetriever</span>();</span><br><span class="line">retriever.applicationListeners = filteredListeners;</span><br><span class="line">retriever.applicationListenerBeans = filteredListenerBeans;</span><br><span class="line"><span class="comment">// 4.3.最终返回符合条件的Listeners</span></span><br><span class="line"><span class="keyword">return</span> retrieveApplicationListeners(eventType, sourceType, newRetriever);</span><br><span class="line"><span class="comment">// 5.遍历这些Listeners，调用每个Listener</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type))</span><br></pre></td></tr></table></figure><h2 id="Spring-循环依赖"><a href="#Spring-循环依赖" class="headerlink" title="Spring 循环依赖"></a>Spring 循环依赖</h2><p>循环依赖异常：BeanCurrentlyInCreationException</p><p>循环依赖指的是 默认的单例Bean中，属性互相引用的场景。在Spring中如果使用构造方法注入，或是实例化Bean的时候指定Scope为prototype等情况，就会可能出现循环依赖的问题。</p><p>Spring容器内部是通过3级缓存来解决循环依赖 – <code>DefaultSingletonBeanRegistry</code></p><p>一级缓存（singletonObjects）：存放已经经历了完整生命周期的Bean对象</p><p>二级缓存（earlySingtonObjects）：存放早期暴露出来的Bean对象（Bean的属性还未赋值）</p><p>三级缓存（singletonFacoties）：存放可以生成Bean的工厂</p><p>只有单例的Bean会通过三级缓存提前暴露来解决循环依赖的问题，而非单例的Bean，每次从容器中获取的都是一个新的对象，都会重新创建，所有非单例的Bean是没有缓存的，不会将其放到三级缓存中。</p><p>过程：</p><ol><li>A创建的过程中需要B，于是A将自己放到三级缓存里面，去实例化B</li><li>B实例化的时候发现需要A，于是B先查一级缓存，没有再查二级缓存，还是没有再查三级缓存，找到A然后把三级缓存里面的A放到二级缓存里面，并删除三级缓存里的A</li><li>B顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态），然后回来接着创建A，此时B已经创建结束，直接从一级缓存里面拿到B，然后完成创建，并将A自己放到一级缓存里面。</li></ol><p>总结：Spring解决循环依赖依靠的是Bean的”中间态”的概念，”中间态”指的是已经实例化但还没初始化的状态。</p><p><strong>源码说明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        <span class="comment">// 加入到单例缓存池中</span></span><br><span class="line">        <span class="built_in">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class="line">        <span class="comment">// 从三级缓存中移除（针对不处理循环依赖的Bean）</span></span><br><span class="line">        <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">        <span class="comment">// 从二级缓存中移除（针对循环依赖的Bean）</span></span><br><span class="line">        <span class="built_in">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">        <span class="comment">// 用来记录已经处理的Bean</span></span><br><span class="line">        <span class="built_in">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-IOC-附录"><a href="#Spring-IOC-附录" class="headerlink" title="Spring IOC 附录"></a>Spring IOC 附录</h2><p><strong>@Conditional：根据条件加载Bean</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Conditional(MyCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// 做一些判断逻辑，true表示加载bean，false表示不加载bean</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@DependsOn</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建B时会先去创建A</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@DependsOn(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Filter和Interceptor的区别</strong></p><ul><li>Filter是基于函数回调的，而Interceptor则是基于Java反射的。</li><li>Filter依赖于Servlet容器，而Interceptor不依赖于Servlet容器。</li><li>Filter对几乎所有的请求起作用，而Interceptor只能对action请求起作用。</li><li>Interceptor可以访问Action的上下文，值栈里的对象，而Filter不能。</li><li>在action的生命周期里，Interceptor可以被多次调用，而Filter只能在容器初始化时调用一次，</li></ul><p><strong>Filter生命周期方法</strong></p><ol><li>init : 服务器启动后创建Filter对象，然后调用init方法，只执行一次</li><li>doFilter : 每一次请求被拦截资源时，会执行，执行多次</li><li>destroy : 在服务器关闭后，Filter对象被销毁，若服务器正常关闭会执行destroy方法用于释放资源</li></ol><p>配置拦截路径 <code>@WebFilter(&quot;/*&quot;)</code></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20MVC/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20MVC/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-MVC-基本配置"><a href="#Spring-MVC-基本配置" class="headerlink" title="Spring MVC 基本配置"></a>Spring MVC 基本配置</h2><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Servlet类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringMVC配置参数文件的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--默认名称为ServletName-servlet.xml --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringMvc配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">         http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，实现支持注解的IOC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.zhangguo.springmvc01&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 支持mvc注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/view/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sayhi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">SayHi</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello Spring MVC!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sayhi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Spring MVC!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>$&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-支持参数"><a href="#Spring-MVC-支持参数" class="headerlink" title="Spring MVC 支持参数"></a>Spring MVC 支持参数</h2><ol><li>注解</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@PathVariable路径变量</span><br><span class="line">@RequestHeader获取请求头</span><br><span class="line">@RequestParam获取请求参数</span><br><span class="line">@CookieValue获取Cookie值</span><br><span class="line">@RequestAttribute获取request域属性</span><br><span class="line">@RequestBody获取请求体</span><br><span class="line">@MatrixVariable矩阵变量</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-九大组件"><a href="#Spring-MVC-九大组件" class="headerlink" title="Spring MVC 九大组件"></a>Spring MVC 九大组件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件上传解析器 */</span></span><br><span class="line">MultipartResolver multipartResolver;</span><br><span class="line"><span class="comment">/* 区域信息解析器 */</span></span><br><span class="line">LocaleResolver localeResolver;</span><br><span class="line"><span class="comment">/* 主题解析器 */</span></span><br><span class="line">ThemeResolver themeResolver;</span><br><span class="line"><span class="comment">/* Handler映射信息 */</span></span><br><span class="line">List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"><span class="comment">/* Handler适配器 */</span></span><br><span class="line">List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"><span class="comment">/* 异常解析器 */</span></span><br><span class="line">List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"><span class="comment">/* 请求到视图转换器 */</span></span><br><span class="line">RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"><span class="comment">/* SpringMVC中运行重定向携带数据的功能 */</span></span><br><span class="line">FlashMapManager flashMapManager;</span><br><span class="line"><span class="comment">/* 视图解析器 */</span></span><br><span class="line">List&lt;ViewResolver&gt; viewResolvers;</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-流程"><a href="#Spring-MVC-流程" class="headerlink" title="Spring MVC 流程"></a>Spring MVC 流程</h2><h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ol><li>客户端请求提交到 DispatcherServlet</li><li>DispatcherServlet 收到请求后，遍历 HandlerMapping 集合得到 HandlerExecutionChain ，HandlerExecutionChain 中包含Handler 和 Intercepetor (处理器和拦截器)</li><li>HandlerMapping 根据 Url 找到 HandlerAdapter，由 HandlerAdapter 调用具体的Handler<ol><li>先执行前置拦截器applyPreHandle</li><li>再执行处理器中目标方法，返回ModelAndView</li><li>最后执行后置拦截器 applyPostHandle</li><li>执行完成后返回ModelAndView给DispatcherServlet</li></ol></li><li>DispatcherServlet 将ModelAndView传给ViewResolver解析后返回View</li><li>将Model中的数据填充至View中，渲染视图返回给客户端</li></ol><h3 id="各个组件作用"><a href="#各个组件作用" class="headerlink" title="各个组件作用"></a>各个组件作用</h3><p>DispatcherServlet：接收请求，请求转发，处理响应</p><p>HandlerMapping：根据URL找到对应的HandlerAdapter</p><p>HandlerAdapter：调用Handler</p><p>Handler：又名Controller，处理业务请求</p><p>ViewResolver：把逻辑视图解析成物理视图</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://img-blog.csdnimg.cn/20201227173331827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h3><p>入口方法 <code>org.springframework.web.servlet.DispatcherServlet#doDispatch</code></p><ol><li>获取处理器执行链 HandlerExecutionChain</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="comment">// 遍历HandlerMapping获取handler</span></span><br><span class="line"><span class="keyword">for</span> (HandlerMapping mapping : <span class="built_in">this</span>.handlerMappings) &#123;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);</span><br><span class="line">    <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>根据handler来获取合适的适配器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><ol start="3"><li>执行Handler的业务逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行前置拦截器</span></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response))</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 执行业务逻辑返回 ModelAndView</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"><span class="comment">// 执行后置拦截器</span></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br></pre></td></tr></table></figure><ol start="4"><li>处理转发的信息渲染为视图</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line"><span class="comment">// 渲染视图</span></span><br><span class="line">render(mv, request, response);</span><br><span class="line">view = mv.getView();</span><br><span class="line">view.render(mv.getModelInternal(), request, response);</span><br></pre></td></tr></table></figure><h2 id="Spring-MVC-定时器"><a href="#Spring-MVC-定时器" class="headerlink" title="Spring MVC 定时器"></a>Spring MVC 定时器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置任务扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描任务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.demo.springTask&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span>&#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ? &quot;)</span> <span class="comment">// 间隔5秒执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">taskCycle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">date</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> date.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;定时任务 : &quot;</span> + dateStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring WebFlux</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20WebFlux/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20WebFlux/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-WebFlux"><a href="#Spring-WebFlux" class="headerlink" title="Spring WebFlux"></a>Spring WebFlux</h1><p>开启线程会有1M栈内存的开销，栈内存使用超过1M会导致栈溢出</p><p>Tomcat有两个线程池：连接线程池、业务线程池 </p><p>长轮询：客户端和服务器建立连接后不断开，等待服务端数据返回，默认90s，超出则续租。</p><p>响应式编程 (Reactor实现)</p><ol><li>响应式编程操作中，Reactor是满足Reactive规范框架</li><li>Reactor有两个核心类，Mono和Flux，这两个类实现接口Publisher，提供丰富操作符<ol><li>Flux返回N个元素</li><li>Mono返回0或1个元素</li></ol></li><li>Flux和Mono都是数据流的发布者，使用Flux和Mono都可以发出3种数据信号：元素值，错误信号，完成信号。错误信号和完成信号都代表终止信号，终止信号用于告诉订阅者数据流结束了，错误信号终止数据流同时把错误信息传递给订阅者。</li></ol><p><strong>具体实现</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.selectOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        Mono&lt;User&gt; userMono = Mono.just(user);</span><br><span class="line">        <span class="keyword">return</span> userService.save(userMono);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Integer, User&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userMap.put(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;Tom&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.userMap.put(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;Jerry&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">selectOne</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Mono.justOrEmpty(<span class="built_in">this</span>.userMap.get(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(<span class="built_in">this</span>.userMap.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">save</span><span class="params">(Mono&lt;User&gt; user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.doOnNext(person -&gt; &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> userMap.size() + <span class="number">1</span>;</span><br><span class="line">           userMap.put(id, person);</span><br><span class="line">        &#125;).thenEmpty(Mono.empty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud Config Center</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Config%20Center/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Config%20Center/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Config-Center"><a href="#Spring-Cloud-Config-Center" class="headerlink" title="Spring Cloud Config Center"></a>Spring Cloud Config Center</h2><ol><li>新建一个Git配置仓库，配置文件命名规则如下</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><ol start="2"><li>基本依赖和配置 pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring Cloud Config Server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot Actuator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">5100</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">config-center</span></span><br><span class="line"><span class="attr">spring.cloud.config.server.git.uri</span>=<span class="string">https://&lt;your-repository&gt;.git</span></span><br><span class="line"><span class="attr">spring.cloud.config.label</span>=<span class="string">master</span></span><br><span class="line"><span class="attr">eureka.client.service-url.defaultZone</span>=<span class="string">http://eureka1.com:5000/eureka</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动类增加注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigServer</span></span><br></pre></td></tr></table></figure><ol start="4"><li>访问以下地址可以得到具体配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; 配置中心服务地址 &#125;/master/file-dev.yml </span><br></pre></td></tr></table></figure><ol start="5"><li>客户端配置 pom</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Config Client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件 <code>bootstrap.properties</code></p><p>读取配置中心的master分支的配置文件 <code>sardine-file-dev.yml</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">sardine-file</span></span><br><span class="line"><span class="attr">spring.cloud.config.uri</span>=<span class="string">http://127.0.0.1:5100/</span></span><br><span class="line"><span class="attr">spring.cloud.config.profile</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.config.label</span>=<span class="string">master</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>热更新</p><p>6.1 手动配置热更新</p><ol><li>开启 actuator 中的 refresh 端点</li><li>Controller 中添加 @RefreshScope 注解</li><li>向客户端 <code>http://localhost:5005/actuator/refresh</code> 发送 Post 请求</li></ol><p>6.2 自动热更新</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Bus Amqp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure><p>向配置中心发送 Post 请求</p><p><code>http://localhost:5100/actuator/bus-refresh</code> </p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Gateway/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Gateway/</url>
      
        <content type="html"><![CDATA[<h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>基于 Netty，Spring WebFlux 响应式编程，在请求的时候就封装好了Response</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>Predicates 断言</p><blockquote><p>多个断言可以配合使用</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/img/**</span><span class="comment"># 匹配路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Query=foo,ba</span><span class="comment"># 匹配参数，可使用正则</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Method=get</span><span class="comment"># 匹配请求方式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Host=demo.com</span><span class="comment"># 匹配Host</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Cookie=aaa</span><span class="comment"># 匹配Cookie</span></span><br></pre></td></tr></table></figure><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Cloud Gateway --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">my-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:7012</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/gateway/**</span>      <span class="comment"># 将后缀是此路径的转发到uri</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>         <span class="comment"># 去掉1个前缀</span></span><br></pre></td></tr></table></figure><h3 id="整合-Eureka"><a href="#整合-Eureka" class="headerlink" title="整合 Eureka"></a>整合 Eureka</h3><p><strong>使用默认路由</strong></p><p>pom</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:7000/eureka</span></span><br></pre></td></tr></table></figure><p>默认是根据 Eureka 的服务名进行转发（注意要大写0）：<a href="http://localhost:5001/SARDINE-USER/hello">http://localhost:5001/SARDINE-USER/hello</a></p><p><strong>使用自定义路由</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sardine-user</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://SARDINE-USER</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:7000/eureka</span></span><br></pre></td></tr></table></figure><p>访问该地址可以得到同样的效果： <a href="http://localhost:5001/user/hello">http://localhost:5001/user/hello</a></p><h3 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h3><p>定义自定义负载均衡策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyRule&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 gateway 服务中增加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">SARDINE-USER:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.sardine.gateway.config.MyRule</span></span><br></pre></td></tr></table></figure><h3 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">routeLocator</span><span class="params">(RouteLocatorBuilder locatorBuilder)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> locatorBuilder.routes()</span><br><span class="line">        .route(p -&gt; p.path(<span class="string">&quot;/u/**&quot;</span>).filters(f -&gt; f.stripPrefix(<span class="number">1</span>)).uri(<span class="string">&quot;lb://SARDINE-USER&quot;</span>)).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Ordered</span>, GlobalFilter &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行过滤器&quot;</span>);</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        MultiValueMap&lt;String, String&gt; queryParams = request.getQueryParams();</span><br><span class="line">        List&lt;String&gt; list = queryParams.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="literal">null</span> || list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line"><span class="comment">//            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span></span><br><span class="line"><span class="comment">//            return exchange.getResponse().setComplete();</span></span><br><span class="line">            <span class="type">DataBuffer</span> <span class="variable">dataBuffer</span> <span class="operator">=</span> exchange.getResponse().bufferFactory().wrap(<span class="string">&quot;Illegal Request&quot;</span>.getBytes());</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().writeWith(Mono.just(dataBuffer));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><h4 id="整合Guava"><a href="#整合Guava" class="headerlink" title="整合Guava"></a>整合Guava</h4><p>限流实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultRateLimiter</span> <span class="keyword">extends</span> <span class="title class_">AbstractRateLimiter</span>&lt;DefaultRateLimiter.Config&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultRateLimiter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Config.class, <span class="string">&quot;default-rate-limiter&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConfigurationService</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Response&gt; <span class="title function_">isAllowed</span><span class="params">(String routeId, String id)</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> getConfig().get(routeId);</span><br><span class="line">        limiter.setRate(Objects.isNull(config.getPermitsPerSecond()) ? <span class="number">1</span> : config.getPermitsPerSecond());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAllow</span> <span class="operator">=</span> limiter.tryAcquire();</span><br><span class="line">        <span class="keyword">return</span> Mono.just(<span class="keyword">new</span> <span class="title class_">Response</span>(isAllow, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@DecimalMin(&quot;0.1&quot;)</span></span><br><span class="line">        <span class="keyword">private</span> Double permitsPerSecond;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Double <span class="title function_">getPermitsPerSecond</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> permitsPerSecond;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Config <span class="title function_">setPermitsPerSecond</span><span class="params">(Double permitsPerSecond)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.permitsPerSecond = permitsPerSecond;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置需要根据什么维度进行限流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimitConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">userKeyResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求用户IP作为限流key</span></span><br><span class="line">        <span class="keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getRemoteAddress().getHostName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sardine-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sardine-user</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://SARDINE-USER</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RequestRateLimiter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">          <span class="comment"># 限流的实现类，Spring的EL表达式，拿到这个Bean</span></span><br><span class="line">            <span class="attr">rate-limiter:</span> <span class="string">&#x27;#&#123;@defaultRateLimiter&#125;&#x27;</span></span><br><span class="line">            <span class="comment"># 需要限流的规则</span></span><br><span class="line">            <span class="attr">key-resolver:</span> <span class="string">&#x27;#&#123;@userKeyResolver&#125;&#x27;</span></span><br><span class="line">            <span class="comment"># 每秒发放令牌个数</span></span><br><span class="line">            <span class="attr">default-rate-limiter.premitPerSecond:</span> <span class="number">0.5</span></span><br></pre></td></tr></table></figure><h4 id="使用Filter-实现令牌桶算法"><a href="#使用Filter-实现令牌桶算法" class="headerlink" title="使用Filter 实现令牌桶算法"></a>使用Filter 实现令牌桶算法</h4><ol><li>修改pom 添加redis依赖</li><li>添加reids key 的解析器即key-resolver 解析类</li><li>调整配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyResolverConfiguration</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyResolver <span class="title function_">pathKeyResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyResolver</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;String&gt; <span class="title function_">resolve</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Mono.just(exchange.getRequest().getPath().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">api-gateway-server #服务名称</span></span><br><span class="line">  <span class="attr">redis</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">host</span>: <span class="string">127.0.0.1</span></span><br><span class="line">    <span class="attr">pool</span>: <span class="string">6379</span></span><br><span class="line">    <span class="attr">database</span>: <span class="string">0</span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">gateway</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">routes</span>:<span class="string"></span></span><br><span class="line"><span class="comment">      #配置路由： 路由id,路由到微服务的uri,断言（判断条件）</span></span><br><span class="line">        <span class="attr">-</span> <span class="string">id: product-service #保持唯一</span></span><br><span class="line"><span class="comment">          #uri: http://127.0.0.1:8001 #目标为服务地址</span></span><br><span class="line">          <span class="attr">uri</span>: <span class="string">lb://cloud-payment-service # lb:// 根据服务名称从注册中心获取请求地址路径</span></span><br><span class="line">          <span class="attr">predicates</span>:<span class="string"></span></span><br><span class="line"><span class="comment">            #- Path=/payment/** #路由条件 path 路由匹配条件</span></span><br><span class="line">            <span class="attr">-</span> <span class="string">Path=/product-service/** #给服务名称前加上一个固定的应用分类路径 将该路径转发到 http://127.0.0.1:8001/payment/get/1</span></span><br><span class="line">          <span class="attr">filters</span>: <span class="string">#配置路由过滤器  http://127.0.0.1:8080/product-service/payment/get/1 -&gt; http://127.0.0.1:8001/payment/get/1</span></span><br><span class="line">          <span class="attr">-</span> <span class="string">name: RequestRateLimiter</span></span><br><span class="line">            <span class="attr">args</span>:<span class="string"></span></span><br><span class="line"><span class="comment">              #使用SpEL从容器中获取对象</span></span><br><span class="line">              <span class="attr">key-resolver</span>: <span class="string">&#x27;#&#123;@pathKeyResolver&#125;&#x27;</span></span><br><span class="line"><span class="comment">              #桶令牌每秒产生平均速率</span></span><br><span class="line">              <span class="attr">redis-rate-limiter.replenishRate</span>: <span class="string">1</span></span><br><span class="line"><span class="comment">              #令牌桶的上限</span></span><br><span class="line">              <span class="attr">redis-rate-limiter.burstCapacity</span>: <span class="string">2</span></span><br><span class="line">          <span class="attr">-</span> <span class="string">RewritePath=/product-service/(?&lt;segment&gt;.*),/$\&#123;segment&#125; #路径重写的过滤器，在yml中$写为 $\</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 注册中心</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Eureka/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Eureka/</url>
      
        <content type="html"><![CDATA[<h2 id="注册中心和微服务的关系"><a href="#注册中心和微服务的关系" class="headerlink" title="注册中心和微服务的关系"></a>注册中心和微服务的关系</h2><ol><li>注册：每个微服务启动时，将自己的网络地址等信息注册到注册中心，注册中心会存储（内存中）这些信息。</li><li>获取服务注册表：服务消费者从注册中心，查询服务提供者的网络地址，并使用该地址调用服务提供者，为了避免每次都查注册表信息，所以client会定时去server拉取注册表信息到缓存到client本地。</li><li>心跳：各个微服务与注册中心通过某种机制（心跳）通信，若注册中心长时间和服务间没有通信，就会注销该实例。</li><li>调用：实际的服务调用，通过注册表，解析服务名和具体地址的对应关系，找到具体服务的地址，进行实际调用。</li></ol><p><img src="https://img-blog.csdnimg.cn/2021020610401060.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Spring-Cloud-Eureka"><a href="#Spring-Cloud-Eureka" class="headerlink" title="Spring Cloud Eureka"></a>Spring Cloud Eureka</h2><h3 id="Eureka-概念"><a href="#Eureka-概念" class="headerlink" title="Eureka 概念"></a>Eureka 概念</h3><p>Eureka注册中心各个节点是平等的，节点挂掉不会影响剩余节点的正常工作，只要有一台Eureka还在，就能保证注册服务可用，只不过查询到的数据可能不会最新的。Eureka还有自我保护机制，如果在15分钟内超过85%的节点都没有正常心跳，那么Eureka就认为客户端与注册中心出现了故障，此时会出现以下几种情况：</p><ol><li>Eureka不再从注册列表移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上（保证当前节点依然可用）</li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中</li></ol><p><strong>Eureka自我保护机制</strong></p><p>某时刻某一个微服务不可用了，eureka不会立即清理，依旧会对该微服务的信息进行保存</p><p>默认EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例（默认90秒）</p><p>当网络分区故障发生时，微服务与EurekaServer之间无法正常通信，但微服务本身其实是健康的。当EurekaServer节点在短时间内丢失过多客户端时，那么这个节点就会进入自我保护模式，EurekaServer会保护服务注册表中的信息，不再注销任何微服务。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。</p><p>在Spring Cloud中，可以使用eureka.server.enable-self-preservation &#x3D; false 禁用自我保护模式。</p><p>服务少的话要关闭自我保护，服务多的话要开启自我保护，原因是服务多的话如果发现服务挂了其实是不一定真的挂了，可以是由于网络波动等因素没调到服务，所以需要触发自我保护机制。</p><p><strong>Eureka 三级缓存</strong></p><table><thead><tr><th>缓存</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>registry</strong></td><td>ConcurrentHashMap</td><td><strong>实时更新</strong>，类AbstractInstanceRegistry成员变量，UI端请求的是这里的服务注册信息</td></tr><tr><td><strong>readWriteCacheMap</strong></td><td>Guava Cache&#x2F;LoadingCache</td><td><strong>实时更新</strong>，类ResponseCacheImpl成员变量，缓存时间180秒</td></tr><tr><td><strong>readOnlyCacheMap</strong></td><td>ConcurrentHashMap</td><td><strong>周期更新</strong>，类ResponseCacheImpl成员变量，默认每<strong>30s</strong>从readWriteCacheMap更新，Eureka client默认从这里更新服务注册信息，可配置直接从readWriteCacheMap更新</td></tr></tbody></table><p>开启 readOnlyCacheMap 是为了保证高可用，如果有大量请求进来会先往 readWriteCacheMap 里加，而不会影响 readOnlyCacheMap 的读</p><h3 id="Eureka-Restful-服务调用"><a href="#Eureka-Restful-服务调用" class="headerlink" title="Eureka Restful 服务调用"></a>Eureka Restful 服务调用</h3><p>官方文档</p><p><a href="https://github.com/Netflix/eureka/wiki/Eureka-REST-operations">https://github.com/Netflix/eureka/wiki/Eureka-REST-operations</a></p><table><thead><tr><th><strong>Operation</strong></th><th><strong>HTTP action</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>Register new application instance</td><td>POST &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong></td><td>Input: JSON&#x2F;XMLpayload HTTPCode: 204 on success</td></tr><tr><td>De-register application instance</td><td>DELETE &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success</td></tr><tr><td>Send application instance heartbeat</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: * 200 on success * 404 if <strong>instanceID</strong>doesn’t exist</td></tr><tr><td>Query for all instances</td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps</td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for all <strong>appID</strong> instances</td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for a specific <strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Query for a specific <strong>instanceID</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;instances&#x2F;<strong>instanceID</strong></td><td>HTTP Code: 200 on success Output: JSON&#x2F;XML</td></tr><tr><td>Take instance out of service</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status?value&#x3D;OUT_OF_SERVICE</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Move instance back into service (remove override)</td><td>DELETE &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;status?value&#x3D;UP (The value&#x3D;UP is optional, it is used as a suggestion for the fallback status due to removal of the override)</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Update metadata</td><td>PUT &#x2F;eureka&#x2F;v2&#x2F;apps&#x2F;<strong>appID</strong>&#x2F;<strong>instanceID</strong>&#x2F;metadata?key&#x3D;value</td><td>HTTP Code: * 200 on success * 500 on failure</td></tr><tr><td>Query for all instances under a particular <strong>vip address</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;vips&#x2F;<strong>vipAddress</strong></td><td>* HTTP Code: 200 on success Output: JSON&#x2F;XML  * 404 if the <strong>vipAddress</strong>does not exist.</td></tr><tr><td>Query for all instances under a particular <strong>secure vip address</strong></td><td>GET &#x2F;eureka&#x2F;v2&#x2F;svips&#x2F;<strong>svipAddress</strong></td><td>* HTTP Code: 200 on success Output: JSON&#x2F;XML  * 404 if the <strong>svipAddress</strong>does not exist.</td></tr></tbody></table><h3 id="Eureka-单节点服务端配置说明"><a href="#Eureka-单节点服务端配置说明" class="headerlink" title="Eureka 单节点服务端配置说明"></a>Eureka 单节点服务端配置说明</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 表示将自己的ip注册到EurekaServer上。不配置或false，表示将操作系统的hostname注册到server</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将自己注册到Eureka Server,默认为true，由于当前就是server，故而设置成false，表明该服务不会向eureka注册自己的信息</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否从eureka server获取注册信息，由于单节点，不需要同步其他节点数据，用false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 设置服务注册中心的URL，用于client和server端交流</span></span><br><span class="line">    <span class="attr">service-url:</span>                      </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:root@eureka-7901:7901/eureka/</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 关闭自我保护</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 自我保护阈值</span></span><br><span class="line">    <span class="attr">renewal-percent-threshold:</span> <span class="number">0.8</span></span><br><span class="line">    <span class="comment"># 剔除服务的时间间隔</span></span><br><span class="line">    <span class="attr">viction-interval-timer-in-ms:</span> <span class="number">1000</span></span><br><span class="line">    <span class="comment"># 关闭缓存</span></span><br><span class="line">    <span class="attr">use-read-only-response-cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Eureka-Client-注册"><a href="#Eureka-Client-注册" class="headerlink" title="Eureka Client 注册"></a>Eureka Client 注册</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注册中心</span></span><br><span class="line"><span class="attr">eureka:</span> </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#设置服务注册中心的URL</span></span><br><span class="line">    <span class="attr">service-url:</span>                      </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://root:root@localhost:7900/eureka/</span></span><br></pre></td></tr></table></figure><p>不想注册，设置成false即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">service-registry:</span></span><br><span class="line">      <span class="attr">auto-registration:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注册成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DiscoveryClient_API-LISTEN-ORDER/api-listen-order:30.136.133.9:port - registration status: 204</span><br></pre></td></tr></table></figure><h3 id="Eureka-集群的本地搭建"><a href="#Eureka-集群的本地搭建" class="headerlink" title="Eureka 集群的本地搭建"></a>Eureka 集群的本地搭建</h3><p>引入依赖 eureka server</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改本地hosts文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka1.com</span><br><span class="line">127.0.0.1 eureka2.com</span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="number">01</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-demo</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="number">01</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka1.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka2.com:5002/eureka</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-demo</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="number">02</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka2.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka1.com:5001/eureka</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistryApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(RegistryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多节点 Eureka 注意事项</strong></p><blockquote><p>peer：A 同步信息给 B，A 是 B 的peer</p></blockquote><p>举例说明：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka2.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka1.com:5001/eureka</span> <span class="comment"># 这个地址就是该服务的 peer</span></span><br></pre></td></tr></table></figure><p>有3个服务 A B C，注册方式 A -&gt; B，B-&gt;C，C-&gt;A，结果注册信息并不同步</p><p>启动流程：</p><ol><li>拉取 peer 的注册表，A 启动会拉取 B 的注册表</li><li>把自己注册到 peer 上，A 会把自己注册到 B 的注册表上</li><li>peer 会把自己的注册表同步给 peer 的 peer，B 会把 A 同步给 C</li></ol><h3 id="Eureka-架构图"><a href="#Eureka-架构图" class="headerlink" title="Eureka 架构图"></a>Eureka 架构图</h3><p><img src="https://img-blog.csdnimg.cn/20210206111125938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Eureka-客户端工作流程"><a href="#Eureka-客户端工作流程" class="headerlink" title="Eureka 客户端工作流程"></a>Eureka 客户端工作流程</h3><p><img src="https://img-blog.csdnimg.cn/20210206141833488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Eureka-原理"><a href="#Eureka-原理" class="headerlink" title="Eureka 原理"></a>Eureka 原理</h3><blockquote><p>Eureka 存储了每个客户端的注册信息</p><p>EurekaClient 从 EurekaServer 同步获取服务注册列表，通过一定的规则选择一个服务进行调用</p></blockquote><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p><strong>服务提供者</strong>：是一个eureka client，向Eureka Server注册和更新自己的信息，同时能从Eureka Server注册表中获取到其他服务的信息。</p><p><strong>服务注册中心</strong>：提供服务注册和发现的功能。每个 Eureka Client 向 Eureka Server 注册自己的信息，也可以通过Eureka Server获取到其他服务的信息达到发现和调用其他服务的目的。</p><p><strong>服务消费者</strong>：是一个 Eureka Client，通过 Eureka Server 获取注册到其上其他服务的信息，从而根据信息找到所需的服务发起远程调用。</p><p><strong>同步复制</strong>：Eureka Server 之间注册表信息的同步复制，使 Eureka Server 集群中不同注册表中服务实例信息保持一致。</p><p><strong>远程调用</strong>：服务客户端之间的远程调用。</p><p><strong>注册</strong>：Client 向 Server 注册自身的元数据以供服务发现。</p><p><strong>续约</strong>：Eureka客户端需要每30秒发送一次心跳来续租，通过发送心跳到 Server 以维持和更新注册表中服务实例元数据的有效性。当在一定时长内，Server 没有收到 Client 的心跳信息，将默认服务下线，会把服务实例的信息从注册表中删除。</p><p><strong>下线</strong>：Client 在关闭时主动向 Server 注销服务实例元数据，这时 Client 的服务实例数据将从 Server 的注册表中删除。</p><p><strong>获取注册表</strong>：Client 向 Server 请求注册表信息，用于服务发现，从而发起服务间远程调用。</p><p><strong>元数据</strong>：Eureka的元数据有两种：标准元数据和自定义元数据。</p><p>标准元数据：主机名、IP地址、端口号、状态页和健康检查等信息，这些信息都会被发布在服务注册表中，用于服务之间的调用。</p><p>自定义元数据：可以使用eureka.instance.metadata-map配置，这些元数据可以在远程客户端中访问，但是一般不改变客户端行为，除非客户端知道该元数据的含义。</p><p>可以在配置文件中对当前服务设置自定义元数据，可后期用户个性化使用</p><p>元数据可以配置在 eureka 服务器和 eureka 客户端上</p><h4 id="如何自己实现一个注册中心"><a href="#如何自己实现一个注册中心" class="headerlink" title="如何自己实现一个注册中心"></a>如何自己实现一个注册中心</h4><ul><li><p>客户端：拉取注册表，从注册表里选一个调用</p></li><li><p>服务端：</p><ul><li>定义注册表：<code>Map&lt;name, Map&lt;id, InstanceInfo&gt;&gt;</code></li><li>别人可以向我注册自己的信息</li><li>别人可以从我这里拉取他人的信息</li><li>我和我的同类可以共享注册表</li></ul><p>eureka是用：jersey实现，也是个mvc框架。我们可以自己写个spring boot web实现。</p></li></ul><h3 id="Eureka-源码"><a href="#Eureka-源码" class="headerlink" title="Eureka 源码"></a>Eureka 源码</h3><h4 id="Eureka-Server-启动"><a href="#Eureka-Server-启动" class="headerlink" title="Eureka Server 启动"></a>Eureka Server 启动</h4><p>通过注解 @EnableEurekaServer 导入了 EurekaServerMarkerConfiguration 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span> -&gt; <span class="meta">@Import(EurekaServerMarkerConfiguration.class)</span></span><br></pre></td></tr></table></figure><p>在 EurekaServerMarkerConfiguration 类中只是新建了一个 Marker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Marker <span class="title function_">eurekaServerMarkerBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Marker</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Marker</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Erueka Server 的 jar 包下的 spring.facoties 中发现导入了 EurekaServerAutoConfiguration 配置类，而该配置类生效的条件是 Marker 类的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnBean(EurekaServerMarkerConfiguration.Marker.class)</span></span><br></pre></td></tr></table></figure><p>同时在 EurekaServerAutoConfiguration 中还导入了 EurekaServerInitializerConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(EurekaServerInitializerConfiguration.class)</span></span><br></pre></td></tr></table></figure><p>而导入这个类后会直接执行其 start 方法，原因是它实现了 SmartLifecycle 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerInitializerConfiguration</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ServletContextAware</span>, SmartLifecycle, Ordered &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Eureka-Server-注册实例"><a href="#Eureka-Server-注册实例" class="headerlink" title="Eureka Server 注册实例"></a>Eureka Server 注册实例</h4><p>ApplicationResource#addInstance</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">registry.register -&gt; PeerAwareInstanceRegistryImpl#register -&gt;</span><br><span class="line">AbstractInstanceRegistry#register</span><br></pre></td></tr></table></figure><p>在 AbstractInstanceRegistry 这个类中可以找到存放实例信息的map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map&lt;服务名, map&lt;实例ID，实例信息&gt;&gt;</span></span><br><span class="line">ConcurrentHashMap&lt;String, Map&lt;String, Lease&lt;InstanceInfo&gt;&gt;&gt; register</span><br></pre></td></tr></table></figure><h4 id="Eureka-Server-拉取实例"><a href="#Eureka-Server-拉取实例" class="headerlink" title="Eureka Server 拉取实例"></a>Eureka Server 拉取实例</h4><p>ApplicationResource#getApplication</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">responseCache.get(cacheKey) -&gt; getValue(key, useReadOnlyCache) -&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果开启了readOnly缓存</span></span><br><span class="line"><span class="keyword">if</span> (useReadOnlyCache) &#123;</span><br><span class="line">    <span class="comment">// 先从readOnly缓存里取</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Value</span> <span class="variable">currentPayload</span> <span class="operator">=</span> readOnlyCacheMap.get(key);</span><br><span class="line">    <span class="keyword">if</span> (currentPayload != <span class="literal">null</span>) &#123;</span><br><span class="line">        payload = currentPayload;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 取不到再从readWrite缓存里取</span></span><br><span class="line">        payload = readWriteCacheMap.get(key);</span><br><span class="line">        readOnlyCacheMap.put(key, payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果没开启，则直接从readWrite缓存里取</span></span><br><span class="line">    payload = readWriteCacheMap.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Sentinel</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Sentinel/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Sentinel/</url>
      
        <content type="html"><![CDATA[<h2 id="Sentinel-Dashboard"><a href="#Sentinel-Dashboard" class="headerlink" title="Sentinel Dashboard"></a>Sentinel Dashboard</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/Dashboard">https://github.com/alibaba/Sentinel/wiki/Dashboard</a></p><p>启动 Sentinel Dashboard</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</span><br></pre></td></tr></table></figure><p>登录控制台，默认账号密码都是 <code>sentinel</code></p><p>配置控制台信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Cloud-Sentinel"><a href="#Spring-Cloud-Sentinel" class="headerlink" title="Spring Cloud Sentinel"></a>Spring Cloud Sentinel</h2><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Boot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba Nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba Sentinel --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Cloud Sentinel Datasource Nacos  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SardineAlibabaSamplesApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        initSentinelRules();</span><br><span class="line">        SpringApplication.run(SardineAlibabaSamplesApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initSentinelRules</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;FlowRule&gt; rules = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">FlowRule</span> <span class="variable">rule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlowRule</span>();</span><br><span class="line">        rule.setResource(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">        <span class="comment">// set limit qps to 2</span></span><br><span class="line">        rule.setCount(<span class="number">2</span>);</span><br><span class="line">        rule.setGrade(RuleConstant.FLOW_GRADE_QPS);</span><br><span class="line">        rule.setLimitApp(<span class="string">&quot;default&quot;</span>);</span><br><span class="line">        rules.add(rule);</span><br><span class="line">        FlowRuleManager.loadRules(rules);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">   <span class="meta">@SentinelResource(value = &quot;resource&quot;, blockHandler = &quot;fallback&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fallback</span><span class="params">(BlockException e)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;降级了&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 hello 接口，若qps大于2的时候会执行降级方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud 健康检查</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Admin/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Cloud%20Admin/</url>
      
        <content type="html"><![CDATA[<h3 id="Admin服务器端"><a href="#Admin服务器端" class="headerlink" title="Admin服务器端"></a>Admin服务器端</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Admin 服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Admin 界面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Admin客户端"><a href="#Admin客户端" class="headerlink" title="Admin客户端"></a>Admin客户端</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="attr">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br><span class="line"><span class="attr">spring.boot.admin.client.url</span>=<span class="string">http://localhost:8080</span></span><br></pre></td></tr></table></figure><h3 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h3><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-admin</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="comment"># 邮件设置</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">单纯QQ号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxx授权码</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span> </span><br><span class="line">        <span class="attr">smpt:</span> </span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">starttls:</span> </span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 收件邮箱</span></span><br><span class="line"><span class="attr">spring.boot.admin.notify.mail.to:</span> <span class="string">xxxxxxxxx@qq.com</span>   </span><br><span class="line"><span class="comment"># 发件邮箱</span></span><br><span class="line"><span class="attr">spring.boot.admin.notify.mail.from:</span> <span class="string">xxxxxxx@qq.com</span>   </span><br></pre></td></tr></table></figure><h3 id="钉钉群通知"><a href="#钉钉群通知" class="headerlink" title="钉钉群通知"></a>钉钉群通知</h3><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminApplication</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(AdminApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DingDingNotifier <span class="title function_">dingDingNotifier</span><span class="params">(InstanceRepository repository)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DingDingNotifier</span>(repository);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通知类"><a href="#通知类" class="headerlink" title="通知类"></a>通知类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DingDingNotifier</span> <span class="keyword">extends</span> <span class="title class_">AbstractStatusChangeNotifier</span>  &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DingDingNotifier</span><span class="params">(InstanceRepository repository)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(repository);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Mono&lt;Void&gt; <span class="title function_">doNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> instance.getRegistration().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceUrl</span> <span class="operator">=</span> instance.getRegistration().getServiceUrl();</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> instance.getStatusInfo().getStatus();</span><br><span class="line">        Map&lt;String, Object&gt; details = instance.getStatusInfo().getDetails();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        str.append(<span class="string">&quot;服务预警 : 【&quot;</span> + serviceName + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        str.append(<span class="string">&quot;【服务地址】&quot;</span> + serviceUrl);</span><br><span class="line">        str.append(<span class="string">&quot;【状态】&quot;</span> + status);</span><br><span class="line">        str.append(<span class="string">&quot;【详情】&quot;</span> + JSONObject.toJSONString(details));</span><br><span class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            DingDingMessageUtil.sendTextMessage(str.toString());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送工具类"><a href="#发送工具类" class="headerlink" title="发送工具类"></a>发送工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DingDingMessageUtil</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">access_token</span> <span class="operator">=</span> <span class="string">&quot;Token&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTextMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">            message.setMsgtype(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">            message.setText(<span class="keyword">new</span> <span class="title class_">MessageInfo</span>(msg));</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://oapi.dingtalk.com/robot/send?access_token=&quot;</span> + access_token);</span><br><span class="line">            <span class="comment">// 建立 http 连接</span></span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            conn.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            conn.setUseCaches(<span class="literal">false</span>);</span><br><span class="line">            conn.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;Charset&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            conn.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/Json; charset=UTF-8&quot;</span>);</span><br><span class="line">            conn.connect();</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> conn.getOutputStream();</span><br><span class="line">            <span class="type">String</span> <span class="variable">textMessage</span> <span class="operator">=</span> JSONObject.toJSONString(message);</span><br><span class="line">            <span class="type">byte</span>[] data = textMessage.getBytes();</span><br><span class="line">            out.write(data);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> conn.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">            in.read(data1);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data1));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="消息类"><a href="#消息类" class="headerlink" title="消息类"></a>消息类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String msgtype;</span><br><span class="line">    <span class="keyword">private</span> MessageInfo text;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsgtype</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msgtype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsgtype</span><span class="params">(String msgtype)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msgtype = msgtype;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> MessageInfo <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setText</span><span class="params">(MessageInfo text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageInfo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MessageInfo</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Aop/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Aop/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-AOP-使用"><a href="#Spring-AOP-使用" class="headerlink" title="Spring AOP 使用"></a>Spring AOP 使用</h2><p>开启Aop 使用 <code>@Aspect</code> 标注其为切面类，并把该类加入容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置类中开启Aop模式 <code>@EnableAspectJAutoProxy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-AOP-常用注解"><a href="#Spring-AOP-常用注解" class="headerlink" title="Spring AOP 常用注解"></a>Spring AOP 常用注解</h2><p><code>@Before</code>：前置通知，目标方法之前执行</p><p><code>@After</code>：后置通知，目标方法之后执行（必然执行）</p><p><code>@AfterReturning</code>：返回后通知，执行方法结束前执行（异常不执行）</p><p><code>@AfterThrowing</code>：异常通知，出现异常时执行</p><p><code>@Around</code>：环绕通知，环绕目标方法执行</p><h2 id="Spring-Aop-执行顺序"><a href="#Spring-Aop-执行顺序" class="headerlink" title="Spring Aop 执行顺序"></a>Spring Aop 执行顺序</h2><p><strong>Spring4</strong></p><p>正常：@Around @Before @Around @After @AfterReturning</p><p>异常：@Around @Before @After @AfterThrowing</p><p><strong>Spring5</strong></p><p>正常：@Around @Before @AfterReturning @After @Around</p><p>异常：@Around @Before @AfterThrowing @After</p><h2 id="Spring-Aop-原理"><a href="#Spring-Aop-原理" class="headerlink" title="Spring Aop 原理"></a>Spring Aop 原理</h2><blockquote><p>使用动态代理执行目标方法</p></blockquote><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. @EnableAspectJAutoProxy 为容器中增加一个 AspectJAutoProxyRegistrar 类</span><br><span class="line">2. 容器创建</span><br><span class="line">2.1 registerBeanPostProcessors() 注册后置处理器</span><br><span class="line">2.2 finishBeanFactoryInitialization() 初始化剩下的单实例Bean</span><br><span class="line">2.2.1 创建业务逻辑和切面组件</span><br><span class="line">2.2.2 AnnotationAwareAspectJAutoProxyCreator拦截组件创建过程</span><br><span class="line">2.2.3 组件创建完之后，判断组件若需要增强，切面通知方法包装成Advisor，给目标对象创建一个代理对象（默认使用cglib创建）</span><br><span class="line">3. 代理对象执行目标方法 CglibAopProxy.intercept()</span><br><span class="line">3.1 得到目标方法的拦截器链，包装成拦截器MethodInterceptor</span><br><span class="line">3.2 利用拦截器的链式机制依次进入每一个拦截器进行执行</span><br></pre></td></tr></table></figure><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>Spring 提供了两种方式来生成代理对象: <code>JDKProxy</code> 和 <code>Cglib</code>，具体使用哪种方式生成由AopProxyFactory 根据 AdvisedSupport 对象的配置来决定。</p><p>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 Cglib 来生成代理。</p><h4 id="JDK动态接口代理"><a href="#JDK动态接口代理" class="headerlink" title="JDK动态接口代理"></a>JDK动态接口代理</h4><blockquote><p>需要有接口</p></blockquote><p>JDK 动态代理主要涉及到 java.lang.reflect 包中的两个类：Proxy 和 InvocationHandler。InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。Proxy 利用 InvocationHandler 动态创建一个符合某一接口的实例，生成目标类的代理对象。</p><h4 id="CGLib-动态代理"><a href="#CGLib-动态代理" class="headerlink" title="CGLib 动态代理"></a>CGLib 动态代理</h4><blockquote><p>不需要有接口</p></blockquote><p>CGLib 全称为 Code Generation Library，是一个强大的高性能，高质量的代码生成类库，可以在运行期扩展 Java 类与实现 Java 接口，CGLib 封装了 asm，可以再运行期动态生成新的 class。</p><p>和 JDK 动态代理相比较：JDK 创建代理有一个限制，就是只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则可以通过 CGLib 创建动态代理。</p><h3 id="Spring-创建代理对象"><a href="#Spring-创建代理对象" class="headerlink" title="Spring 创建代理对象"></a>Spring 创建代理对象</h3><p>如果该Bean有Advice则返回代理对象，否则返回普通对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="built_in">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="built_in">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">        <span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> createProxy(</span><br><span class="line">            bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> <span class="title class_">SingletonTargetSource</span>(bean));</span><br><span class="line">        <span class="built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是接口，创建JDK代理对象，否则创建Cglib代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> AopProxy <span class="title function_">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException &#123;</span><br><span class="line">        <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">            <span class="keyword">if</span> (targetClass == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AopConfigException</span>(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjenesisCglibAopProxy</span>(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdkDynamicAopProxy</span>(config);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h2><h3 id="配置事务步骤"><a href="#配置事务步骤" class="headerlink" title="配置事务步骤"></a>配置事务步骤</h3><ol><li><p>配置数据源</p></li><li><p>配置事务管理器 <code>PlatformTransactionManager</code></p></li><li><p>开启事务 <code>@EnableTransactionManagement</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HikariDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>();</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql//localhost:3306/test&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置事务管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h3><p>Spring只是个容器，因此它并不做任何事务的具体实现。他只是提供了事务管理的接口PlatformTransactionManager，具体内容由就由各个事务管理器来实现。</p><p>原理：通过 <code>TransactionAwareDataSourceProxy</code> 包装 <code>DataSource</code> </p><p>而在 <code>PlatformTransactionManager</code> 的实现类中可以操作 <code>DataSource</code> ，在 Spring 中实现 <code>commit</code> 和 <code>rollback</code></p><h3 id="Transactional-注解参数"><a href="#Transactional-注解参数" class="headerlink" title="Transactional 注解参数"></a>Transactional 注解参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">transactionManager</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务传播行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务隔离级别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Isolation <span class="title function_">isolation</span><span class="params">()</span> <span class="keyword">default</span> Isolation.DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务的超时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">timeout</span><span class="params">()</span> <span class="keyword">default</span> TransactionDefinition.TIMEOUT_DEFAULT;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该事务是否为只读</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">readOnly</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哪种异常需要回滚</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] rollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哪种异常不需要回滚</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt;[] noRollbackFor() <span class="keyword">default</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="Spring-事务传播行为"><a href="#Spring-事务传播行为" class="headerlink" title="Spring 事务传播行为"></a>Spring 事务传播行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若当前事务存在，则在当前事务中运行，否则开启一个新事务</span></span><br><span class="line"><span class="comment"> * Support a current transaction, create a new one if none exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REQUIRED(TransactionDefinition.PROPAGATION_REQUIRED),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若当前事务存在，则在当前事务中运行，否则不开启事务</span></span><br><span class="line"><span class="comment"> * Support a current transaction, execute non-transactionally if none exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUPPORTS(TransactionDefinition.PROPAGATION_SUPPORTS),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 若当前事务不存在则抛异常</span></span><br><span class="line"><span class="comment"> * Support a current transaction, throw an exception if none exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MANDATORY(TransactionDefinition.PROPAGATION_MANDATORY),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启一个事务并挂起当前事务</span></span><br><span class="line"><span class="comment"> * Create a new transaction, and suspend the current transaction if one exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REQUIRES_NEW(TransactionDefinition.PROPAGATION_REQUIRES_NEW),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行在事务中被挂起</span></span><br><span class="line"><span class="comment"> * Execute non-transactionally, suspend the current transaction if one exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NOT_SUPPORTED(TransactionDefinition.PROPAGATION_NOT_SUPPORTED),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在事务中运行将会抛异常</span></span><br><span class="line"><span class="comment"> * Execute non-transactionally, throw an exception if a transaction exists.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NEVER(TransactionDefinition.PROPAGATION_NEVER),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嵌套在当前事务中运行</span></span><br><span class="line"><span class="comment"> * Execute within a nested transaction if a current transaction exists,</span></span><br><span class="line"><span class="comment"> * behave like PROPAGATION_REQUIRED else. There is no analogous feature in EJB.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NESTED(TransactionDefinition.PROPAGATION_NESTED);</span><br></pre></td></tr></table></figure><h3 id="Spring-事务失效场景"><a href="#Spring-事务失效场景" class="headerlink" title="Spring 事务失效场景"></a>Spring 事务失效场景</h3><ol><li>数据库引擎不支持事务：InnoDB支持事务，MyISAM不支持事务</li><li>数据源没配置事务管理器</li><li>没有抛出异常，或异常类型错误</li><li>方法没有被切面管理，即不是代理对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        updateOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新开的事务不管用，因为没有被切面管理</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// update order</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决上述问题可以将新开的事务写在不同类中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceA</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123;</span><br><span class="line">        serviceB.insert();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 向数据库中添加数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决方案2: 配置文件中加 &lt;aop:config expose-proxy=&quot;true&quot;&gt;</span></span><br><span class="line"><span class="comment"> * 并且使用如下方式调用:</span></span><br><span class="line"><span class="comment"> * ((ServiceA) AopContext.currentProxy()).insert();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><strong>声明式事务和编程式事务</strong></p><p>编程式事务：通过硬编码的形式手动控制事务的提交和回滚。</p><p>声明式事务：只需告诉Spring哪个方法是事务方法即可。</p><p><strong>Spring事务异常</strong></p><p>运行时异常：可以不用处理，默认都回滚。</p><p>编译时异常：要么try-catch，要么thows，默认不回滚。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Boot/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Boot/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-使用"><a href="#Spring-Boot-使用" class="headerlink" title="Spring Boot 使用"></a>Spring Boot 使用</h2><h3 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h3><h4 id="1-静态资源目录"><a href="#1-静态资源目录" class="headerlink" title="1. 静态资源目录"></a>1. 静态资源目录</h4><p>只要项目的静态资源放在类路径下以下目录，就可以正常访问</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">/static</span> <span class="string"></span></span><br><span class="line"><span class="attr">/public</span> <span class="string"></span></span><br><span class="line"><span class="attr">/resources</span> <span class="string"></span></span><br><span class="line"><span class="attr">/META-INF/resources</span></span><br></pre></td></tr></table></figure><h4 id="2-静态资源访问"><a href="#2-静态资源访问" class="headerlink" title="2. 静态资源访问"></a>2. 静态资源访问</h4><p>默认是当前项目的根路径 + 静态资源名</p><p>收到请求时，SpringBoot会先找Controller是否能处理，不能处理的所有请求再交给静态资源处理器</p><h4 id="3-静态资源配置"><a href="#3-静态资源配置" class="headerlink" title="3. 静态资源配置"></a>3. 静态资源配置</h4><p>配置访问前缀</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static</span></span><br></pre></td></tr></table></figure><p>配置访问路径：配置完访问路径后默认访问路径失效</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/my</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-热更新"><a href="#Spring-Boot-热更新" class="headerlink" title="Spring Boot 热更新"></a>Spring Boot 热更新</h2><ol><li>引入依赖 <code>spring-boot-devtools</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改完之后按 <code>Ctrl + F9</code> 更新项目</li></ol><h2 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h2><blockquote><p>只有在容器中的组件，才能使用 @ConfigurationProperties</p></blockquote><p>使用配置绑定读取配置文件 <code>application.properties</code> 中的属性有以下2种方式</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.nickname</span>=<span class="string">张三</span></span><br><span class="line"><span class="attr">user.age</span>=<span class="string">18</span></span><br></pre></td></tr></table></figure><p><strong>@ConfigurationProperties + @Component</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@ConfigurationProperties + @EnableConfigurationProperties(User.class)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(User.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自动配置提示</strong></p><p>引入 <code>spring-boot-configuration-processor</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在SpringBoot打包时排除该依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启项目 在配置文件中键入自定义配置类的配置 产生提示</p><p><img src="https://img-blog.csdnimg.cn/20201228222953379.png" alt="在这里插入图片描述"></p><h2 id="指标监控"><a href="#指标监控" class="headerlink" title="指标监控"></a>指标监控</h2><blockquote><p>Spring Boot Ac0tuator</p></blockquote><h3 id="监控规则"><a href="#监控规则" class="headerlink" title="监控规则"></a>监控规则</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问 <code>域名/actuator/health</code> 可以查看服务的健康信息</p><p>访问规则： <code>域名/actuator/*</code></p><table><thead><tr><th><code>auditevents</code></th><th>Exposes audit events information for the current application. Requires an <code>AuditEventRepository</code> bean.</th></tr></thead><tbody><tr><td><code>beans</code></td><td>Displays a complete list of all the Spring beans in your application.</td></tr><tr><td><code>caches</code></td><td>Exposes available caches.</td></tr><tr><td><code>conditions</code></td><td>Shows the conditions that were evaluated on configuration and auto-configuration classes and the reasons why they did or did not match.</td></tr><tr><td><code>configprops</code></td><td>Displays a collated list of all <code>@ConfigurationProperties</code>.</td></tr><tr><td><code>env</code></td><td>Exposes properties from Spring’s <code>ConfigurableEnvironment</code>.</td></tr><tr><td><code>flyway</code></td><td>Shows any Flyway database migrations that have been applied. Requires one or more <code>Flyway</code> beans.</td></tr><tr><td><code>health</code></td><td>Shows application health information.</td></tr><tr><td><code>httptrace</code></td><td>Displays HTTP trace information (by default, the last 100 HTTP request-response exchanges). Requires an <code>HttpTraceRepository</code> bean.</td></tr><tr><td><code>info</code></td><td>Displays arbitrary application info.</td></tr><tr><td><code>integrationgraph</code></td><td>Shows the Spring Integration graph. Requires a dependency on <code>spring-integration-core</code>.</td></tr><tr><td><code>loggers</code></td><td>Shows and modifies the configuration of loggers in the application.</td></tr><tr><td><code>liquibase</code></td><td>Shows any Liquibase database migrations that have been applied. Requires one or more <code>Liquibase</code> beans.</td></tr><tr><td><code>metrics</code></td><td>Shows ‘metrics’ information for the current application.</td></tr><tr><td><code>mappings</code></td><td>Displays a collated list of all <code>@RequestMapping</code> paths.</td></tr><tr><td><code>scheduledtasks</code></td><td>Displays the scheduled tasks in your application.</td></tr><tr><td><code>sessions</code></td><td>Allows retrieval and deletion of user sessions from a Spring Session-backed session store. Requires a Servlet-based web application using Spring Session.</td></tr><tr><td><code>shutdown</code></td><td>Lets the application be gracefully shutdown. Disabled by default.</td></tr><tr><td><code>startup</code></td><td>Shows the startup steps data collected by the <code>ApplicationStartup</code>. Requires the <code>SpringApplication</code> to be configured with a <code>BufferingApplicationStartup</code>.</td></tr><tr><td><code>threaddump</code></td><td>Performs a thread dump.</td></tr></tbody></table><h3 id="开启Web端配置"><a href="#开启Web端配置" class="headerlink" title="开启Web端配置"></a>开启Web端配置</h3><p>SpringBoot默认不开启Web端的所有Endpoint，配置开启</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>配置health端点展示详细数据</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure><p>配置info的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info.appName</span>=<span class="string">my-project</span></span><br><span class="line"><span class="attr">info.version</span>=<span class="string">1.0.0</span></span><br><span class="line"><span class="attr">info.mavenProjectName</span>=<span class="string">@project.artifactId@</span></span><br></pre></td></tr></table></figure><h3 id="定制Endpoint"><a href="#定制Endpoint" class="headerlink" title="定制Endpoint"></a>定制Endpoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHealthIndicator</span> <span class="keyword">extends</span> <span class="title class_">AbstractHealthIndicator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;count&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;ms&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        builder.status(Status.DOWN)</span><br><span class="line">                .withDetail(<span class="string">&quot;code&quot;</span>, <span class="number">100</span>)</span><br><span class="line">                .withDetails(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问health后就有定制</p><p><img src="https://img-blog.csdnimg.cn/20201231201651587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring Boot Admin"></a>Spring Boot Admin</h3><h4 id="Spring-Boot-Admin-Server"><a href="#Spring-Boot-Admin-Server" class="headerlink" title="Spring Boot Admin Server"></a>Spring Boot Admin Server</h4><p>新建一个SpringBoot项目 加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在启动类注解上增加 <code>@EnableAdminServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBootAdminServerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyBootAdminServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改端口为7000</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">7000</span></span><br></pre></td></tr></table></figure><h4 id="Spring-Boot-Admin-Client"><a href="#Spring-Boot-Admin-Client" class="headerlink" title="Spring Boot Admin Client"></a>Spring Boot Admin Client</h4><p>增加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改配置文件使其指向 <code>Spring Boot Admin Server</code> 的地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">my-demo-app</span></span><br><span class="line"><span class="attr">spring.boot.admin.client.url</span>=<span class="string">http://127.0.0.1:7000</span></span><br><span class="line"><span class="attr">spring.boot.admin.client.instance.prefer-ip</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="启动项目测试"><a href="#启动项目测试" class="headerlink" title="启动项目测试"></a>启动项目测试</h4><p>输入地址 <a href="http://127.0.0.1:7000/">http://127.0.0.1:7000</a></p><p><img src="https://img-blog.csdnimg.cn/20201231210122929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Spring-Boot-启动源码解析"><a href="#Spring-Boot-启动源码解析" class="headerlink" title="Spring Boot 启动源码解析"></a>Spring Boot 启动源码解析</h2><blockquote><p>起步依赖、自动装配</p></blockquote><h3 id="总体概览"><a href="#总体概览" class="headerlink" title="总体概览"></a>总体概览</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新的实例，这个应用程序的上下文将要从指定的来源加载Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class="line">    <span class="comment">// 资源初始化资源加载器，默认为null</span></span><br><span class="line"><span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">// 断言主要加载资源类不能为 null，否则报错</span></span><br><span class="line">Assert.notNull(primarySources, <span class="string">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 初始化主要加载资源类集合并去重</span></span><br><span class="line"><span class="built_in">this</span>.primarySources = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 推断当前 WEB 应用类型，一共有三种：NONE,SERVLET,REACTIVE</span></span><br><span class="line"><span class="built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 设置应用上线文初始化器</span></span><br><span class="line">    <span class="comment">// 从&quot;META-INF/spring.factories&quot;读取ApplicationContextInitializer类的实例名称集合并去重，并使用set去重（一共7个）</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 设置监听器</span></span><br><span class="line">    <span class="comment">// 从&quot;META-INF/spring.factories&quot;读取ApplicationListener类的实例名称集合并去重，并使用set去重（一共11个）</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 推断主入口应用类，通过当前调用栈，获取Main方法所在类，并赋值给mainApplicationClass</span></span><br><span class="line"><span class="built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建并启动计时监控类</span></span><br><span class="line"><span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">stopWatch.start();</span><br><span class="line">    <span class="comment">// 初始化应用上下文和异常报告集合</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置系统属性“java.awt.headless”的值，默认为true，用于运行headless服务器，进行简单的图像处理</span></span><br><span class="line">    <span class="comment">// 多用于在缺少显示屏、键盘或者鼠标时的系统配置，很多监控工具如jconsole 需要将该值设置为true</span></span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">    <span class="comment">// 1.创建所有spring运行监听器并发布应用启动事件</span></span><br><span class="line">    <span class="comment">// 获取SpringApplicationRunListener类型的实例EventPublishingRunListener</span></span><br><span class="line">    <span class="comment">// 并封装进SpringApplicationRunListeners，然后返回SpringApplicationRunListeners</span></span><br><span class="line">    <span class="comment">// 说的简单点，getRunListeners就是准备好了运行时监听器EventPublishingRunListener。</span></span><br><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化默认应用参数类</span></span><br><span class="line"><span class="type">ApplicationArguments</span> <span class="variable">applicationArguments</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultApplicationArguments</span>(args);</span><br><span class="line">        <span class="comment">// 2.根据运行监听器和应用参数来准备spring环境</span></span><br><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        <span class="comment">// 将要忽略的bean的参数打开</span></span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">// 创建banner打印类</span></span><br><span class="line"><span class="type">Banner</span> <span class="variable">printedBanner</span> <span class="operator">=</span> printBanner(environment);</span><br><span class="line">        <span class="comment">// 3.创建应用上下文，可以理解为创建一个容器</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line">        <span class="comment">// 准备异常报告器，用来支持报告关于启动的错误</span></span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        <span class="comment">// 4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础</span></span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        <span class="comment">// 5.刷新应用上下文</span></span><br><span class="line">refreshContext(context);</span><br><span class="line">        <span class="comment">// 应用上下文刷新后置处理，做一些扩展功能</span></span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">// 停止计时监控类</span></span><br><span class="line">stopWatch.stop();</span><br><span class="line">        <span class="comment">// 输出日志记录执行主类名、时间信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">StartupInfoLogger</span>(<span class="built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 发布应用上下文启动监听事件</span></span><br><span class="line">listeners.started(context);</span><br><span class="line">        <span class="comment">// 执行所有的Runner运行器</span></span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发布应用上下文就绪事件</span></span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(ex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回应用上下文</span></span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-创建所有spring运行监听器并发布应用启动事件"><a href="#1-创建所有spring运行监听器并发布应用启动事件" class="headerlink" title="1.创建所有spring运行监听器并发布应用启动事件"></a>1.创建所有spring运行监听器并发布应用启动事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SpringApplicationRunListeners</span> <span class="variable">listeners</span> <span class="operator">=</span> getRunListeners(args);</span><br><span class="line">listeners.starting();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* --- SpringApplicationRunListeners listeners = getRunListeners(args) --- */</span></span><br><span class="line"><span class="comment">// 创建 Spring 监听器</span></span><br><span class="line"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title function_">getRunListeners</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Class&lt;?&gt;[] types = <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationRunListeners</span>(logger,</span><br><span class="line">getSpringFactoriesInstances(SpringApplicationRunListener.class, types, <span class="built_in">this</span>, args));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SpringApplicationRunListeners 构造方法，将日志和监听器们初始化</span></span><br><span class="line">SpringApplicationRunListeners(Log log, Collection&lt;? <span class="keyword">extends</span> <span class="title class_">SpringApplicationRunListener</span>&gt; listeners) &#123;</span><br><span class="line"><span class="built_in">this</span>.log = log;</span><br><span class="line"><span class="built_in">this</span>.listeners = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(listeners);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- listeners.starting() --- */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">starting</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//循环遍历获取监听器</span></span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="built_in">this</span>.listeners) &#123;</span><br><span class="line">listener.starting();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处的监听器可以看出是事件发布监听器，主要用来发布启动事件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//这里是创建application事件 &#x27;applicationStartingEvent&#x27;</span></span><br><span class="line"><span class="built_in">this</span>.initialMulticaster.multicastEvent(<span class="keyword">new</span> <span class="title class_">ApplicationStartingEvent</span>(<span class="built_in">this</span>.application, <span class="built_in">this</span>.args));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// applicationStartingEvent是springboot框架最早执行的监听器，</span></span><br><span class="line"><span class="comment">// 在该监听器执行started方法时，会继续发布事件，主要是基于spring的事件机制</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, <span class="meta">@Nullable</span> ResolvableType eventType)</span> &#123;</span><br><span class="line">    <span class="type">ResolvableType</span> <span class="variable">type</span> <span class="operator">=</span> (eventType != <span class="literal">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line">    <span class="comment">//获取线程池，如果为空则同步处理。这里线程池为空，还未初始化</span></span><br><span class="line">    <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> getTaskExecutor();</span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (executor != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 异步发送事件</span></span><br><span class="line">            executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 同步发送事件</span></span><br><span class="line">            invokeListener(listener, event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-根据运行监听器和应用参数来准备spring环境"><a href="#2-根据运行监听器和应用参数来准备spring环境" class="headerlink" title="2.根据运行监听器和应用参数来准备spring环境"></a>2.根据运行监听器和应用参数来准备spring环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> prepareEnvironment(listeners, applicationArguments);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">prepareEnvironment</span><span class="params">(SpringApplicationRunListeners listeners,</span></span><br><span class="line"><span class="params">ApplicationArguments applicationArguments)</span> &#123;</span><br><span class="line"><span class="comment">// 获取或者创建应用环境</span></span><br><span class="line"><span class="type">ConfigurableEnvironment</span> <span class="variable">environment</span> <span class="operator">=</span> getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 配置应用环境，配置propertySource和activeProfiles</span></span><br><span class="line">configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">// listeners环境准备，广播ApplicationEnvironmentPreparedEvent</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line">listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">// 将环境绑定给当前应用程序</span></span><br><span class="line">bindToSpringApplication(environment);</span><br><span class="line">    <span class="comment">// 对当前的环境类型进行判断，如果不一致进行转换</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">environment = <span class="keyword">new</span> <span class="title class_">EnvironmentConverter</span>(getClassLoader()).convertEnvironmentIfNecessary(environment,</span><br><span class="line">deduceEnvironmentClass());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 配置propertySource对它自己的递归依赖</span></span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line"><span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取或者创建应用环境，根据应用程序的类型可以分为servlet环境、标准环境(特殊的非web环境)和响应式环境</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableEnvironment <span class="title function_">getOrCreateEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//存在则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.environment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据webApplicationType创建对应的Environment</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.webApplicationType) &#123;</span><br><span class="line">        <span class="keyword">case</span> SERVLET:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StandardServletEnvironment</span>();</span><br><span class="line">        <span class="keyword">case</span> REACTIVE:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StandardReactiveWebEnvironment</span>();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StandardEnvironment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置应用环境</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.addConversionService) &#123;</span><br><span class="line"><span class="type">ConversionService</span> <span class="variable">conversionService</span> <span class="operator">=</span> ApplicationConversionService.getSharedInstance();</span><br><span class="line">environment.setConversionService((ConfigurableConversionService) conversionService);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//配置property sources</span></span><br><span class="line">configurePropertySources(environment, args);</span><br><span class="line">    <span class="comment">//配置profiles</span></span><br><span class="line">configureProfiles(environment, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建应用上下文，可以理解为创建一个容器"><a href="#3-创建应用上下文，可以理解为创建一个容器" class="headerlink" title="3.创建应用上下文，可以理解为创建一个容器"></a>3.创建应用上下文，可以理解为创建一个容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title function_">createApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = <span class="built_in">this</span>.applicationContextClass;</span><br><span class="line">    <span class="keyword">if</span> (contextClass == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据不同的应用类型初始化不同的上下文应用类</span></span><br><span class="line">            <span class="keyword">switch</span> (<span class="built_in">this</span>.webApplicationType) &#123;</span><br><span class="line">                <span class="keyword">case</span> SERVLET:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_SERVLET_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> REACTIVE:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_REACTIVE_WEB_CONTEXT_CLASS);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    contextClass = Class.forName(DEFAULT_CONTEXT_CLASS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">                <span class="string">&quot;Unable create a default ApplicationContext, please specify an ApplicationContextClass&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-准备应用上下文，将启动类注入容器，为后续开启自动化提供基础"><a href="#4-准备应用上下文，将启动类注入容器，为后续开启自动化提供基础" class="headerlink" title="4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础"></a>4.准备应用上下文，将启动类注入容器，为后续开启自动化提供基础</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareContext</span><span class="params">(ConfigurableApplicationContext context, ConfigurableEnvironment environment,</span></span><br><span class="line"><span class="params">SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;</span><br><span class="line">    <span class="comment">// 应用上下文的environment</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 应用上下文后处理</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">// 为上下文应用所有初始化器，执行容器中的applicationContextInitializer(spring.factories的实例)</span></span><br><span class="line">    <span class="comment">// 将所有的初始化对象放置到context对象中</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    <span class="comment">// 触发所有SpringApplicationRunListener监听器的ContextPrepared事件方法。添加所有的事件监听器</span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    <span class="comment">// 记录启动日志</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="literal">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册启动参数bean，将容器指定的参数封装成bean，注入容器</span></span><br><span class="line">    <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> context.getBeanFactory();</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class="line">    <span class="comment">// 设置banner</span></span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">        .setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.lazyInitialization) &#123;</span><br><span class="line">        context.addBeanFactoryPostProcessor(<span class="keyword">new</span> <span class="title class_">LazyInitializationBeanFactoryPostProcessor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加载所有资源，指的是启动器指定的参数</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">&quot;Sources must not be empty&quot;</span>);</span><br><span class="line">    <span class="comment">// 将bean加载到上下文中</span></span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// 触发所有springapplicationRunListener监听器的contextLoaded事件方法，</span></span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里没有做任何的处理过程，因为beanNameGenerator和resourceLoader默认为空，可以方便后续做扩展处理</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.beanNameGenerator != <span class="literal">null</span>) &#123;</span><br><span class="line">        context.getBeanFactory().registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</span><br><span class="line">                                                   <span class="built_in">this</span>.beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.resourceLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</span><br><span class="line">            ((GenericApplicationContext) context).setResourceLoader(<span class="built_in">this</span>.resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> DefaultResourceLoader) &#123;</span><br><span class="line">            ((DefaultResourceLoader) context).setClassLoader(<span class="built_in">this</span>.resourceLoader.getClassLoader());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.addConversionService) &#123;</span><br><span class="line">        context.getBeanFactory().setConversionService(ApplicationConversionService.getSharedInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将启动器类加载到spring容器中，为后续的自动化配置奠定基础，之前看到的很多注解也与此相关</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Loading source &quot;</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">BeanDefinitionLoader</span> <span class="variable">loader</span> <span class="operator">=</span> createBeanDefinitionLoader(getBeanDefinitionRegistry(context), sources);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.beanNameGenerator != <span class="literal">null</span>) &#123;</span><br><span class="line">        loader.setBeanNameGenerator(<span class="built_in">this</span>.beanNameGenerator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.resourceLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        loader.setResourceLoader(<span class="built_in">this</span>.resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.environment != <span class="literal">null</span>) &#123;</span><br><span class="line">        loader.setEnvironment(<span class="built_in">this</span>.environment);</span><br><span class="line">    &#125;</span><br><span class="line">    loader.load();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// springboot会优先选择groovy加载方式，找不到在选择java方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">load</span><span class="params">(Class&lt;?&gt; source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;</span><br><span class="line">        <span class="comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span></span><br><span class="line">        <span class="type">GroovyBeanDefinitionSource</span> <span class="variable">loader</span> <span class="operator">=</span> BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);</span><br><span class="line">        load(loader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isComponent(source)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.annotatedReader.register(source);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-刷新应用上下文"><a href="#5-刷新应用上下文" class="headerlink" title="5.刷新应用上下文"></a>5.刷新应用上下文</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class="line">    refresh(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.registerShutdownHook) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context.registerShutdownHook();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (AccessControlException ex) &#123;</span><br><span class="line">            <span class="comment">// Not allowed in some environments.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 刷新上下文环境，初始化上下文环境，对系统的环境变量或者系统属性进行准备和校验</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化beanfactory，解析xml，相当于之前的xmlBeanfactory操作</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为上下文准备beanfactory，对beanFactory的各种功能进行填充，</span></span><br><span class="line">        <span class="comment">// 如@autowired，设置spel表达式解析器，设置编辑注册器，添加applicationContextAwareProcessor处理器等等</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 提供子类覆盖的额外处理，即子类处理自定义的beanfactorypostProcess</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 激活各种beanfactory处理器</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注册拦截bean创建的bean处理器，即注册beanPostProcessor</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化上下文中的资源文件如国际化文件的处理</span></span><br><span class="line">            initMessageSource();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化上下文事件广播器</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给子类扩展初始化其他bean</span></span><br><span class="line">            onRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在所有的bean中查找listener bean,然后 注册到广播器中</span></span><br><span class="line">            registerListeners();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化剩余的非懒惰的bean，即初始化非延迟加载的bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发完成刷新过程，通知声明周期处理器刷新过程，同时发出ContextRefreshEvent通知别人</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">            destroyBeans();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Propagate exception to caller.</span></span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">            <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-自动配置原理"><a href="#Spring-Boot-自动配置原理" class="headerlink" title="Spring Boot 自动配置原理"></a>Spring Boot 自动配置原理</h2><p><img src="https://img-blog.csdnimg.cn/2020122821461787.png" alt="在这里插入图片描述"></p><h3 id="自动包配置原理"><a href="#自动包配置原理" class="headerlink" title="自动包配置原理"></a>自动包配置原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> -&gt; <span class="meta">@EnableAutoConfiguration</span> -&gt; <span class="meta">@AutoConfigurationPackage</span> -&gt; </span><br><span class="line"><span class="meta">@Import(AutoConfigurationPackages.Registrar.class)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取到标注类上的包名，将包名下的所有组件注册进容器</span></span><br><span class="line">register(registry, <span class="keyword">new</span> <span class="title class_">PackageImports</span>(metadata).getPackageNames().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br></pre></td></tr></table></figure><h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p>spring.factories 是帮助 SpringBoot 项目包以外的 Bean 注册到 SpringBoot 项目的 Spring 容器的。</p><p>由于 @ComponentScan 注解只能扫描 SpringBoot 项目包内的 Bean 并注册到 Spring 容器中，因此需要 @EnableAutoConfiguration 来注册项目包外的bean，而 spring.factories 则是用来记录项目包外需要注册的bean类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> -&gt; <span class="meta">@EnableAutoConfiguration</span> -&gt; <span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取自动配置的入口</span></span><br><span class="line">getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line"><span class="comment">// 获取所有候选的配置    </span></span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"><span class="comment">// META-INF/spring.factories 里面写了 SpringBoot 一启动就需加载的所有配置类</span></span><br><span class="line">Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br></pre></td></tr></table></figure><p><strong>按需开启配置项：以DispatcherServlet为例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 在Servlet的Web模块才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="comment">// 容器中拥有DispatcherServlet这个类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DispatcherServlet.class)</span></span><br><span class="line"><span class="comment">// 在 ServletWebServerFactoryAutoConfiguration 后配置</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(ServletWebServerFactoryAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletAutoConfiguration</span>&#123;</span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line">    <span class="comment">// 匹配自定义规则，只有满足这些条件才会将Bean注入进来</span></span><br><span class="line"><span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebMvcProperties.class)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletConfiguration</span> &#123;</span><br><span class="line">        <span class="meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span></span><br><span class="line">        <span class="keyword">public</span> DispatcherServlet <span class="title function_">dispatcherServlet</span><span class="params">(WebMvcProperties webMvcProperties)</span> &#123;</span><br><span class="line">            <span class="type">DispatcherServlet</span> <span class="variable">dispatcherServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DispatcherServlet</span>();</span><br><span class="line">            dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest());</span><br><span class="line">            dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest());</span><br><span class="line">            dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound());</span><br><span class="line">            dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents());</span><br><span class="line">            dispatcherServlet.setEnableLoggingRequestDetails(webMvcProperties.isLogRequestDetails());</span><br><span class="line">            <span class="keyword">return</span> dispatcherServlet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自动配置启动流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareContext -&gt; load</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">load</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">Assert.notNull(source, <span class="string">&quot;Source must not be null&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果是class类型，启用注解类型</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Class&lt;?&gt;) source);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果是resource类型，启动xml解析</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Resource) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Resource) source);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果是package类型，启用扫描包，例如@ComponentScan</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> Package) &#123;</span><br><span class="line"><span class="keyword">return</span> load((Package) source);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 如果是字符串类型，直接加载</span></span><br><span class="line"><span class="keyword">if</span> (source <span class="keyword">instanceof</span> CharSequence) &#123;</span><br><span class="line"><span class="keyword">return</span> load((CharSequence) source);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid source type &quot;</span> + source.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">load</span><span class="params">(Class&lt;?&gt; source)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否使用groovy脚本</span></span><br><span class="line">    <span class="keyword">if</span> (isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;</span><br><span class="line">        <span class="type">GroovyBeanDefinitionSource</span> <span class="variable">loader</span> <span class="operator">=</span> BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);</span><br><span class="line">        load(loader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果数据来源合法 则注册Bean</span></span><br><span class="line">    <span class="keyword">if</span> (isEligible(source)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.annotatedReader.register(source);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 <code>this.annotatedReader.register(source)</code> 追溯</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从给定的bean class中注册一个bean对象，从注解中找到相关的元数据</span></span><br><span class="line"><span class="comment"> * 将启动类注册成为一个 BeanDefination</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">doRegisterBean</span><span class="params">(Class&lt;T&gt; beanClass, <span class="meta">@Nullable</span> String name,</span></span><br><span class="line"><span class="params">      <span class="meta">@Nullable</span> Class&lt;? extends Annotation&gt;[] qualifiers, <span class="meta">@Nullable</span> Supplier&lt;T&gt; supplier,</span></span><br><span class="line"><span class="params">      <span class="meta">@Nullable</span> BeanDefinitionCustomizer[] customizers)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">AnnotatedGenericBeanDefinition</span> <span class="variable">abd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(beanClass);</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.conditionEvaluator.shouldSkip(abd.getMetadata())) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   abd.setInstanceSupplier(supplier);</span><br><span class="line">   <span class="type">ScopeMetadata</span> <span class="variable">scopeMetadata</span> <span class="operator">=</span> <span class="built_in">this</span>.scopeMetadataResolver.resolveScopeMetadata(abd);</span><br><span class="line">   abd.setScope(scopeMetadata.getScopeName());</span><br><span class="line">   <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> (name != <span class="literal">null</span> ? name : <span class="built_in">this</span>.beanNameGenerator.generateBeanName(abd, <span class="built_in">this</span>.registry));</span><br><span class="line"></span><br><span class="line">   AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);</span><br><span class="line">   <span class="keyword">if</span> (qualifiers != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; qualifier : qualifiers) &#123;</span><br><span class="line">         <span class="keyword">if</span> (Primary.class == qualifier) &#123;</span><br><span class="line">            abd.setPrimary(<span class="literal">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (Lazy.class == qualifier) &#123;</span><br><span class="line">            abd.setLazyInit(<span class="literal">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            abd.addQualifier(<span class="keyword">new</span> <span class="title class_">AutowireCandidateQualifier</span>(qualifier));</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (customizers != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (BeanDefinitionCustomizer customizer : customizers) &#123;</span><br><span class="line">         customizer.customize(abd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">BeanDefinitionHolder</span> <span class="variable">definitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(abd, beanName);</span><br><span class="line">   definitionHolder = AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">   BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, <span class="built_in">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刷新容器自动装配入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 此处是自动装配的入口</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在invokeBeanFactoryPostProcessors方法中完成bean的实例化和执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span><br><span class="line"><span class="params">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> &#123;</span><br><span class="line">    <span class="comment">// 开始遍历三个内部类，如果属于BeanDefinitionRegistryPostProcessor子类，加入到bean注册的集合</span></span><br><span class="line">    <span class="comment">// 否则加入到regularPostProcessors</span></span><br><span class="line">    <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">        <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">            <span class="type">BeanDefinitionRegistryPostProcessor</span> <span class="variable">registryProcessor</span> <span class="operator">=</span></span><br><span class="line">                (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">            <span class="comment">//* 进入此方法的实现 ConfigurationClassPostProcessor</span></span><br><span class="line">            registryProcessor.postProcessBeanDefinitionRegistry(registry); </span><br><span class="line">            registryProcessors.add(registryProcessor);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            regularPostProcessors.add(postProcessor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postProcessBeanDefinitionRegistry -&gt; processConfigBeanDefinitions -&gt; parser.parse</span><br></pre></td></tr></table></figure><p>开始执行自动配置逻辑（启动类指定的配置，非默认配置），最终会在ConfigurationClassParser类中，此类是所有配置类的解析类，所有的解析逻辑在parser.parse(candidates)中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> holder.getBeanDefinition();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">                <span class="comment">//* 解析逻辑</span></span><br><span class="line">                parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">                parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                <span class="string">&quot;Failed to parse configuration class [&quot;</span> + bd.getBeanClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//* 执行配置类</span></span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parse -&gt; processConfigurationClass -&gt; doProcessConfigurationClass</span><br></pre></td></tr></table></figure><p>跟进doProcessConfigurationClass方法，此方式是支持注解配置的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title function_">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理内部类逻辑，由于传来的参数是启动类，并不包含内部类，所以跳过</span></span><br><span class="line">    <span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;</span><br><span class="line">        <span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line">        processMemberClasses(configClass, sourceClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line">    <span class="comment">// 针对属性配置的解析</span></span><br><span class="line">    <span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">        sourceClass.getMetadata(), PropertySources.class,</span><br><span class="line">        org.springframework.context.annotation.PropertySource.class)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">            processPropertySource(propertySource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line">                        <span class="string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line">    <span class="comment">// 这里是根据启动类@ComponentScan注解来扫描项目中的bean</span></span><br><span class="line">    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">        sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);</span><br><span class="line">    <span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">        !<span class="built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line">            <span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">            <span class="comment">//遍历项目中的bean，如果是注解定义的bean，则进一步解析</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line">                <span class="built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line">            <span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line">            <span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">bdCand</span> <span class="operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line">                <span class="keyword">if</span> (bdCand == <span class="literal">null</span>) &#123;</span><br><span class="line">                    bdCand = holder.getBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="built_in">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">                    <span class="comment">//递归解析，所有的bean,如果有注解，会进一步解析注解中包含的bean</span></span><br><span class="line">                    parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @Import annotations</span></span><br><span class="line">    <span class="comment">// 递归解析，获取导入的配置类，很多情况下，导入的配置类中会同样包含导入类注解</span></span><br><span class="line">    processImports(configClass, sourceClass, getImports(sourceClass), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line">    <span class="comment">//解析@ImportResource配置类</span></span><br><span class="line">    <span class="type">AnnotationAttributes</span> <span class="variable">importResource</span> <span class="operator">=</span></span><br><span class="line">        AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);</span><br><span class="line">    <span class="keyword">if</span> (importResource != <span class="literal">null</span>) &#123;</span><br><span class="line">        String[] resources = importResource.getStringArray(<span class="string">&quot;locations&quot;</span>);</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">BeanDefinitionReader</span>&gt; readerClass = importResource.getClass(<span class="string">&quot;reader&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">resolvedResource</span> <span class="operator">=</span> <span class="built_in">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">            configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process individual @Bean methods</span></span><br><span class="line">    <span class="comment">//处理@Bean注解修饰的类</span></span><br><span class="line">    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line">    <span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">        configClass.addBeanMethod(<span class="keyword">new</span> <span class="title class_">BeanMethod</span>(methodMetadata, configClass));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process default methods on interfaces</span></span><br><span class="line">    <span class="comment">// 处理接口中的默认方法</span></span><br><span class="line">    processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Process superclass, if any</span></span><br><span class="line">    <span class="comment">//如果该类有父类，则继续返回，上层方法判断不为空，则继续递归执行</span></span><br><span class="line">    <span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">superclass</span> <span class="operator">=</span> sourceClass.getMetadata().getSuperClassName();</span><br><span class="line">        <span class="keyword">if</span> (superclass != <span class="literal">null</span> &amp;&amp; !superclass.startsWith(<span class="string">&quot;java&quot;</span>) &amp;&amp;</span><br><span class="line">            !<span class="built_in">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line">            <span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line">            <span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看获取配置类的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">processImports(configClass, sourceClass, getImports(sourceClass), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;SourceClass&gt; <span class="title function_">getImports</span><span class="params">(SourceClass sourceClass)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Set&lt;SourceClass&gt; imports = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    Set&lt;SourceClass&gt; visited = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">    collectImports(sourceClass, imports, visited);</span><br><span class="line">    <span class="keyword">return</span> imports;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所有的bean都以导入的方式被加载进去</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">collectImports</span><span class="params">(SourceClass sourceClass, Set&lt;SourceClass&gt; imports, Set&lt;SourceClass&gt; visited)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (visited.add(sourceClass)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SourceClass annotation : sourceClass.getAnnotations()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">annName</span> <span class="operator">=</span> annotation.getMetadata().getClassName();</span><br><span class="line">            <span class="keyword">if</span> (!annName.equals(Import.class.getName())) &#123;</span><br><span class="line">                <span class="comment">// 递归</span></span><br><span class="line">                collectImports(annotation, imports, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        imports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), <span class="string">&quot;value&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续回到ConfigurationClassParser中的parse方法中的最后一行,继续跟进该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.deferredImportSelectorHandler.process()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="built_in">this</span>.deferredImportSelectors;</span><br><span class="line">    <span class="built_in">this</span>.deferredImportSelectors = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (deferredImports != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">DeferredImportSelectorGroupingHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeferredImportSelectorGroupingHandler</span>();</span><br><span class="line">            deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span><br><span class="line">            deferredImports.forEach(handler::register);</span><br><span class="line">            handler.processGroupImports();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.deferredImportSelectors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processGroupImports</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="built_in">this</span>.groupings.values()) &#123;</span><br><span class="line">        grouping.getImports().forEach(entry -&gt; &#123;</span><br><span class="line">            <span class="type">ConfigurationClass</span> <span class="variable">configurationClass</span> <span class="operator">=</span> <span class="built_in">this</span>.configurationClasses.get(</span><br><span class="line">                entry.getMetadata());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                processImports(configurationClass, asSourceClass(configurationClass),</span><br><span class="line">                               asSourceClasses(entry.getImportClassName()), <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">                    <span class="string">&quot;Failed to process import candidates for configuration class [&quot;</span> +</span><br><span class="line">                    configurationClass.getMetadata().getClassName() + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterable&lt;Group.Entry&gt; getImports() &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredImportSelectorHolder deferredImport : <span class="built_in">this</span>.deferredImports) &#123;</span><br><span class="line">        <span class="built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),</span><br><span class="line">                           deferredImport.getImportSelector());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.group.selectImports();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DeferredImportSelector <span class="title function_">getImportSelector</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.importSelector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;</span><br><span class="line">    Assert.state(deferredImportSelector <span class="keyword">instanceof</span> AutoConfigurationImportSelector,</span><br><span class="line">                 () -&gt; String.format(<span class="string">&quot;Only %s implementations are supported, got %s&quot;</span>,</span><br><span class="line">                                     AutoConfigurationImportSelector.class.getSimpleName(),</span><br><span class="line">                                     deferredImportSelector.getClass().getName()));</span><br><span class="line">    <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)</span><br><span class="line">        .getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata);</span><br><span class="line">    <span class="built_in">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);</span><br><span class="line">    <span class="keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定制化配置</strong></p><ul><li>修改配置文件为自定义的值</li><li>使用@Bean去替换底层的组件</li><li>使用自定义器XxxCustomizer</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Mybatis</title>
      <link href="/swan-blog/2022/07/26/Spring/Spring%20Mybatis/"/>
      <url>/swan-blog/2022/07/26/Spring/Spring%20Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><ul><li>SqlSessionFactoryBuilder<ul><li>一旦创建了SqlSessionFactory，就不在需要它</li><li>局部变量</li></ul></li><li>SqlSessionFactory<ul><li>可以理解为：数据库连接池</li><li>SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃或重新创建另一个实例</li><li>SqlSessionFactory的最佳作用域是应用作用域</li><li>使用单例模式或者静态单例模式</li></ul></li><li>SqlSession：<ul><li>连接到连接池的一个请求</li><li>用完之后需要关闭，否则资源被占用</li></ul></li></ul><h2 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h2><h3 id="一级缓存（默认开启）"><a href="#一级缓存（默认开启）" class="headerlink" title="一级缓存（默认开启）"></a>一级缓存（默认开启）</h3><p>本地缓存，MyBatis会在表示会话的SqlSession对象中建立一个简单的缓存，将每次查询到的结果结果缓存起来，当下次查询的时候，如果判断先前有个完全一样的查询，会直接从缓存中直接将结果取出返回给用户，不需要再进行一次数据库查询了，执行增删改后失效。</p><p><strong>一级缓存生命周期</strong></p><ol><li>MyBatis在开启一个数据库会话时，会创建一个新的SqlSession对象，SqlSession对象中会有一个新的Executor对象，Executor对象中持有一个新的PerpetualCache对象；当会话结束时，SqlSession对象及其内部的Executor对象还有PerpetualCache对象也一并释放掉。</li><li>如果SqlSession调用了close方法，会释放掉一级缓存PerpetualCache对象，一级缓存将不可用；</li><li>如果SqlSession调用了clearCache，会清空PerpetualCache对象中的数据，但是该对象仍可使用；</li><li>SqlSession中执行了任何一个update操作(update、delete、insert) ，都会清空PerpetualCache对象的数据，但是该对象可以继续使用；</li></ol><p><strong>一级缓存的两种级别</strong></p><ol><li>session 级别的缓存，在同一个 sqlSession 内，对同样的查询将不再查询数据库，直接从缓存中读。</li><li>statement 级别的缓存，避坑： 为了避免这个问题，可以将一级缓存的级别设为 statement 级别的，这样每次查询结束都会清掉一级缓存。</li></ol><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p><strong>开启二级缓存</strong></p><p>增加配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.configuration.cache-enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>在 Mapper.xml 中配置 cache 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">各个参数解释</span></span><br><span class="line"><span class="comment">type: 指定自定义缓存的全类名(实现C)</span></span><br><span class="line"><span class="comment">size: 缓存存放多少个元素</span></span><br><span class="line"><span class="comment">eviction: 缓存回收策略：LRU、FIFO、SOFT、WEAK</span></span><br><span class="line"><span class="comment">LRU(默认): 最近最少未回收</span></span><br><span class="line"><span class="comment">FIFO: 先进先出，按照缓存进入的顺序来移除它们</span></span><br><span class="line"><span class="comment">SOFT: 软引用，移除基于垃圾回收器状态和软引用规则的对象</span></span><br><span class="line"><span class="comment">WEAK: 弱引用，更积极地移除基于垃圾回收器和弱引用规则的对象</span></span><br><span class="line"><span class="comment">flushInterval: 单位ms，缓存刷新间隔，缓存多少时间刷新一次，默认不清空</span></span><br><span class="line"><span class="comment">blocking: 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;1024&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">eviction</span>=<span class="string">&quot;LRU&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;120000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>二级缓存原理</strong></p><p>二级缓存是用来解决一级缓存不能跨会话共享的问题的，范围是namespace 级别的，可以被多个SqlSession 共享（只要是同一个接口里面的相同方法，都可以共享），生命周期和应用同步。如果你的MyBatis使用了二级缓存，并且你的Mapper和select语句也配置使用了二级缓存，那么在执行select查询的时候，MyBatis会先从二级缓存中取，其次才是一级缓存，即MyBatis查询数据的顺序是：二级缓存  &gt; 一级缓存 &gt; 数据库。</p><p>MyBatis 用了一个装饰器的类来维护二级缓存，就是CachingExecutor。如果启用了二级缓存，MyBatis 在创建Executor 对象的时候会对Executor 进行装饰。CachingExecutor 对于查询请求，会判断二级缓存是否有缓存结果，如果有就直接返回，如果没有委派交给真正的查询器Executor 实现类，比如SimpleExecutor 来执行查询，再走到一级缓存的流程。最后会把结果缓存起来，并且返回给用户。</p><p><img src="https://img-blog.csdnimg.cn/20210208104315871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>不推荐开启二级缓存</strong></p><p>因为二级缓存是基于 namespace 的（即一个 Mapper.xml 文件），所有基于该 Mapper 的增删改操作都会刷新缓存，但是如果其他的 Mapper 中有对该 Mapper 中数据表的操作，就会导致两个 namesapce 中的数据不一致。推荐使用 redis 替代。</p><h2 id="Mybatis-批量删除"><a href="#Mybatis-批量删除" class="headerlink" title="Mybatis 批量删除"></a>Mybatis 批量删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">    delete from DUB_ORIGIN_ATTACH</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis过期策略</title>
      <link href="/swan-blog/2022/07/26/Redis/4.%20Redis%20%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/"/>
      <url>/swan-blog/2022/07/26/Redis/4.%20Redis%20%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>每隔100ms就<strong>随机抽取</strong>一些设置了过期时间的key，检查是否过期，如果过期就删除。</p><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>在获取某个key的时候，redis会检查一下，这个key如果过期了就会被删除。</p><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><p>当redis当内存不足以容纳新写入数据时的时候，此时会进行淘汰，有如下策略</p><ol><li>noeviction（默认）：新写入被报错</li><li>allkeys-lru（常用）：移除最近最久未使用的key</li><li>allkeys-lfu：移除最近最少使用的key</li><li>allkeys-random：随机移除某个key</li><li>volatile-lru：在设置过期时间的key中，移除最近最久未使用的key</li><li>volatile-lfu：在设置过期时间的key中，移除最近最少使用的key</li><li>volatile-random：在设置过期时间的key中，随机移除某个key</li><li>volatile-ttl：在设置过期时间的key中，有更早过期时间的key优先移除</li></ol><p><code>redis.conf</code> 配置 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置内存淘汰机制</span></span><br><span class="line">maxmemory<span class="literal">-policy</span> noeviction</span><br><span class="line"><span class="comment"># 配置内存上限</span></span><br><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p>核心算法：LinkedHashMap</p><p>原理：可以重写 <code>removeEldestEntry</code> 方法，使得在容量超出 size 的时候，可以执行淘汰策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruCacheDemo</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;   <span class="comment">// 缓存容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruCacheDemo</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.size() &gt; capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        LruCacheDemo&lt;Integer, String&gt; lru = <span class="keyword">new</span> <span class="title class_">LruCacheDemo</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        lru.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        lru.put(<span class="number">2</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        lru.put(<span class="number">3</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        lru.get(<span class="number">1</span>);</span><br><span class="line">        lru.put(<span class="number">4</span>, <span class="string">&quot;d&quot;</span>);</span><br><span class="line">        System.out.println(lru.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 哈希 + 双向链表 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造一个Node节点作为数据载体</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt;&#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K, V&gt; prev;</span><br><span class="line">        Node&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.prev = <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.prev = <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建一个虚拟的双向链表，存放Node</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkedList</span>&lt;K, V&gt;&#123;</span><br><span class="line">        Node&lt;K, V&gt; head;</span><br><span class="line">        Node&lt;K, V&gt; tail;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DoubleLinkedList</span><span class="params">()</span>&#123;</span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();</span><br><span class="line">            tail = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();</span><br><span class="line">            head.next = tail;</span><br><span class="line">            tail.prev = head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(Node&lt;K, V&gt; node)</span>&#123;</span><br><span class="line">            node.next = head.next;</span><br><span class="line">            node.prev = head;</span><br><span class="line">            head.next.prev = node;</span><br><span class="line">            head.next = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node&lt;K, V&gt; node)</span>&#123;</span><br><span class="line">            node.next.prev = node.prev;</span><br><span class="line">            node.prev.next = node.next;</span><br><span class="line">            node.prev = <span class="literal">null</span>;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Node&lt;K, V&gt; <span class="title function_">getLast</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> tail.prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cacheSize;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Node&lt;Integer, Integer&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    DoubleLinkedList&lt;Integer, Integer&gt; doubleLinkedList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruDemo</span><span class="params">(<span class="type">int</span> cacheSize)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheSize = cacheSize;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        doubleLinkedList = <span class="keyword">new</span> <span class="title class_">DoubleLinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node&lt;Integer, Integer&gt; node = map.get(key);</span><br><span class="line">        doubleLinkedList.removeNode(node);</span><br><span class="line">        doubleLinkedList.addHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="comment">// 更新</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            Node&lt;Integer, Integer&gt; node = map.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            map.put(key, node);</span><br><span class="line">            doubleLinkedList.removeNode(node);</span><br><span class="line">            doubleLinkedList.addHead(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 满了 删除链表最后的Node</span></span><br><span class="line">            <span class="keyword">if</span> (map.size() == cacheSize)&#123;</span><br><span class="line">                Node&lt;Integer, Integer&gt; lastNode = doubleLinkedList.getLast();</span><br><span class="line">                map.remove(lastNode.key);</span><br><span class="line">                doubleLinkedList.removeNode(lastNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新增</span></span><br><span class="line">        Node&lt;Integer, Integer&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value);</span><br><span class="line">        map.put(key, node);</span><br><span class="line">        doubleLinkedList.addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LruDemo</span> <span class="variable">lru</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LruDemo</span>(<span class="number">3</span>);</span><br><span class="line">        lru.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        lru.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        lru.put(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        lru.get(<span class="number">1</span>);</span><br><span class="line">        lru.put(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(lru.map.keySet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis 单线程模型</title>
      <link href="/swan-blog/2022/07/26/Redis/6.%20Redis%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/swan-blog/2022/07/26/Redis/6.%20Redis%20%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NIO异步单线程</p></blockquote><h2 id="为什么redis使用单线程模型"><a href="#为什么redis使用单线程模型" class="headerlink" title="为什么redis使用单线程模型"></a>为什么redis使用单线程模型</h2><ol><li>使用单线程能带来更好的可维护性、开发和调试</li><li>单线程也可以并发地处理客户端的请求<ol><li>redis使用<strong>I&#x2F;O多路复用机制</strong>并发处理来自客户端的多个连接，同时等待多个连接发送的请求。</li><li>在I&#x2F;O多路复用模型中，最重要的函数调用就是select以及类似函数，该方法能同时监控多个文件描述符的可读可写情况，当其中某些文件描述符可读或可写时，select方法就会返回可读以及可写的文件描述符个数。</li><li>使用I&#x2F;O多路复用机制能够极大地减少系统的开销，系统不再需要额外创建和维护进程和线程来监听来自客户端的大量连接，减少服务器的开发成本和维护成本。</li></ol></li><li><strong>Redis 服务中运行的绝大多数操作性能瓶颈都不是CPU</strong><ol><li>多线程技能能够帮助我们充分利用CPU资源来并发执行不同的任务，但是CPU资源往往都不是Redis的性能瓶颈，哪怕我们在一个普通的Linux服务器上启动Redis服务，它也能在1s内处理一百万个用户请求。</li><li>如果这种吞吐量不能满足我们的要求，更推荐的做法是使用分片的方式将不同的请求交给不同的Redis服务器来处理，而不是在一个Redis服务器中引入大量多线程操作。</li><li>Redis不是CPU密集型任务，如果不开启AOF备份，所有Redis的操作都会在内存中完成不会涉及I&#x2F;O操作，这些数据读写只发生在内存中，所以处理速度是非常快的，整个服务的瓶颈在于网络传输带来的延迟和客户端的数据传输，也就是网络I&#x2F;O，所以多线程模型处理全部的外部请求可能不是一个好的方案。</li></ol></li></ol><h2 id="客户端与redis的通信的一次流程"><a href="#客户端与redis的通信的一次流程" class="headerlink" title="客户端与redis的通信的一次流程"></a>客户端与redis的通信的一次流程</h2><ol><li>在redis初始化的时候，redis会将连接应答处理器跟AE_READABLE事件关联起来，接着如果一个客户端与redis发起连接，此时会产生一个AE_READABLE事件，然后由连接应答处理器来处理与客户端的连接，创建客户端对应的socket，同时将这个socket的AE_READABLE事件跟命令请求处理器关联起来。</li><li>当客户端想redis发起请求的时候，首先会在socket产生一个AE_READABLE事件，然后由命令请求处理器来处理，这个命令请求处理器就会从socket中读取请求相关数据，然后进行执行和处理。</li><li>接着redis这边准备好了给客户端的相应数据之后，就会将socket的AE_WRITEABLE事件跟命令回复处理器关联起来，当客户端这边准备好读取相应数据时，就会在socket上产生一个AE_WRITEABLE事件，会由命令回复处理器来处理，就是准备好写入socket，供客户端来读取。</li><li>命令回复处理器写完之后，就会删除这个socket的AE_WRITEABLE事件和命令回复处理器的关联关系。</li></ol><p><img src="https://img-blog.csdnimg.cn/2020121916394029.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis 漏斗算法</title>
      <link href="/swan-blog/2022/07/26/Redis/9.%20Redis%20%E6%BC%8F%E6%96%97%E7%AE%97%E6%B3%95/"/>
      <url>/swan-blog/2022/07/26/Redis/9.%20Redis%20%E6%BC%8F%E6%96%97%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="redis漏斗算法"><a href="#redis漏斗算法" class="headerlink" title="redis漏斗算法"></a>redis漏斗算法</h1><p>漏洞的容量是有限的，如果将漏嘴堵住，然后一直往里面灌水，它就会变满，直至再也装不进去。如果将漏嘴放开，水就会往下流，流走一部分之后，就又可以继续往里面灌水。如果漏嘴流水的速率大于灌水的速率，那么漏斗永远都装不满。如果漏嘴流水速率小于灌水的速率，那么一旦漏斗满了，灌水就需要暂停并等待漏斗腾空。</p><h2 id="Java-实现漏斗算法"><a href="#Java-实现漏斗算法" class="headerlink" title="Java 实现漏斗算法"></a>Java 实现漏斗算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 漏斗算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Funnel 对象的 make_space 方法是漏斗算法的核心，其在每次灌水前都会被调用以触发</span></span><br><span class="line"><span class="comment"> * 漏水，给漏斗腾出空间来。能腾出多少空间取决于过去了多久以及流水的速率。Funnel 对象</span></span><br><span class="line"><span class="comment"> * 占据的空间大小不再和行为的频率成正比，它的空间占用是一个常量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 问题来了，分布式的漏斗算法该如何实现？能不能使用 Redis 的基础数据结构来搞定？</span></span><br><span class="line"><span class="comment"> * 我们观察 Funnel 对象的几个字段，我们发现可以将 Funnel 对象的内容按字段存储到一</span></span><br><span class="line"><span class="comment"> * 个 hash 结构中，灌水的时候将 hash 结构的字段取出来进行逻辑运算后，再将新值回填到</span></span><br><span class="line"><span class="comment"> * hash 结构中就完成了一次行为频度的检测。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 但是有个问题，我们无法保证整个过程的原子性。从 hash 结构中取值，然后在内存里</span></span><br><span class="line"><span class="comment"> * 运算，再回填到 hash 结构，这三个过程无法原子化，意味着需要进行适当的加锁控制。而</span></span><br><span class="line"><span class="comment"> * 一旦加锁，就意味着会有加锁失败，加锁失败就需要选择重试或者放弃。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果重试的话，就会导致性能下降。如果放弃的话，就会影响用户体验。同时，代码的</span></span><br><span class="line"><span class="comment"> * 复杂度也跟着升高很多。这真是个艰难的选择，我们该如何解决这个问题呢？Redis-Cell 救</span></span><br><span class="line"><span class="comment"> * 星来了！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunnelRateLimiter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Funnel&gt; funnels = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isActionAllowed</span><span class="params">(String userId, String actionKey, <span class="type">int</span> capacity, <span class="type">float</span> leakingRate)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s:%s&quot;</span>, userId, actionKey);</span><br><span class="line">        <span class="type">Funnel</span> <span class="variable">funnel</span> <span class="operator">=</span> funnels.get(key);</span><br><span class="line">        <span class="keyword">if</span> (funnel == <span class="literal">null</span>) &#123;</span><br><span class="line">            funnel = <span class="keyword">new</span> <span class="title class_">Funnel</span>(capacity, leakingRate);</span><br><span class="line">            funnels.put(key, funnel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> funnel.watering(<span class="number">1</span>); <span class="comment">// 需要 1 个 quota</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Funnel</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">float</span> leakingRate;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> leftQuota;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> leakingTs;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Funnel</span><span class="params">(<span class="type">int</span> capacity, <span class="type">float</span> leakingRate)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">            <span class="built_in">this</span>.leakingRate = leakingRate;</span><br><span class="line">            <span class="built_in">this</span>.leftQuota = capacity;</span><br><span class="line">            <span class="built_in">this</span>.leakingTs = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">makeSpace</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">nowTs</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">deltaTs</span> <span class="operator">=</span> nowTs - leakingTs;</span><br><span class="line">            <span class="type">int</span> <span class="variable">deltaQuota</span> <span class="operator">=</span> (<span class="type">int</span>) (deltaTs * leakingRate);</span><br><span class="line">            <span class="keyword">if</span> (deltaQuota &lt; <span class="number">0</span>) &#123; <span class="comment">// 间隔时间太长，整数数字过大溢出</span></span><br><span class="line">                <span class="built_in">this</span>.leftQuota = capacity;</span><br><span class="line">                <span class="built_in">this</span>.leakingTs = nowTs;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (deltaQuota &lt; <span class="number">1</span>) &#123; <span class="comment">// 腾出空间太小，最小单位是 1</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.leftQuota += deltaQuota;</span><br><span class="line">            <span class="built_in">this</span>.leakingTs = nowTs;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.leftQuota &gt; <span class="built_in">this</span>.capacity) &#123;</span><br><span class="line">                <span class="built_in">this</span>.leftQuota = <span class="built_in">this</span>.capacity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">watering</span><span class="params">(<span class="type">int</span> quota)</span> &#123;</span><br><span class="line">            makeSpace();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.leftQuota &gt;= quota) &#123;</span><br><span class="line">                <span class="built_in">this</span>.leftQuota -= quota;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis-Cell"><a href="#Redis-Cell" class="headerlink" title="Redis-Cell"></a>Redis-Cell</h2><blockquote><p>Redis 4.0 提供了一个限流 Redis 模块，它叫 redis-cell。该模块也使用了漏斗算法，并提供了原子的限流指令。有了这个模块，限流问题就非常简单了。</p></blockquote><p>该模块只有 1 条指令 cl.throttle</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">cl.throttle laoqian:reply 15 30 60 1</span></span><br><span class="line">--------------------------------------</span><br><span class="line">1. (integer) 0# 0表示允许 1表示拒绝</span><br><span class="line">2. (integer) 15 # 漏斗容量 capacity</span><br><span class="line">3. (integer) 14 # 漏斗剩余空间 left_quota</span><br><span class="line">4. (integer) -1 # 如果拒绝了，需要多长时间后再试(秒)</span><br><span class="line">5. (integer) 2# 多长时间后，漏斗完全空出来(left_quota == capacity，单位秒)</span><br></pre></td></tr></table></figure><p>这个指令的意思是允许「用户老钱回复行为」的频率为每 60s 最多 30 次(漏水速率)，漏斗的初始容量为 15，也就是说一开始可以连续回复 15 个帖子，然后才开始受漏水速率的影响。我们看到这个指令中漏水速率变成了 2 个参数，替代了之前的单个浮点数。用两个参数相除的结果来表达漏水速率相对单个浮点数要更加直观一些。</p><p><img src="https://img-blog.csdnimg.cn/20210205164104345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/swan-blog/2022/07/26/Redis/1.%20Redis%20%E5%9F%BA%E7%A1%80/"/>
      <url>/swan-blog/2022/07/26/Redis/1.%20Redis%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### list</span></span><br><span class="line"><span class="comment"># 取出指定 key 的 start 到 end 个元素</span></span><br><span class="line">LRANGE KEY START END</span><br><span class="line"><span class="comment"># 栈：同向命令，如 `lpush + lpop`，`rpush + rpop`</span></span><br><span class="line"><span class="comment"># 队列：反向命令：如 `lpush + rpop`，`rpush + lpop`</span></span><br><span class="line"><span class="comment"># 取出 k1 的所有元素</span></span><br><span class="line">LRANGE k1 0 -1</span><br><span class="line"><span class="comment"># 实现阻塞队列</span></span><br><span class="line">BLPOP k1 0 <span class="comment"># 客户端1阻塞</span></span><br><span class="line">LPUSH k1 1 2 3 <span class="comment"># 客户端2压入数据客户端1取消阻塞</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### set</span></span><br><span class="line">sadd kset 1 1 2 3 4 5 6 <span class="comment"># 向set里加入数据并去重</span></span><br><span class="line">srandmember kset 3 <span class="comment"># 随机取出3个元素，去重</span></span><br><span class="line">srandmember kset -3 <span class="comment"># 随机取出3个元素，可以有重复</span></span><br><span class="line">spop kset <span class="comment"># 弹出一个元素</span></span><br><span class="line">sinter a b <span class="comment"># 取两个集合的交集</span></span><br><span class="line">sunion a b <span class="comment"># 取两个集合的并集</span></span><br><span class="line">sdiff a b <span class="comment"># 取a集合对于b集合的差集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Hash</span></span><br><span class="line">HSET sean name zzl</span><br><span class="line">HMSET sean age 18 address bj</span><br><span class="line">hget sean name</span><br><span class="line">hmget sean name age</span><br><span class="line">hkeys sean</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>redis的字符串类型是由一种叫做简单动态字符串(SDS)的数据类型来实现</p><ul><li>SDC和C语言字符串的区别：<ul><li>SDS保存了字符串的长度，而C语言不保存，只能遍历找到第一个\0的结束符才能确定字符串的长度</li><li>修改SDS，会检查空间是否足够，不足会先扩展空间，防止缓冲区溢出，C字符串不会检查</li><li>SDS的预分配空间机制，可以减少为字符串重新分配空间的次数</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> len;       <span class="comment">// buf中已占用空间的长度</span></span><br><span class="line">  <span class="type">int</span> <span class="built_in">free</span>;      <span class="comment">// buf中剩余空间的长度</span></span><br><span class="line">  <span class="type">char</span> buf[];    <span class="comment">// 数据空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>双向链表实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">list</span> &#123;</span><br><span class="line">    listNode *head;  <span class="comment">// 表头节点</span></span><br><span class="line">    listNode tail; <span class="comment">// 表尾节点</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> len; <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">    <span class="built_in">void</span> (dup) (<span class="type">void</span> ptr); <span class="comment">// 节点值赋值函数 这里有问题</span></span><br><span class="line">    <span class="built_in">void</span> (free) (<span class="type">void</span> ptr); <span class="comment">// 节点值释放函数</span></span><br><span class="line">    <span class="built_in">int</span> (match) (<span class="type">void</span> *ptr, <span class="type">void</span> *key) <span class="comment">// 节点值对比函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">listNode</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> * pre;  <span class="comment">// 前置节点</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">listNode</span> * next; <span class="comment">// 后置节点</span></span><br><span class="line">    <span class="type">void</span> * value;           <span class="comment">// 节点的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>哈希表是一个dictht结构体</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictht</span> &#123;</span><br><span class="line">  dictEntry ** table;    <span class="comment">// 哈希表数组</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> size;    <span class="comment">// 哈希表大小</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> sizemask <span class="comment">// 哈希表大小掩码，用于计算索引值 总是等于 size - 1</span></span><br><span class="line">  <span class="type">unsigned</span> logn used;    <span class="comment">// 该哈希表已有节点的数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">dictEntry</span>&#123;</span><br><span class="line">  <span class="type">void</span> *key;   <span class="comment">// 键</span></span><br><span class="line">  <span class="keyword">union</span> &#123;      <span class="comment">// 不同键对饮的值得类型可能不同，使用union来处理这个问题</span></span><br><span class="line">    <span class="type">void</span> *val;</span><br><span class="line">    uint64_tu64;</span><br><span class="line">    int64_ts64;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">dictEntry</span> *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>无序集合可以用整数集合(intset)或者字典实现</p><h3 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h3><ol><li>跳表：有序集合的底层实现之， 除此之外跳表它在 Redis 中没有其他应用。</li><li>整数集合（intset）： 当一个集合只包含整数值元素， 并且这个集合的元素数量不多时， Redis 就会使用整数集合作为集合键的底层实现。</li><li>ziplist(压缩列表)：数据少时使用，占用连续内存，每项元素都是(数据+score)的方式连续存储，按照score从小到大排序。ziplist为了节省内存，每个元素占用的空间可以不同，对于大数据(long long)，就多用一些字节存储，而对于小的数据(short)，就少用一些字节来存储。因此查找的时候需要按顺序遍历。ziplist省内存但是查找效率低。</li></ol><h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>可以将多个操作合并成一次请求，降低通信的成本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启socket连接使用redis</span></span><br><span class="line">nc localhost <span class="number">6379</span></span><br><span class="line"><span class="built_in">set</span> k1 v1</span><br><span class="line"><span class="comment"># 批量操作redis</span></span><br><span class="line"><span class="built_in">echo</span> <span class="literal">-e</span> <span class="string">&quot;set k2 2\n incr k2\n get k2&quot;</span> | nc localhost <span class="number">6379</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setCache</span><span class="params">(List&lt;String&gt; names, String key)</span> &#123;</span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> redis.pipelined();</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        pipeline.zadd(key, name, score);</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.expire(key, CACHE_EXPIRE_SECONDS);</span><br><span class="line">    pipeline.sync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish Subscribe"></a>Publish Subscribe</h2><p>在redis中的A端开启消息的发布<code>publish</code></p><p>在redis中的B端使用<code>subscribe</code>可实时监听消息</p><p><strong>服务端</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; publish my hello</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; publish my world</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>消费端</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; subscribe my</span><br><span class="line">Reading messages... (press Ctrl<span class="literal">-C</span> to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;my&quot;</span></span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;my&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;world&quot;</span></span><br></pre></td></tr></table></figure><p><strong>使用场景：实时聊天</strong></p><p>客户端A发布消息到redis</p><ol><li><p>客户端B订阅消息，收消息</p></li><li><p>redis zset服务订阅消息，维护近期的热点消息，时间作为分值，消息作为元素，剔除早期的数据</p></li><li><p>数据库服务订阅消息，维护全量消息数据</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210110094824260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="redis-encoding"><a href="#redis-encoding" class="headerlink" title="redis encoding"></a>redis encoding</h2><p><strong>判断这个key中value的编码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object encoding key</span><br></pre></td></tr></table></figure><p>二进制安全：redis只取字节流</p><p>如果进行了 incr 操作，那么 redis 会将 value 取出转换成数值类型再进行 incr</p><p><strong>编码集格式化</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --raw</span><br></pre></td></tr></table></figure><h2 id="Sorted-Set"><a href="#Sorted-Set" class="headerlink" title="Sorted Set"></a>Sorted Set</h2><blockquote><p>skip list</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加元素到zset</span></span><br><span class="line">zadd kzset 8 apple 2 banana 3 orange</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看zset的元素，带分值</span></span><br><span class="line">zrange kzset 0 -1 WITHSCORES</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取出分值3-8之间的元素</span></span><br><span class="line">zrangbyscore kzset 3 8</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取出对应元素的分值</span></span><br><span class="line">zscore kzset apple</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">得到对应元素的排名</span></span><br><span class="line">zrank kzset apple</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加对应元素分值+</span> </span><br><span class="line">zincrby kzset 2.5 banana</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并集 第一个集合权重1 第二个集合权重0.5</span></span><br><span class="line">zunionstore unkey 2 k1 k2 weights 1 0.5</span><br></pre></td></tr></table></figure><h2 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h2><p>1字节 &#x3D; 8位 即 1字节 &#x3D; 0000 0000</p><p>将k1偏移量为1的位置上设置为1，即 0100 0000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setbit k1 1 1</span><br><span class="line">strlen k1 # 长度是1</span><br></pre></td></tr></table></figure><p>将k1偏移量为9的位置上设置为1，即 0000 0000 0100 0000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setbit k2 9 1</span><br><span class="line">strlen k2 # 长度是2</span><br></pre></td></tr></table></figure><p><strong>bitpos</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitpos key bit start end</span><br></pre></td></tr></table></figure><p>从第一个字节中找出1的第一次出现位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitpos k1 1 0 0</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>从第二个字节中找出1的第一次出现位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bitpos k2 1 1 1</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure><p><strong>bitcount</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT key [start] [end]</span><br></pre></td></tr></table></figure><p><code>start</code> 和 <code>end</code> 都可以使用负数值：比如 <code>-1</code> 表示最后一个位，而 <code>-2</code> 表示倒数第二个位，以此类推。</p><p>返回前两个字节中1的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitcount k1 0 1</span><br></pre></td></tr></table></figure><p><strong>bitop</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按位与 有0则0</span></span><br><span class="line">bitop and ka k1 k2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按位或 有1则1</span></span><br><span class="line">bitop or ko k1 k2</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><ol><li>有用户系统，统计用户登录天数，且窗口随机</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setbit sean 1 1# 第1天登录</span><br><span class="line">setbit sean 7 1# 第7天登录</span><br><span class="line">setbit sean 364 1# 第364天登录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看长度，即46个字节即可保存一个用户一年的登录天数</span></span><br><span class="line">strlen sean</span><br><span class="line">(integer) 46</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">反向索引找到最后一次的登录时间</span></span><br><span class="line">bitcount sean -2 -1</span><br></pre></td></tr></table></figure><ol start="2"><li>统计某几天的活跃用户数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2020-6-18 号用户数1个</span></span><br><span class="line">setbit 20200618 1 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2020-6-18 号用户数2个</span></span><br><span class="line">setbit 202006191 1</span><br><span class="line">setbit 202006197 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按位或运算</span></span><br><span class="line">bitop or destkey 20190618 20190619</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计人数</span></span><br><span class="line">bitcount destkey 0 -1</span><br></pre></td></tr></table></figure><p>位图可以这样表示：user1登录了一天，user2登录了两天，user3没登录</p><table><thead><tr><th>key</th><th>user1</th><th>user2</th><th>user3</th></tr></thead><tbody><tr><td>20200618</td><td>0</td><td>1</td><td>0</td></tr><tr><td>20200619</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><h2 id="Redis是二进制安全的"><a href="#Redis是二进制安全的" class="headerlink" title="Redis是二进制安全的"></a>Redis是二进制安全的</h2><p>客户端通过socket访问redis，redis拿到的是字节流，然后通过某一个编码集转化，换言之，只要双方客户端有统一的编码，数据就不会被破坏。</p><p>Redis支持的语言超级多，不同语言对于同一类型的宽度理解是不一样的，就会发生溢出。这也是为什么在多语言开发的时候，我们倾向于使用JSON、XML等文本表述数据的方式进行交互，而不使用序列化。因为一旦序列化之后，就需要多增加一步编解码，其实就是统一约定好各数据类型的长度。否则，你那边认为int是两位，我这边认为int是四位，就很容易取出后溢出。那么Redis作为一个非常核心的一个中间商，它就只取字节流。</p><h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><p><img src="https://img-blog.csdnimg.cn/20200203083421315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis常见缓存问题</title>
      <link href="/swan-blog/2022/07/26/Redis/2.%20Redis%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/swan-blog/2022/07/26/Redis/2.%20Redis%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="redis常见缓存问题"><a href="#redis常见缓存问题" class="headerlink" title="redis常见缓存问题"></a>redis常见缓存问题</h1><h2 id="缓存与数据库双写不一致"><a href="#缓存与数据库双写不一致" class="headerlink" title="缓存与数据库双写不一致"></a>缓存与数据库双写不一致</h2><p>现象1：先修改数据库，再删除缓存，如果缓存删除失败，缓存中是旧数据，就会出现数据不一致。</p><p>解决1：先删除缓存，再修改数据库，如果修改数据库失败了，数据库是旧数据，缓存为空，数据一致。</p><p>现象2：在更新一个库存的时候，同时在读取这个库存，此时数据库修改还未完成，缓存中存储的就是旧的数据。</p><p>解决2：将数据库与缓存的更新和读取进行异步串行化。</p><p>点赞请求发信息给后台，后台先发一条半消息给MQ，然后修改redis，最后提交MQ消息更新数据库。定时任务校验缓存与DB的一致性</p><p><img src="https://img-blog.csdnimg.cn/9b3103e38e8e4a9faad83246385b25ce.png" alt="在这里插入图片描述"></p><p>通用设计：能异步就异步处理</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote><p>key集中过期导致短时间内大量请求落到数据库</p></blockquote><p>解决：过期时间使用固定时间+随机值模式，稀释集中到期的key的数量</p><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><blockquote><p>查询一个一定不存在的数据，缓存不会命中</p></blockquote><p>解决：空结果进行缓存，设置一个比较短的过期时间，比如说5分钟。</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><blockquote><p>超高热点的key过期导致短时间内大量请求落到数据库</p></blockquote><p>解决：分布式锁</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="/swan-blog/2022/07/26/Redis/3.%20Redis%20%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/swan-blog/2022/07/26/Redis/3.%20Redis%20%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>默认的持久化方式，在指定的时间间隔内将内存中的数据集快照写入磁盘的二进制文件中，默认文件名为<code>dump.rdb</code>，全量更新</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</li><li>生成RDB文件的时候，redis主进程会fork一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。<ol><li>fork：指的是子进程和父进程指向了同一个内存空间，但父子进程数据是隔离的，所以快照备份的是快照时间点的那部分数据。</li><li>fork实现了copy on write，也就是说父进程修改的时候会复制一份到子进程，本质上是子进程修改了指针指向</li></ol></li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li></ol><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><ol><li>由于进行快照持久化时，会开启一个子进程专门负责快照持久化，子进程会拥有父进程的内存数据，所以在快照持久化期间修改的数据不会被保存，可能丢失数据</li><li>不支持拉链，只有一个 dump.rdb</li></ol><p><img src="https://img-blog.csdnimg.cn/20210127185350887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 900秒内1条记录更新则备份</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"># 当启用了RDB且最后一次后台保存数据失败，redis是否停止接收数据</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"># 对于存储到磁盘中的快照，可以设置是否进行压缩存储</span><br><span class="line">rdbcompression yes</span><br><span class="line"># redis使用CRC64算法来进行数据校验，但是这样做会增加大约10%的性能消耗</span><br><span class="line">rdbchecksum yes</span><br><span class="line"># 设置快照的文件名</span><br><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>redis会将每一个收到的写命令都通过write函数追加到文件中，通俗的理解就是日志记录。</p><p>持久化文件会变的越来越大，为了压缩aof的持久化文件。redis提供了bgrewriteaof命令。将内存中的数据以命令的方式保存到临时文件中，同时会fork出一条新进程来将文件重写。</p><h3 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h3><ol><li>AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。（2）AOF日志文件没有任何磁盘寻址的开销，写入性能非常高，文件不容易破损。</li><li>AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。</li><li>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</li></ol><h3 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h3><ol><li>对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大</li><li>AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的</li><li>以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。</li></ol><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启AOF，yes 是， no 否</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化策略</span></span><br><span class="line"><span class="comment"># 1. always: 同步持久化，每次发生数据变更会立即记录到磁盘，性能较差但完整性较好</span></span><br><span class="line"><span class="comment"># 2. everysec: 出厂默认推荐，异步操作，每秒记录，如果一秒宕机，有数据丢失</span></span><br><span class="line"><span class="comment"># 3. no</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF文件持续增长过大时，会fork出一条新进程来讲文件重写</span></span><br><span class="line">no-appendfsync-on-rewrite no <span class="comment"># 重写时是否可以运用appendfsync，用no即可，保证数据的安全性</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure><p>修复AOF文件： <code>redis-check-aof --fix appendonly.aof</code></p><h3 id="设计一个方案让-AOF-足够小"><a href="#设计一个方案让-AOF-足够小" class="headerlink" title="设计一个方案让 AOF 足够小"></a>设计一个方案让 AOF 足够小</h3><p>hdfs + fsimage + edits.log 让日志只记录增量合并的过程</p><p>4.0以前：重写，删除抵消的命令、合并重复的命令，最终也是一个纯指令的日志文件</p><p>4.0以后：重写，将增量以指令的方式 Append 到 RDB，AOF是是一个混合体，利用了RDB的和AOF的全量</p><p>写操作会触发IO：no、always、每秒</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis事务</title>
      <link href="/swan-blog/2022/07/26/Redis/5.%20Redis%20%E4%BA%8B%E5%8A%A1/"/>
      <url>/swan-blog/2022/07/26/Redis/5.%20Redis%20%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>redis事务可以一次执行多个命令，但不保证原子性，redis同一个事务中如果有一条命令执行失败，其它命令仍然会被执行，不会回滚。</p><p>谁的事务先到达（EXEC）就执行谁的事务</p><p>常用命令</p><table><thead><tr><th>命令</th><th>序号</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>DISCARD</td><td>取消事务，放弃执行事务块内的所有命令</td></tr><tr><td>2</td><td>EXEC</td><td>执行事务块内的命令</td></tr><tr><td>3</td><td>MULTI</td><td>标记一个事务的开始</td></tr><tr><td>4</td><td>WATCH key…</td><td>监视一个或多个key，如果事务执行前这些key被其它命令改动，那么事务将被打断</td></tr><tr><td>5</td><td>UNWATCH</td><td>取消对所有Key的监视</td></tr></tbody></table><h2 id="2-命令演示"><a href="#2-命令演示" class="headerlink" title="2.命令演示"></a>2.命令演示</h2><p>初始化数据，并使用watch监视name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name a</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>客户端A开watch监视name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch name</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name aa</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>此时客户端B抢先提交了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set name bb</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br></pre></td></tr></table></figure><p>那么客户端A提交会失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3.代码演示"></a>3.代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    stringRedisTemplate.watch(REDIS_LOCK);</span><br><span class="line">    <span class="keyword">if</span> (uuid.equals(stringRedisTemplate.opsForValue().get(REDIS_LOCK)))&#123;</span><br><span class="line">        stringRedisTemplate.setEnableTransactionSupport(<span class="literal">true</span>);</span><br><span class="line">        stringRedisTemplate.multi();</span><br><span class="line">        stringRedisTemplate.delete(REDIS_LOCK);</span><br><span class="line">        List&lt;Object&gt; exec = stringRedisTemplate.exec();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(exec)) <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.unwatch();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁</title>
      <link href="/swan-blog/2022/07/26/Redis/8.%20Redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/swan-blog/2022/07/26/Redis/8.%20Redis%20%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h2 id="锁实现"><a href="#锁实现" class="headerlink" title="锁实现"></a>锁实现</h2><p>利用setnx的返回值特性，有值返回失败，无值返回成功，需要设置过期时间。</p><p>redisson：一种基于redis的封装好的分布式锁。</p><h2 id="redisson-实现分布式锁"><a href="#redisson-实现分布式锁" class="headerlink" title="redisson 实现分布式锁"></a>redisson 实现分布式锁</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;redis://&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SSL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;rediss://&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisProperties redisProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedissonClient redissonClient)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedissonSpringCacheManager</span>(redissonClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 解决jackson2无法反序列化LocalDateTime的问题</span></span><br><span class="line">        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        om.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        config.setCodec(<span class="keyword">new</span> <span class="title class_">JsonJacksonCodec</span>(om));</span><br><span class="line">        RedisProperties.<span class="type">Cluster</span> <span class="variable">cluster</span> <span class="operator">=</span> redisProperties.getCluster();</span><br><span class="line">        <span class="keyword">if</span> (cluster != <span class="literal">null</span>) &#123;</span><br><span class="line">            clusterConfig(config, cluster);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            singleConfig(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clusterConfig</span><span class="params">(Config config, RedisProperties.Cluster cluster)</span>&#123;</span><br><span class="line">        List&lt;String&gt; nodes = cluster.getNodes();</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeout() == <span class="literal">null</span>) &#123;</span><br><span class="line">            redisProperties.setTimeout(Duration.ofSeconds(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        config.useClusterServers()</span><br><span class="line">                .addNodeAddress(nodes.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">                .setConnectTimeout((<span class="type">int</span>) redisProperties.getTimeout().toMillis())</span><br><span class="line">                .setPassword(redisProperties.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">singleConfig</span><span class="params">(Config config)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> redisProperties.isSsl() ? SSL_PREFIX : PREFIX;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeout() == <span class="literal">null</span>) &#123;</span><br><span class="line">            redisProperties.setTimeout(Duration.ofSeconds(<span class="number">3</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setAddress(prefix + redisProperties.getHost() + <span class="string">&quot;:&quot;</span> + redisProperties.getPort())</span><br><span class="line">                .setConnectTimeout((<span class="type">int</span>) redisProperties.getTimeout().toMillis())</span><br><span class="line">                .setDatabase(redisProperties.getDatabase())</span><br><span class="line">                .setPassword(redisProperties.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock_key&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 参数1：WAIT_TIME 等待锁释放的时间</span></span><br><span class="line">        <span class="comment">// 参数2：LEASE_TIME 超出该时间锁自动释放</span></span><br><span class="line">        <span class="keyword">if</span> (lock.tryLock(<span class="number">0</span>, <span class="number">60</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            <span class="comment">// 得到锁执行业务逻辑</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> BusinessException.of(<span class="string">&quot;提交过于频繁，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 运行业务逻辑时异常也要将锁释放掉</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redisson-看门狗"><a href="#redisson-看门狗" class="headerlink" title="redisson 看门狗"></a>redisson 看门狗</h2><blockquote><p>如果锁过期，但是业务还未执行完，通过看门狗就可以自动将锁续期</p></blockquote><p>原理：Redisson通过一个后台线程（定时任务），会每隔10秒检查一下，如果客户端还持有锁key，那么就会不断的延长锁key的生存时间。如果服务挂掉了，定时任务自然也就跑不下去了。</p><p>同时满足下面两个条件，Redisson才会启用看门狗机制</p><ol><li>当前线程获取锁成功</li><li>未指定锁的超时时间，看门狗才生效；如果我们指定了锁超时时间（LEASE_TIME），则看门狗不会启动</li></ol><p>自动续期底层还是一段LUA脚本，通过hexists指令判断锁是不是自己的锁，如果是的话，则通过pexpire指令将锁的过期时间给重置为30秒，返回1，表示自动续期成功；返回0，表示续期失败。</p><p>过了 10s 左右，判断到线程还持有着这把锁，即业务还没执行完，就会将锁的时间重新设置为 30s，返回true，然后通过递归，又过了10s，再一次续期，不断循环这个过程，直到锁被释放或者其它一些情况判断到当前线程已经没有持有这把锁之后，取消看门狗定时任务。</p><h2 id="分布式锁可能产生的问题"><a href="#分布式锁可能产生的问题" class="headerlink" title="分布式锁可能产生的问题"></a>分布式锁可能产生的问题</h2><h3 id="单机问题"><a href="#单机问题" class="headerlink" title="单机问题"></a>单机问题</h3><p>如果redis挂了，那么整个业务都会停滞</p><p>解决方案：redis最好使用集群</p><h3 id="Redis主从集群的问题"><a href="#Redis主从集群的问题" class="headerlink" title="Redis主从集群的问题"></a>Redis主从集群的问题</h3><p>服务A使用Redis Master加锁，此时锁还没同步到Slave，Master挂了，那么此时服务B来获取锁，Master挂了就从Slave获取，由于Slave没有锁，所以可以成功获取到，此时就出现了没锁上的问题。</p><p>解决方案：红锁</p><h3 id="红锁"><a href="#红锁" class="headerlink" title="红锁"></a>红锁</h3><p>奇数台Redis，不做主从，从第一台开始加锁，过半则加锁成功。</p><p>举例：5台Redis，则加锁3台就成功，A服务加锁1、2、3台Redis成功，此时B服务进来，1、2、3台redis加过锁了就不能加了，只能加4、5台机器，由于没过半，B服务加锁失败。</p><p>5台中有Redis挂了怎么办，在程序中配好5台redis，3台redis加锁成功则成功，即使挂一台，剩下4台Redis还是大于3台，依旧可以正常运行。</p><p>红锁的问题：如果服务A在1、2、3台Redis加锁成功，此时第3台Redis挂了，重启后锁信息丢失，B服务就可以使用3、4、5获取到锁</p><p>解决：Redis部署手册写延迟启动（24H）</p><h3 id="JVM的STW问题"><a href="#JVM的STW问题" class="headerlink" title="JVM的STW问题"></a>JVM的STW问题</h3><p>当JVM出现STW有可能导致看门狗没续上期。</p><p>解决1：鸵鸟算法</p><p>解决2：使用1台redis做锁，1台redis稳定性其实非常高</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从哨兵集群</title>
      <link href="/swan-blog/2022/07/26/Redis/7.%20Redis%20%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/"/>
      <url>/swan-blog/2022/07/26/Redis/7.%20Redis%20%E4%B8%BB%E4%BB%8E%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简介：主从复制即将master中的数据及时有效地复制到slave中</p><p>特征：一个master可以有多个slave，一个slave只对应一个master。</p><p>职责：master写数据，同步数据到salve，slave读数据</p><h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><p><img src="https://img-blog.csdnimg.cn/20200203094442305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol><li>建立连接</li></ol><p><img src="https://img-blog.csdnimg.cn/20200203131319126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>同步数据</li></ol><p><img src="https://img-blog.csdnimg.cn/20200203131306330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h3><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4><p>方式1：客户端发送命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;master-ip&gt; &lt;master-port&gt;</span><br></pre></td></tr></table></figure><p>方式2：启动时添加参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;master-ip&gt; &lt;master-port&gt;</span><br></pre></td></tr></table></figure><p>方式3：修改配置文件<code>redis.conf</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;master-ip&gt; &lt;master-port&gt;</span><br></pre></td></tr></table></figure><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有信息</span></span><br><span class="line">info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看主从信息</span></span><br><span class="line">info replication </span><br><span class="line"></span><br><span class="line"><span class="comment"># 断开连接</span></span><br><span class="line">slaveof no one</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>复制缓冲区大小设置不合理会导致数据溢出使主从数据不一致，主从数据不一致会导致全量复制，所以必须将复制缓冲区设置一个合理的大小。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制缓冲区默认为1mb</span></span><br><span class="line">repl-blocking-size 1mb</span><br></pre></td></tr></table></figure><ol start="2"><li>master单机内存占用建议使用50%-70%，留下30%-50%用于执行bgsave命令和创建缓冲区。</li><li>slave最好只对外开放读功能，不开放写功能</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave-serve-stale-data <span class="built_in">yes</span>|no</span><br></pre></td></tr></table></figure><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>哨兵（sentinel）是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。哨兵也是一台redis服务器，只是不提供数据服务，通常哨兵的配置数量为单数。</p><ol><li>监控：不断的检查master和slave是否正常运行，master存活检测、master与slave运行情况检测</li><li>通知：当被监控的服务器出现故障时，向其他客户端发送通知</li><li>自动故障转移：断开master和slave连接，选取一个slave作master，将其他slave连接到新master，并告知客户端新的服务器地址</li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定端口 26379</span></span><br><span class="line">port 26379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">监控主节点，名称为mymaster，至少需要两个哨兵同意才会进行故障转移</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">30秒未响应判断死亡</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br></pre></td></tr></table></figure><p>启动哨兵服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server ./26379.conf --sentinel</span><br></pre></td></tr></table></figure><p>查看哨兵的通信，在master节点输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE *</span><br></pre></td></tr></table></figure><p>可以看到以下输出，哨兵在询问master是否存活</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3) &quot;__sentinel__:hello&quot;</span><br><span class="line">4) &quot;127.0.0.1,26379,36f7e5a15c4bda4ea9394a8b90c5c2c307123b25,0,mymaster,127.0.0.1,6379,0&quot;</span><br><span class="line">1) &quot;pmessage&quot;</span><br></pre></td></tr></table></figure><h3 id="整合-Spring-Boot"><a href="#整合-Spring-Boot" class="headerlink" title="整合 Spring Boot"></a>整合 Spring Boot</h3><ol><li>pom依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">master:</span> <span class="string">mymaster</span></span><br><span class="line">      <span class="attr">nodes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26379</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26380</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:26381</span></span><br></pre></td></tr></table></figure><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><h3 id="示意图-1"><a href="#示意图-1" class="headerlink" title="示意图"></a>示意图</h3><p>各个数据库相互通信，保存各个库中槽的编号数据</p><ul><li><p>一次命中，直接返回</p></li><li><p>一次未命中，告知具体位置</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200203150519604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>准备三个redis服务，6379 6380 6381</p><h3 id="命令启动集群"><a href="#命令启动集群" class="headerlink" title="命令启动集群"></a>命令启动集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主机正常启动</span></span><br><span class="line">redis-server ./6379.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从机追随主机启动</span></span><br><span class="line">redis-server ./6380.conf --replicaof 127.0.0.1 6379</span><br><span class="line">redis-server ./6381.conf --replicaof 127.0.0.1 6379</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有哨兵模式，主机6379挂了，人工将从机6380切换为主机，并让6381追随它</span></span><br><span class="line">127.0.0.1:6380&gt; replicaof no one</span><br><span class="line">127.0.0.1:6381&gt; replicaof 127.0.0.1 6380</span><br></pre></td></tr></table></figure><h3 id="配置文件启动集群"><a href="#配置文件启动集群" class="headerlink" title="配置文件启动集群"></a>配置文件启动集群</h3><ol><li>修改redis.conf</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启集群</span></span><br><span class="line">cluster-enabled yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置集群配置文件，每个服务器要不一样</span></span><br><span class="line">cluster-config-file node-6379.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置下线时间</span></span><br><span class="line">cluster-node-timeoout 10000</span><br></pre></td></tr></table></figure><ol start="2"><li>依次启动集群服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis-6379.conf</span><br></pre></td></tr></table></figure><ol start="3"><li><p>将redis服务连接起来</p><blockquote><p>需要执行src目录下的redis-trib.rb，且需要ruby环境<br>下列命名表示1个master有1个slave，且一共有6个服务器</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 \</span><br><span class="line">127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 \</span><br><span class="line">127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Selenium</title>
      <link href="/swan-blog/2022/07/26/Python/BackTrader/"/>
      <url>/swan-blog/2022/07/26/Python/BackTrader/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.backtrader.com/docu/">https://www.backtrader.com/docu/</a></p></blockquote><h2 id="BackTrader-架构"><a href="#BackTrader-架构" class="headerlink" title="BackTrader 架构"></a>BackTrader 架构</h2><ul><li>DataFeed：数据传递</li><li>Cerebro：大脑，核心引擎</li><li>Broker：经纪人，负责 订单执行、仓位管理、交易费率设置</li><li>Startegy：策略类<ul><li>Observer：观察模块，策略执行</li><li>Analyzer：分析模块，策略统计</li><li>Indicator：指标模块</li></ul></li><li>Sizer：开仓、平仓的的计算和执行</li></ul><img src="https://img-blog.csdnimg.cn/b64b4dc71bab4285a8996200c1166291.png" alt="在这里插入图片描述" style="zoom: 33%;" /><h2 id="BackTrader-Demo-Code"><a href="#BackTrader-Demo-Code" class="headerlink" title="BackTrader Demo Code"></a>BackTrader Demo Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> backtrader <span class="keyword">as</span> bt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestStrategy</span>(bt.Strategy):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.sma = bt.indicators.MovingAverageSimple()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.datas[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.position:</span><br><span class="line"><span class="comment"># 以开盘价限价下单</span></span><br><span class="line">  self.buy(exectype=bt.Order.Limit, price=data.<span class="built_in">open</span>[<span class="number">0</span>], size=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.close(size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_frame = pd.read_csv(<span class="string">&quot;demo.csv&quot;</span>)</span><br><span class="line">    cerebro = bt.Cerebro()</span><br><span class="line">    data_frame[<span class="string">&#x27;datetime&#x27;</span>] = pd.to_datetime(data_frame[<span class="string">&#x27;datetime&#x27;</span>])</span><br><span class="line">    data_frame.set_index(<span class="string">&#x27;datetime&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">    data_feeds_1h = bt.feeds.PandasData(dataname=data_frame)</span><br><span class="line">    <span class="comment"># 数据</span></span><br><span class="line">    cerebro.adddata(data_feeds_1h)</span><br><span class="line">    <span class="comment"># 策略</span></span><br><span class="line">    cerebro.addstrategy(TestStrategy)</span><br><span class="line">    <span class="comment"># 经纪人</span></span><br><span class="line">    cerebro.broker.setcash(<span class="number">1000000</span>)</span><br><span class="line">    <span class="comment"># 手续费</span></span><br><span class="line">    cerebro.broker.setcommission(<span class="number">0.0002</span>)</span><br><span class="line">    <span class="comment"># 执行回测</span></span><br><span class="line">    result = cerebro.run()</span><br><span class="line">    post_cash = cerebro.broker.getcash()</span><br><span class="line">    cerebro.plot(style=<span class="string">&#x27;candle&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Selenium</title>
      <link href="/swan-blog/2022/07/26/Python/Selenium/"/>
      <url>/swan-blog/2022/07/26/Python/Selenium/</url>
      
        <content type="html"><![CDATA[<h3 id="Selenium控制已打开的Chrome-mac"><a href="#Selenium控制已打开的Chrome-mac" class="headerlink" title="Selenium控制已打开的Chrome (mac)"></a>Selenium控制已打开的Chrome (mac)</h3><ol><li><p>下载Webdriver放到<code>/user/local/bin</code>目录下</p></li><li><p>添加环境变量</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/Applications/Google Chrome.app/Contents/MacOS:$PATH&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>命令打开Chrome</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Google\ Chrome --remote-debugging-port=9222 --user-data-dir=<span class="string">&quot;ChromeProfile&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>执行代码</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;debuggerAddress&quot;</span>, <span class="string">&quot;127.0.0.1:9222&quot;</span>)</span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/11.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/11.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参照文章</p><p><a href="https://zhuanlan.zhihu.com/p/20028672?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=645673402199969792&amp;utm_campaign=shareopn">https://zhuanlan.zhihu.com/p/20028672?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=645673402199969792&amp;utm_campaign=shareopn</a></p></blockquote><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><p>若在一张表中，在属性（或属性组）X的值确定的情况下，必定能确定属性Y的值，那么就可以说Y函数依赖于X，写作 X → Y</p><h3 id="完全函数依赖"><a href="#完全函数依赖" class="headerlink" title="完全函数依赖"></a>完全函数依赖</h3><p>在一张表中，若 X → Y，且对于 X 的任何一个真子集（假如属性组 X 包含超过一个属性的话），X ‘ → Y 不成立，那么我们称 Y 对于 X <strong>完全函数依赖</strong></p><p><img src="https://pic3.zhimg.com/80/12513de20079d12b99d946072df7311a_1440w.jpg" alt="img"></p><h3 id="部分函数依赖"><a href="#部分函数依赖" class="headerlink" title="部分函数依赖"></a>部分函数依赖</h3><p>如果X’→Y成立，则称X→Y是<strong>部分函数依赖</strong>，即Y部分函数依赖于X。</p><p><img src="https://pic4.zhimg.com/80/10b52b39b18b8ea9fb17b46babf4d20f_1440w.jpg" alt="img"></p><h3 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h3><p>在关系模式R (U) 中，如果X→Y，Y→Z，Z不是Y的子集，Y不决定X，则称Z对X <strong>传递函数依赖</strong></p><p><img src="https://pic2.zhimg.com/80/51f8105fbbe92adaa3e343ea2db3bf49_1440w.jpg" alt="img"></p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p>所有关系型数据库的基本要求，所有基本属性都不可再分</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p>在1NF的基础上，消除了非主属性对码的部分函数依赖</p><p><strong>举例说明：</strong></p><img src="https://pic3.zhimg.com/80/dfdc86b0e2babe1f8da03d8e2b17ad06_1440w.jpg" alt="img" style="zoom:50%;" /><p>码：（学号、课名）</p><p>主属性：学号、课名</p><p>非主属性：姓名、系名、系主任、分数</p><p>（学号、课名）-&gt; 姓名，存在部分函数依赖，因为学号就可以推出姓名</p><p>（学号、课名）-&gt; 系名，存在部分函数依赖，因为学号就可以推出系名</p><p>（学号、课名）-&gt; 系主任，存在部分函数依赖，因为学号就可以推出系主任</p><p>（学号、课名）-&gt; 分数，不存在部分函数依赖，因为学号和课名缺一个都无法推出分数</p><h3 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h3><p>在2NF的基础上，消除了非主属性对码的传递函数依赖</p><p><strong>举例说明：</strong></p><p>上面的表模式分解之后如下两张表：分数表、学生表</p><img src="https://pic4.zhimg.com/80/46b18d25eb2a0da487e4f1b4520c979f_1440w.jpg" alt="img" style="zoom:50%;" /><img src="https://pic3.zhimg.com/80/e3d91cd4a91ae656c9bf874ae298836a_1440w.jpg" alt="img" style="zoom:50%;" /><p><strong>分数表</strong></p><p>码：（学号、课名）</p><p>主属性：学号、课名</p><p>非主属性：分数</p><p>（学号、课名）-&gt; 分数，不存在传递函数依赖</p><p><strong>学生表</strong></p><p>码：（学号）</p><p>主属性：学号</p><p>非主属性：姓名、系名、系主任</p><p>学号 -&gt; 姓名，不存在传递函数依赖</p><p>学号 -&gt; 系名 -&gt; 系主任，存在传递函数依赖</p><p>要满足3NF，需要将分数表和学生表模式分解为 分数表、学生表、系表</p><img src="https://pic3.zhimg.com/80/cbb6b2658e4ba90a895f94ef5823d52a_1440w.jpg" alt="img" style="zoom:50%;" /><img src="https://pic3.zhimg.com/80/253c5d60c6ebcbb257cf8c3025399cf2_1440w.jpg" alt="img" style="zoom:50%;" /><img src="https://pic2.zhimg.com/80/2ae1f9ab577ce5eec0d0e028a749bc71_1440w.jpg" alt="img" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL执行原理</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/12.%20SQL%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/12.%20SQL%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-Server组成部分"><a href="#SQL-Server组成部分" class="headerlink" title="SQL Server组成部分"></a>SQL Server组成部分</h2><p><img src="https://img-blog.csdnimg.cn/20190423191904900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUzNTQ3Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li><p>关系引擎：主要作用是优化和执行查询。</p><ol><li>命令解析器：检查语法和转换查询树。</li><li>查询执行器：优化查询。</li><li>查询优化器：负责执行查询。</li></ol></li><li><p>存储引擎：管理所有数据及涉及的IO</p><ol><li>事务管理器：通过锁来管理数据及维持事务的ACID属性。</li><li>数据访问方法：处理对行、索引、页、行版本、空间分配等的I&#x2F;O请求。</li><li>缓冲区管理器：管理SQL Server的主要内存消耗组件Buffer Pool。</li></ol></li><li><p>Buffer Pool：包含SQL Server的所有缓存。如计划缓存和数据缓存。</p></li><li><p>事务日志：记录事务的所有更改。保证事务ACID属性的重要组件。</p></li><li><p>数据文件：数据库的物理存储文件。</p></li><li><p>SQL Server网络接口：建立在客户端和服务器之间的网络连接的协议层</p></li></ol><h2 id="查询的底层原理"><a href="#查询的底层原理" class="headerlink" title="查询的底层原理"></a>查询的底层原理</h2><p><img src="https://img-blog.csdnimg.cn/2019042319215785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUzNTQ3Ng==,size_16,color_FFFFFF,t_70"></p><h3 id="大致实现"><a href="#大致实现" class="headerlink" title="大致实现"></a>大致实现</h3><ol><li>命令解析器：检查语法，检查缓存</li><li>查询优化器：分析SQL，生成多个候选执行计划，选择开销最小的</li><li>查询执行器：将执行计划传给存储引擎</li><li>数据访问方法：将SQL解析为可操作数据代码，传给缓冲区管理器</li><li>缓冲区管理器：检查数据是否在缓存中存在，如存在直接返回，否则从磁盘读出放入缓存并返回给<strong>数据访问方法</strong></li><li>数据访问方法 -&gt; 查询执行器 -&gt; 客户端</li></ol><h3 id="详细实现"><a href="#详细实现" class="headerlink" title="详细实现"></a>详细实现</h3><ol><li><p>当客户端执行一条T-SQL语句给SQL Server服务器时，会首先到达服务器的网络接口，网络接口和客户端之间有协议层。</p></li><li><p>客户端和网络接口之间建立连接。使用称为“表格格式数据流”(TDS) 数据包的 Microsoft 通信格式来格式化通信数据。</p></li><li><p>客户端发送TDS包给协议层。协议层接收到TDS包后，解压并分析包里面包含了什么请求。</p></li><li><p>命令解析器解析T-SQL语句。命令解析器会做下面几件事情：</p><ol><li>检查语法。发现有语法错误就返回给客户端。下面的步骤不执行。</li><li>检查缓冲池（Buffer Pool）中是否存在一个对应该T-SQL语句的执行计划缓存。</li><li>如果找到已缓存的执行计划，就从执行计划缓存中直接读取，并传输给查询执行器执行。</li><li>如果未找到执行计划缓存，则在查询执行器中进行优化并产生执行计划，存放到Buffer Pool中。</li></ol></li><li><p>查询优化器优化SQL语句</p><p>当Buffer Pool中没有该SQL语句的执行计划时，就需要将SQL传到查询优化器，通过一定的算法，分析SQL语句，产生一个或多个候选执行计划。选出开销最小的计划作为最终执行计划。然后将执行计划传给查询执行器。</p></li><li><p>查询执行器执行查询</p><p>查询执行器把执行计划通过OLE DB接口传给存储引擎的数据访问方法。</p></li><li><p>数据访问方法生成执行代码</p><p>数据访问方法将执行计划生成SQL Server可操作数据的代码，不会实际执行这些代码，传送给缓冲区管理器来执行。</p></li><li><p>缓冲区管理器读取数据。</p><p>先在缓冲池的数据缓存中检查是否存在这些数据，如果存在，就把结果返回给存储引擎的数据访问方法；如果不存在，则从磁盘（数据文件）中读出数据并放入数据缓存中，然后将读出的数据返回给存储引擎的数据访问方法。</p></li><li><p>对于读取数据，将会申请共享锁，事务管理器分配共享锁给读操作。</p></li><li><p>存储引擎的数据访问方法将查询到的结果返回关系引擎的查询执行器。</p></li><li><p>查询执行器将结果返回给协议层。</p></li><li><p>协议层将数据封装成TDS包，然后协议层将TDS包传给客户端。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql调优</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/5.%20Mysql%20%E8%B0%83%E4%BC%98/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/5.%20Mysql%20%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>导入mysql官方案例数据库 <a href="https://dev.mysql.com/doc/index-other.html">https://dev.mysql.com/doc/index-other.html</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash"><span class="built_in">source</span> /sakila-db/sakila-schema.sql</span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash"><span class="built_in">source</span> /sakila-db/sakila-data.sql</span></span><br></pre></td></tr></table></figure><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="slow-query-log"><a href="#slow-query-log" class="headerlink" title="slow query log"></a>slow query log</h3><blockquote><p>慢查询日志</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看是否开启慢查询日志</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query_log%&#x27;</span></span><br><span class="line"><span class="comment">-- 开启和关闭 (1和0)，数据库关闭失效</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 查看多少时间算慢查询，默认10秒</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%long_query_time%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 设置慢查询的阈值</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time<span class="operator">=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="show-profile"><a href="#show-profile" class="headerlink" title="show profile"></a>show profile</h3><blockquote><p>是mysql提供可以用来分析当前会话中的语句执行的资源消耗情况，可以用于sql调优的测量</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看profile是否开启，默认关闭</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;profiling&#x27;</span>;</span><br><span class="line"><span class="comment">-- 打开profile</span></span><br><span class="line"><span class="keyword">set</span> profiling <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line"><span class="comment">-- 查询profiles</span></span><br><span class="line"><span class="keyword">show</span> profiles;</span><br><span class="line"><span class="comment">-- 查询详情</span></span><br><span class="line"><span class="keyword">show</span> profile cpu, block io <span class="keyword">for</span> query [Query_ID];</span><br></pre></td></tr></table></figure><h3 id="执行计划-explain"><a href="#执行计划-explain" class="headerlink" title="执行计划 explain"></a>执行计划 explain</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- Explain查询结果字段说明 ---</span></span><br><span class="line">id: id越大，优先级越高；id相同，执行顺序由上至下</span><br><span class="line">select_type: 查询类型，主要用于区别普通查询、联合查询、子查询等</span><br><span class="line"><span class="keyword">table</span>: 查询的表</span><br><span class="line">partitions: 分区</span><br><span class="line">type: 访问类型</span><br><span class="line">possible_keys: 查询涉及到的字段若存在索引，将被列出，但不一定被实际使用</span><br><span class="line">key: 实际使用的索引，如为<span class="keyword">NULL</span>，则没使用索引。查询中若使用了覆盖索引，则该索引仅出现在key列表中</span><br><span class="line">key_len: 索引的长度</span><br><span class="line"><span class="keyword">ref</span>: 显示索引的哪一列被使用了</span><br><span class="line"><span class="keyword">rows</span>: 根据表统计信息索引选用的情况，大致估算出找出所需的记录需要读取的行数</span><br><span class="line">extra: 额外信息</span><br><span class="line"></span><br><span class="line"><span class="comment">--- type (至少要达到range) ---</span></span><br><span class="line"><span class="keyword">system</span>: 表中只有一行记录，可忽略不计</span><br><span class="line">const: 一次就检索到，主键或唯一索引比较常量</span><br><span class="line">eq_ref: 唯一性索引扫描，表中只有一条记录与之匹配，常见于主键或唯一索引扫描</span><br><span class="line"><span class="keyword">ref</span>: 非唯一性索引扫描，返回匹配某个单独值的所有行</span><br><span class="line"><span class="keyword">range</span>: 只检索给定范围的行，<span class="keyword">where</span>子句中出现<span class="operator">&lt;</span>、<span class="operator">&gt;</span>、<span class="keyword">between</span>、<span class="keyword">in</span>等查询</span><br><span class="line">index: 全索引扫描</span><br><span class="line"><span class="keyword">all</span>: 全表扫描</span><br><span class="line"></span><br><span class="line"><span class="comment">--- extra ---</span></span><br><span class="line"><span class="keyword">Using</span> filesort: 无法利用索引进行排序，只能利用排序算法，会消耗额外的位置</span><br><span class="line"><span class="keyword">Using</span> temporary: 建立临时表来保存中间结果，查询完成后把临时表删除</span><br><span class="line"><span class="keyword">Using</span> Index: 当前查询有覆盖索引的，直接从索引中取数据，不访问数据表</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">where</span>: 使用了<span class="keyword">where</span>查询</span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">join</span> buffer: 使用了连接缓存</span><br><span class="line">impossible <span class="keyword">where</span>: <span class="keyword">where</span>子句的结果是<span class="literal">false</span></span><br><span class="line"><span class="keyword">select</span> tables optimized away: 在没有<span class="keyword">group</span> <span class="keyword">by</span>子句的情况下，基于索引优化MIN<span class="operator">/</span>MAX操作</span><br><span class="line"><span class="keyword">distinct</span>: 优化<span class="keyword">distinct</span>操作，在找到第一匹配元组后即停止找同样值的动作</span><br></pre></td></tr></table></figure><h2 id="数据类型优化"><a href="#数据类型优化" class="headerlink" title="数据类型优化"></a>数据类型优化</h2><h3 id="数据类型设计原则"><a href="#数据类型设计原则" class="headerlink" title="数据类型设计原则"></a>数据类型设计原则</h3><ol><li><p><strong>使用可以正确存储数据的最小数据类型</strong></p><p>更小数据类型更快，因为它们占用更少的磁盘、内存和CPU缓存，并且处理时需要的CPU周期更少</p></li><li><p>简单数据类型的操作通常需要更少的CPU周期</p><ol><li>整型比字符操作代价更低，因为字符集和校对规则是字符比较比整型比较更复杂</li><li>使用mysql自建类型而不是字符串来存储日期和时间</li><li>用整型存储IP地址</li></ol></li><li><p>查询条件中避免包含可为NULL的列</p><p>mysql难以优化查询中包含可为 NULL 的列，因为可为 NULL 的列使得索引、索引统计和值比较变得更加复杂</p></li><li><p>推荐使用整型的自增主键</p><p><strong>必须有主键原因</strong>：B+树必须有个主键，没有主键这个树无法组织，如果没有定义主键，Mysql会通过隐藏列<code>rowId</code>来生成一个主键。</p><p><strong>推荐整型原因</strong>：因为B+树需要一直比较主键的大小，整型的比较速度比字符串快，因为比较字符串需要先转换为ASCII码。而且整型比字符串省空间。</p><p><strong>推荐自增原因</strong>：因为B+树的存储是从左到右递增的。如果使用随机数存储，那么有可能将索引插入到中间的一个已经满的子节点中，那么就会导致树需要页分裂再平衡来维护索引。如果是自增的话，每一次插入的索引都是在最后的，所以性能比较高。</p></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ol><li><p>整型：尽量使用满足需求的最小数据类型</p><p>TINYINT 8位，SMALLINT 16位，MEDIUMINT 24位，INT 32位，BIGINT 64位</p></li><li><p>字符和字符串类型</p><ol><li><p>varchar：根据实际内容长度保存数据</p><p>varchar(n) n小于等于255使用额外一个字节保存长度，n&gt;255使用额外两个字节保存长度</p><p>varchar(5)与varchar(255)保存同样的内容，硬盘存储空间相同，但内存空间占用不同，是指定的大小 </p></li><li><p>char固定长度的字符串</p><p>最大长度为255，会自动删除末尾的空格。检索和写效率都比varchar高，以空间换时间​</p></li></ol></li><li><p>BLOB 和 TEXT 类型</p><p>MySQL 把每个 BLOB 和 TEXT 值当作一个独立的对象处理</p><p>两者都是为了存储很大数据而设计的字符串类型，分别采用二进制和字符方式存储</p></li><li><p>日期类型：不要使用字符串存储日期类型，占用空间大，损失日期类型函数的便捷性</p><ol><li>datetime：8字节，与时区无关，数据库底层时区配置对datetime无效，可保存到毫秒，可保存时间范围大</li><li>timestamp：4字节，范围：1970-01-01到2038-01-19，采用整形存储，依赖数据库设置的时区自动更新timestamp列的值</li><li>date：3字节，范围 1000-01-01~9999-12-31，可以利用日期时间函数进行日期之间的计算</li></ol></li></ol><h3 id="枚举代替字符串类型"><a href="#枚举代替字符串类型" class="headerlink" title="枚举代替字符串类型"></a>枚举代替字符串类型</h3><p>有时可以使用枚举类代替常用的字符串类型，mysql存储枚举类型会非常紧凑，会根据列表值的数据压缩到一个或两个字节中，mysql在内部会将每个值在列表中的位置保存为整数，并且在表的.frm文件中保存“数字-字符串”映射关系的查找表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create table enum_test(e enum(&#x27;fish&#x27;,&#x27;apple&#x27;,&#x27;dog&#x27;) not null);</span><br><span class="line">insert into enum_test(e) values(&#x27;fish&#x27;),(&#x27;dog&#x27;),(&#x27;apple&#x27;);</span><br><span class="line">select e+0 from enum_test;</span><br></pre></td></tr></table></figure><h3 id="特殊类型数据"><a href="#特殊类型数据" class="headerlink" title="特殊类型数据"></a>特殊类型数据</h3><p>人们经常使用varchar(15)来存储ip地址，然而，它的本质是32位无符号整数不是字符串，可以使用INET_ATON()和INET_NTOA函数在这两种表示方法之间转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select inet_aton(&#x27;1.1.1.1&#x27;)</span><br><span class="line">select inet_ntoa(16843009)</span><br></pre></td></tr></table></figure><h2 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h2><h3 id="优化细节"><a href="#优化细节" class="headerlink" title="优化细节"></a>优化细节</h3><ol><li>当使用索引列进行查询的时候尽量不要使用表达式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> actor_id <span class="keyword">from</span> actor <span class="keyword">where</span> actor_id<span class="operator">=</span><span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> actor_id <span class="keyword">from</span> actor <span class="keyword">where</span> actor_id<span class="operator">+</span><span class="number">1</span><span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>尽量使用主键查询，因为主键查询不会触发回表查询</p></li><li><p>使用前缀索引：取一个字符串的前几个字节作为索引，节约存储空间</p><p>对于 BLOB, TEXT, VARCHAR 类型的列必须要使用前缀索引，因为 mysql 不允许索引这些列的完整长度</p><p>mysql 无法使用前缀索引做 order by 和 group by</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 索引的选择性越高则查询效率越高</span></span><br><span class="line"><span class="comment">-- 索引的选择性 = 不重复的索引值 / 数据表记录总数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">3</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel3,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">4</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel4,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">5</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel5,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">6</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel6,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">7</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel7,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">left</span>(city,<span class="number">8</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> sel8 </span><br><span class="line"><span class="keyword">from</span> citydemo;</span><br><span class="line"><span class="comment">-- 根据前面测试创建前缀索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> citydemo <span class="keyword">add</span> key(city(<span class="number">7</span>));</span><br></pre></td></tr></table></figure><ol start="2"><li><p>索引排序：explain 出来的 type 列的值为 index ，说明 mysql 使用了索引扫描做排序</p><p>在使用排序的时候，如果 where 和 order by 中的列能组成一个最左前缀匹配，就会使用索引排序</p></li><li><p>union all,in,or都能够使用索引，但是推荐使用in</p></li><li><p>范围列可以用到索引，但是范围列后面的列无法用到索引，索引最多用于一个范围列</p></li><li><p>强制类型转换会全表扫描</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不会触发索引</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> phone<span class="operator">=</span><span class="number">13800001234</span>;</span><br><span class="line"><span class="comment">-- 触发索引</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> phone<span class="operator">=</span><span class="string">&#x27;13800001234&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="6"><li><p>当需要进行表连接的时候，最好不要超过三张表，因为需要 join 的字段，数据类型必须一致</p></li><li><p>能使用limit的时候尽量使用limit</p></li><li><p>单表索引建议控制在5个以内，单索引字段数不允许超过5个（组合索引）</p></li></ol><h3 id="查询性能低下原因"><a href="#查询性能低下原因" class="headerlink" title="查询性能低下原因"></a>查询性能低下原因</h3><blockquote><p>网络、CPU、IO、上下文切换、系统调用、生成统计信息、锁等待时间</p></blockquote><p>查询性能低下的主要原因：某些查询需要筛选大量的数据，可以通过减少访问数据量进行优化</p><ol><li><p>查询不需要的记录：查询时要在后面添加 <code>limit</code></p></li><li><p>多表关联时返回全部列</p></li><li><p>总是取出全部列 <code>select *</code></p></li><li><p>重复查询相同的数据：需重复执行返回相同数据的查询，可以使用缓存</p></li></ol><h3 id="执行过程的优化"><a href="#执行过程的优化" class="headerlink" title="执行过程的优化"></a>执行过程的优化</h3><h4 id="查询优化处理"><a href="#查询优化处理" class="headerlink" title="查询优化处理"></a>查询优化处理</h4><ol><li><p>语法解析器和预处理</p><p>mysql通过关键字将SQL语句进行解析，并生成一颗解析树，mysql解析器将使用mysql语法规则验证和解析查询，例如验证使用使用了错误的关键字或者顺序是否正确等等，预处理器会进一步检查解析树是否合法，例如表名和列名是否存在，是否有歧义，还会验证权限等等</p></li><li><p>查询优化器</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> film_actor;</span><br><span class="line"><span class="comment">-- 可以看到上面这条查询语句需要经过多少个数据页才能找到对应的数据（基于成本）</span></span><br><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;last_query_cost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>mysql可能会选择错误的执行计划 原因如下</strong></p><ol><li><p>统计信息不准确：InnoDB因为其mvcc的架构，并不能维护一个数据表的行数的精确统计信息</p></li><li><p>执行计划的成本估算不等同于实际执行的成本：有时候某个执行计划虽然需要读取更多的页面，但是他的成本却更小，因为如果这些页面都是顺序读或者这些页面都已经在内存中的话，那么它的访问成本将很小，mysql层面并不知道哪些页面在内存中，哪些在磁盘，所以查询之际执行过程中到底需要多少次IO是无法得知的</p></li><li><p>mysql的优化是基于成本模型的优化，但是有可能不是最快的优化</p></li><li><p>mysql不考虑其他并发执行的查询</p></li><li><p>mysql不会考虑不受其控制的操作成本</p></li><li><p>执行存储过程或者用户自定义函数的成本</p></li></ol><h4 id="优化器的优化策略"><a href="#优化器的优化策略" class="headerlink" title="优化器的优化策略"></a>优化器的优化策略</h4><ol><li><p>静态优化：直接对解析树进行分析，并完成优化</p></li><li><p>动态优化：动态优化与查询的上下文有关，也可能跟取值、索引对应的行数有关</p></li></ol><p>mysql对查询的静态优化只需要一次，但对动态优化在每次执行时都需要重新评估</p><h4 id="优化器的优化类型"><a href="#优化器的优化类型" class="headerlink" title="优化器的优化类型"></a>优化器的优化类型</h4><ol><li><p>重新定义关联表的顺序：数据表的关联并不总是按照在查询中指定的顺序进行。将外连接转化成内连接，内连接的效率要高于外连接，使用等价变换规则，mysql可以使用一些等价变化来简化并规划表达式</p></li><li><p>min max：使用min max的时候，使用 group by 条件，这样可以使用索引</p></li><li><p>索引覆盖扫描：当索引中的列包含所有查询中需要使用的列的时候，可以使用覆盖索引</p></li><li><p>等值传播： 如果两个列的值通过等式关联，那么mysql能够把其中一个列的where条件传递到另一个上</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这两个SQL执行效率是一样的</span></span><br><span class="line">explain <span class="keyword">select</span> film.film_id <span class="keyword">from</span> film <span class="keyword">inner</span> <span class="keyword">join</span> film_actor </span><br><span class="line"><span class="keyword">using</span>(film_id) <span class="keyword">where</span> film.film_id <span class="operator">&gt;</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">explain <span class="keyword">select</span> film.film_id <span class="keyword">from</span> film <span class="keyword">inner</span> <span class="keyword">join</span> film_actor </span><br><span class="line"><span class="keyword">using</span>(film_id) <span class="keyword">where</span> film.film_id <span class="operator">&gt;</span> <span class="number">500</span> <span class="keyword">and</span> film_actor.film_id <span class="operator">&gt;</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure><h4 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h4><p>子查询尽可能使用关联查询代替，因为子查询产生的临时表数据集多，产生额外的IO </p><h4 id="优化排序"><a href="#优化排序" class="headerlink" title="优化排序"></a>优化排序</h4><p>排序的算法：</p><ol><li><p>两次传输排序：第一次数据读取是将需要排序的字段读取出来，然后进行排序，第二次是将排好序的结果按照需要去读取数据行</p><p>缺点：需要进行两次IO，效率较低</p></li><li><p>单次传输排序：先读取查询所需要的所有列，然后再根据给定列进行排序，最后直接返回排序结</p><p>缺点：在查询的列特别多的时候，会占用大量的存储空间，无法存储大量的数据</p></li></ol><p><strong>优化策略</strong></p><p>当需要排序的列的总大小超过 max_length_for_sort_data 定义的字节，mysql 会选择双次排序，反之使用单次排序，当然，用户可以设置此参数的值来选择排序的方式</p><h4 id="优化count查询"><a href="#优化count查询" class="headerlink" title="优化count查询"></a>优化count查询</h4><p>总有人认为myisam的count函数比较快，这是有前提条件的，只有没有任何where条件的count才是比较快的</p><p><strong>使用近似值</strong></p><p>在某些应用场景中，不需要完全精确的值，可以参考使用近似值来代替，比如可以使用explain来获取近似的值</p><p>其实在很多OLAP的应用中，需要计算某一个列值的基数，有一个计算近似值的算法叫hyperloglog。</p><p><strong>更复杂的优化</strong></p><p>一般情况下，count()需要扫描大量的行才能获取精确的数据，其实很难优化，在实际操作的时候可以考虑使用索引覆盖扫描，或者增加汇总表，或者增加外部缓存系统。</p><h4 id="优化关联查询"><a href="#优化关联查询" class="headerlink" title="优化关联查询"></a>优化关联查询</h4><p>join的实现方式原理</p><p><img src="https://img-blog.csdnimg.cn/20210122101434106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>Join Buffer会缓存所有参与查询的列而不是只有Join的列。</li><li>可以通过调整join_buffer_size缓存大小，默认值是256K</li><li>使用Block Nested-Loop Join算法需要开启优化器管理配置的optimizer_switch的设置block_nested_loop为on，默认为开启。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%optimizer_switch%&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>join on and 解释</strong></p><p>两张表匹配的时候，如果使用 and ，那么最终结果集中未被 and 匹配上的记录会展示为 NULL</p><p>举例1：假如是左连接，那么下面第一行返回的结果集的基础上，再将 e.age &lt;&#x3D; 20的 d 表的记录置为NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dep d <span class="keyword">on</span> e.id <span class="operator">=</span> d.id </span><br><span class="line"><span class="keyword">and</span> e.age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>举例2：左表记录都存在，右表记录都是NULL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dep d <span class="keyword">on</span> <span class="number">1</span> <span class="operator">!=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>优化策略</strong></p><ol><li><p>确保 on 或者 using 子句中的列上有索引</p></li><li><p>一般情况下来说，只需要在关联顺序中的第二个表的相应列上创建索引</p></li><li><p>确保任何的 group by 和 order by 中的表达式只涉及到一个表中的列，这样mysql才有可能使用索引来优化这个过程</p></li><li><p>优化子查询：子查询的优化最重要的优化建议是尽可能使用关联查询代替</p></li><li><p>尽可能减少Join语句中NestedLoop的循环总次数，用小结果集驱动大结果集。</p></li><li><p>确保Join语句中被驱动表上的Join条件字段已经被索引。</p></li></ol><h4 id="优化limit分页"><a href="#优化limit分页" class="headerlink" title="优化limit分页"></a>优化limit分页</h4><blockquote><p>在很多应用场景中我们需要将数据进行分页，一般会使用limit加上偏移量的方法实现，同时加上合适的order by 的子句，如果这种方式有索引的帮助，效率通常不错，否则的化需要进行大量的文件排序操作，还有一种情况，当偏移量非常大的时候，前面的大部分数据都会被抛弃，这样的代价太高。</p></blockquote><p>要优化这种查询的话，要么是在页面中限制分页的数量，要么优化大偏移量的性能</p><p>优化此类查询的最简单的办法就是尽可能地使用覆盖索引，而不是查询所有的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看执行计划查看扫描的行数</span></span><br><span class="line"><span class="comment">-- 1000行</span></span><br><span class="line">explain <span class="keyword">select</span> film_id,description <span class="keyword">from</span> film <span class="keyword">order</span> <span class="keyword">by</span> title limit <span class="number">50</span>,<span class="number">5</span></span><br><span class="line"><span class="comment">-- 55+1+55 行</span></span><br><span class="line">explain <span class="keyword">select</span> film.film_id,film.description <span class="keyword">from</span> film <span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> film_id <span class="keyword">from</span> film <span class="keyword">order</span> <span class="keyword">by</span> title limit <span class="number">50</span>,<span class="number">5</span>) <span class="keyword">as</span> lim <span class="keyword">using</span>(film_id);</span><br></pre></td></tr></table></figure><h4 id="优化union查询"><a href="#优化union查询" class="headerlink" title="优化union查询"></a>优化union查询</h4><blockquote><p>mysql总是通过创建并填充临时表的方式来执行union查询，因此很多优化策略在union查询中都没法很好的使用。经常需要手工的将where、limit、order by等子句下推到各个子查询中，以便优化器可以充分利用这些条件进行优化</p></blockquote><p>除非确实需要服务器消除重复的行，否则一定要使用union all，因此没有all关键字，mysql会在查询的时候给临时表加上distinct的关键字，这个操作的代价很高</p><h4 id="推荐使用用户自定义变量"><a href="#推荐使用用户自定义变量" class="headerlink" title="推荐使用用户自定义变量"></a>推荐使用用户自定义变量</h4><p><strong>自定义变量的使用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@one</span> :<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@min</span>_actor :<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">min</span>(actor_id) <span class="keyword">from</span> actor)</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@last</span>_week :<span class="operator">=</span><span class="built_in">current_date</span><span class="operator">-</span><span class="type">interval</span> <span class="number">1</span> week;</span><br></pre></td></tr></table></figure><p><strong>自定义变量的限制</strong></p><ol><li>无法使用查询缓存</li><li>不能在使用常量或者标识符的地方使用自定义变量，例如表名、列名或者limit子句</li><li>用户自定义变量的生命周期是在一个连接中有效，所以不能用它们来做连接间的通信</li><li>不能显式地声明自定义变量地类型</li><li>mysql优化器在某些场景下可能会将这些变量优化掉，这可能导致代码不按预想地方式运行</li><li>赋值符号：&#x3D;的优先级非常低，所以在使用赋值表达式的时候应该明确的使用括号</li><li>使用未定义变量不会产生任何语法错误</li></ol><p><strong>自定义变量的使用案例</strong></p><p>优化排名语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在给一个变量赋值的同时使用这个变量</span></span><br><span class="line"><span class="keyword">select</span> actor_id,<span class="variable">@rownum</span>:<span class="operator">=</span><span class="variable">@rownum</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> rownum <span class="keyword">from</span> actor limit <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 查询获取演过最多电影的前10名演员，然后根据出演电影次数做一个排名</span></span><br><span class="line"><span class="keyword">select</span> actor_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt <span class="keyword">from</span> film_actor <span class="keyword">group</span> <span class="keyword">by</span> actor_id <span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span> limit <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 避免重新查询刚刚更新的数据</span></span><br><span class="line"><span class="comment">-- 当需要高效的更新一条记录的时间戳，同时希望查询当前记录中存放的时间戳是什么</span></span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span>  lastUpdated<span class="operator">=</span>now() <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> lastUpdated <span class="keyword">from</span> t1 <span class="keyword">where</span> id <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> lastupdated <span class="operator">=</span> now() <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="variable">@now</span>:<span class="operator">=</span>now();</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@now</span>;</span><br><span class="line"><span class="comment">-- 确定取值的顺序</span></span><br><span class="line"><span class="comment">-- 在赋值和读取变量的时候可能是在查询的不同阶段</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@rownum</span>:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> actor_id,<span class="variable">@rownum</span>:<span class="operator">=</span><span class="variable">@rownum</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> actor <span class="keyword">where</span> <span class="variable">@rownum</span><span class="operator">&lt;=</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 因为where和select在查询的不同阶段执行，所以看到查询到两条记录，这不符合预期</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@rownum</span>:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> actor_id,<span class="variable">@rownum</span>:<span class="operator">=</span><span class="variable">@rownum</span><span class="operator">+</span><span class="number">1</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> actor <span class="keyword">where</span> <span class="variable">@rownum</span><span class="operator">&lt;=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> first_name</span><br><span class="line"><span class="comment">-- 当引入了order by之后，发现打印出了全部结果，这是因为order by引入了文件排序，而where条件是在文件排序操作之前取值的  </span></span><br><span class="line"><span class="comment">-- 解决这个问题的关键在于让变量的赋值和取值发生在执行查询的同一阶段：</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@rownum</span>:<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> actor_id,<span class="variable">@rownum</span> <span class="keyword">as</span> cnt <span class="keyword">from</span> actor <span class="keyword">where</span> (<span class="variable">@rownum</span>:<span class="operator">=</span><span class="variable">@rownum</span><span class="operator">+</span><span class="number">1</span>)<span class="operator">&lt;=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql锁机制</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/4.%20Mysql%20%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/4.%20Mysql%20%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="锁概述"><a href="#锁概述" class="headerlink" title="锁概述"></a>锁概述</h2><p>Mysql有三种锁：表锁(偏读)、行锁(偏写)、页锁</p><h3 id="不同的存储引擎支持不同的锁机制"><a href="#不同的存储引擎支持不同的锁机制" class="headerlink" title="不同的存储引擎支持不同的锁机制"></a>不同的存储引擎支持不同的锁机制</h3><ul><li>MyISAM 和 MEMORY 存储引擎采用的是<strong>表级锁</strong></li><li>InnoDB 存储引擎既支持<strong>行级锁</strong>，也支持<strong>表级锁</strong>，默认情况下是采用<strong>行级锁</strong></li></ul><h3 id="锁的是索引"><a href="#锁的是索引" class="headerlink" title="锁的是索引"></a>锁的是索引</h3><ul><li><p>表级锁： 开销小，加锁快；不会出现死锁(因为 MyISAM 会一次性获得 SQL 所需的全部锁)。锁定粒度大，发生锁冲突的概率最高，并发度最低。 </p></li><li><p>行级锁： 开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。 </p></li><li><p>页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间， 并发度一般。</p></li></ul><h2 id="查看锁命令"><a href="#查看锁命令" class="headerlink" title="查看锁命令"></a>查看锁命令</h2><h3 id="查看锁"><a href="#查看锁" class="headerlink" title="查看锁"></a>查看锁</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables;</span><br></pre></td></tr></table></figure><p>In_use为0表示没有被锁<br><img src="https://img-blog.csdnimg.cn/20200201080542825.png" alt="在这里插入图片描述"></p><h3 id="分析表锁定"><a href="#分析表锁定" class="headerlink" title="分析表锁定"></a>分析表锁定</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;%table%&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Table_locks_immediate：产生表级锁定的次数（锁的查询次数）。</li><li>Table_locks_waited：出现表级锁定争用而发生等待的次数，此值高说明存在严重表级锁争用情况。</li></ul><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><h3 id="读锁（共享锁）"><a href="#读锁（共享锁）" class="headerlink" title="读锁（共享锁）"></a>读锁（共享锁）</h3><p>Session 1 为Table增加读锁之后：</p><ul><li>Session 1 只能读锁定表，不能读其他表，写锁定表报错。</li><li>Session 2 可以读任何表，写锁定表阻塞。</li></ul><h3 id="写锁（独占锁）"><a href="#写锁（独占锁）" class="headerlink" title="写锁（独占锁）"></a>写锁（独占锁）</h3><p>Session 1 为Table增加写锁之后：</p><ul><li>Session 1 可以做锁定表进行任何操作</li><li>Session 2 无法对锁定表进行任何操作</li></ul><h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><h3 id="开启事务即开启了行锁"><a href="#开启事务即开启了行锁" class="headerlink" title="开启事务即开启了行锁"></a>开启事务即开启了行锁</h3><p>提交事务之前，其它会话查询到的都是未提交的数据，如果更新了同一行，会被阻塞，直到这个事务被提交。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">update</span> dept <span class="keyword">set</span> dname <span class="operator">=</span> <span class="string">&#x27;开发部2&#x27;</span> <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>当查询deptno&#x3D;1的数据的时候，加<code>for update</code>语句，此时其它会话修改这条记录就会被阻塞。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">where</span> deptno <span class="operator">=</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>数据表中增加 <code>version</code> 字段</p><ul><li><p>每次更新时，都需要查询 <code>version</code> 的值，符合条件则更新</p></li><li><p>每次更新时，<code>version</code> 都在原基础上+1</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> version <span class="keyword">from</span> t_goods <span class="keyword">where</span> id <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">2</span>, version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span> <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125; <span class="keyword">and</span> version<span class="operator">=</span>#&#123;version&#125;;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql服务器参数</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/10.%20Mysql%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/10.%20Mysql%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="general"><a href="#general" class="headerlink" title="general"></a>general</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据文件存放的目录</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql.socket表示server和client在同一台服务器，并且使用localhost进行连接，就会使用socket进行连接</span></span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储mysql的pid</span></span><br><span class="line">pid_file=/var/lib/mysql/mysql.pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql服务的端口号</span></span><br><span class="line">port=3306</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql存储引擎</span></span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当忘记mysql的用户名密码的时候，可以在mysql配置文件中配置该参数，跳过权限表验证，不需要密码即可登录mysql</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><h2 id="character"><a href="#character" class="headerlink" title="character"></a>character</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端数据的字符集</span></span><br><span class="line">character_set_client</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql处理客户端发来的信息时，会把这些数据转换成连接的字符集格式</span></span><br><span class="line">character_set_connection</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql发送给客户端的结果集所用的字符集</span></span><br><span class="line">character_set_results</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库默认的字符集</span></span><br><span class="line">character_set_database</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql server的默认字符集</span></span><br><span class="line">character_set_server</span><br></pre></td></tr></table></figure><h2 id="connection"><a href="#connection" class="headerlink" title="connection"></a>connection</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql的最大连接数，如果数据库的并发连接请求比较大，应该调高该值</span></span><br><span class="line">max_connections</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制每个用户的连接个数</span></span><br><span class="line">max_user_connections</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql能够暂存的连接数量，当mysql的线程在一个很短时间内得到非常多的连接请求时，就会起作用，如果mysql的连接数量达到</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">max_connections时，新的请求会被存储在堆栈中，以等待某一个连接释放资源，如果等待连接的数量超过back_log,则不再接受连接资源</span></span><br><span class="line">back_log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql在关闭一个非交互的连接之前需要等待的时长</span></span><br><span class="line">wait_timeout</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭一个交互连接之前需要等待的秒数</span></span><br><span class="line">interactive_timeout</span><br></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定错误日志文件名称，用于记录当mysqld启动和停止时，以及服务器在运行中发生任何严重错误时的相关信息</span></span><br><span class="line">log_error</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定二进制日志文件名称，用于记录对数据造成更改的所有查询语句</span></span><br><span class="line">log_bin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定将更新记录到二进制日志的数据库，其他所有没有显式指定的数据库更新将忽略，不记录在日志中</span></span><br><span class="line">binlog_do_db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定不将更新记录到二进制日志的数据库</span></span><br><span class="line">binlog_ignore_db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定多少次写日志后同步磁盘</span></span><br><span class="line">sync_binlog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否开启查询日志记录</span></span><br><span class="line">general_log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定查询日志文件名，用于记录所有的查询语句</span></span><br><span class="line">general_log_file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否开启慢查询日志记录</span></span><br><span class="line">slow_query_log</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定慢查询日志文件名称，用于记录耗时比较长的查询语句</span></span><br><span class="line">slow_query_log_file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置慢查询的时间，超过这个时间的查询语句才会记录日志</span></span><br><span class="line">long_query_time</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否将管理语句写入慢查询日志</span></span><br><span class="line">log_slow_admin_statements</span><br></pre></td></tr></table></figure><h2 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">索引缓存区的大小（只对myisam表起作用）</span></span><br><span class="line">show variables like &#x27;%key_buffer_size%&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询缓存的大小（未来版本被删除）</span></span><br><span class="line">show variables like &#x27;%query_cache_size%&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看缓存的相关属性</span></span><br><span class="line">show status like &#x27;%Qcache%&#x27;;</span><br><span class="line">Qcache_free_blocks：# 缓存中相邻内存块的个数，如果值比较大，那么查询缓存中碎片比较多</span><br><span class="line">Qcache_free_memory：# 查询缓存中剩余的内存大小</span><br><span class="line">Qcache_hits：# 表示有多少此命中缓存</span><br><span class="line">Qcache_inserts：# 表示多少次未命中而插入</span><br><span class="line">Qcache_lowmen_prunes：# 多少条query因为内存不足而被移除cache</span><br><span class="line">Qcache_queries_in_cache：# 当前cache中缓存的query数量</span><br><span class="line">Qcache_total_blocks：# 当前cache中block的数量</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">超出此大小的查询将不被缓存</span></span><br><span class="line">show variables like &#x27;query_cache_limit&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存块最小大小</span>    </span><br><span class="line">show variables like &#x27;query_cache_min_res_unit&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">缓存类型，决定缓存什么样的查询</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0 表示禁用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1 表示将缓存所有结果，除非sql语句中使用sql_no_cache禁用查询缓存</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 表示只缓存select语句中通过sql_cache指定需要缓存的查询</span></span><br><span class="line">show variables like &#x27;query_cache_type&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每个需要排序的线程分派该大小的缓冲区</span></span><br><span class="line">show variables like &#x27;sort_buffer_size&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">限制server接受的数据包大小</span></span><br><span class="line">show variables like &#x27;max_allowed_packet&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示关联缓存的大小</span></span><br><span class="line">show variables like &#x27;join_buffer_size&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">线程池大小</span></span><br><span class="line">show variables like &#x27;thread_cache_size&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前线程池的状态</span></span><br><span class="line">show global status like &#x27;Thread%&#x27;;</span><br><span class="line">Threads_cached# 代表当前此时此刻线程缓存中有多少空闲线程</span><br><span class="line">Threads_connected# 代表当前已建立连接的数量</span><br><span class="line">Threads_created# 代表最近一次服务启动，已创建现成的数量，如果该值比较大，那么服务器会一直再创建线程</span><br><span class="line">Threads_running# 代表当前激活的线程数</span><br></pre></td></tr></table></figure><h2 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该参数指定大小的内存来缓冲数据和索引，最大可以设置为物理内存的80%</span></span><br><span class="line">show variables like &#x27;innodb_buffer_pool_size&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要控制innodb将<span class="built_in">log</span> buffer中的数据写入日志文件并flush磁盘的时间点，值分别为0，1，2</span></span><br><span class="line">show variables like &#x27;innodb_flush_log_at_trx_commit&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置innodb线程的并发数，默认为0表示不受限制，如果要设置建议跟服务器的cpu核心数一致或者是cpu核心数的两倍</span></span><br><span class="line">show variables like &#x27;innodb_thread_concurrency&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此参数确定日志文件所用的内存大小，以M为单位</span></span><br><span class="line">show variables like &#x27;innodb_log_buffer_size&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此参数确定数据日志文件的大小，以M为单位</span></span><br><span class="line">show variables like &#x27;innodb_log_file_size&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以循环方式将日志文件写到多个文件中</span></span><br><span class="line">show variables like &#x27;innodb_log_files_in_group&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql读入缓冲区大小，对表进行顺序扫描的请求将分配到一个读入缓冲区</span></span><br><span class="line">show variables like &#x27;read_buffer_size&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mysql随机读的缓冲区大小</span></span><br><span class="line">show variables like &#x27;read_rnd_buffer_size&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此参数确定为每张表分配一个新的文件</span></span><br><span class="line">show variables like &#x27;innodb_file_per_table&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/3.%20Mysql%20%E7%B4%A2%E5%BC%95/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/3.%20Mysql%20%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h2 id="索引概念"><a href="#索引概念" class="headerlink" title="索引概念"></a>索引概念</h2><p>索引是帮助Mysql高效获取数据的排好序的数据结构</p><p>索引会影响到 where 后面的查找和 order by 后面的排序</p><h3 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h3><ol><li>大大减少了服务器需要扫描的数据量</li><li>助服务器避免排序和临时表</li><li>将随机 IO 变成顺序 IO</li></ol><h3 id="索引的用处"><a href="#索引的用处" class="headerlink" title="索引的用处"></a>索引的用处</h3><ol><li>快速查找匹配 WHERE 子句的行</li><li>从consideration中消除行，如果可以在多个索引之间进行选择，mysql通常会使用找到最少行的索引</li><li>如果表具有多列索引，则优化器可以使用索引的任何最左前缀匹配来查找行</li><li>当有表连接的时候，从其他表检索行数据</li><li>查找特定索引列的min或max值</li><li>如果排序或分组时在可用索引的最左前缀上完成的，则对表进行排序和分组</li><li>在某些情况下，可以优化查询以检索值而无需查询数据行</li></ol><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ul><li><p>哪些字段适合创建索引</p><ul><li>字段的值有唯一性限制</li><li>经常作为 WHERE、GROUP BY、ORDER BY 的列</li><li>DISTINCT 字段</li><li>JOIN 连接的字段</li></ul></li><li><p>哪些字段不适合创建索引</p><ul><li>不作为 WHERE、GROUP BY、ORDER BY 的列</li><li>数据量小的表</li><li>有大量重复数据的列</li><li>需要经常更新的表</li><li>无序的值（例如UUID）</li></ul></li><li><p>创建索引字段可以优化的点</p><ul><li>索引的数据类型尽可能小</li><li>使用字符串前缀创建索引</li><li>散列性高的列适合作为索引：可以使用 <code>SELECT COUNT(DISTINCT a)/COUNT(*) FROM t1</code> 计算散列性，越接近1越好</li><li>使用最频繁的列放到联合索引的左侧</li><li>在多个字段都要创建索引的情况下，联合索引优于单值索引<ul><li>建议单表索引数量不超过6个</li><li>索引需要占用磁盘空间</li><li>索引会影响 INSERT、UPDATE、DELETE 的性能，因为表中数据更改时索引也会更新</li><li>优化器会对每一个可以用到的索引进行评估，以生成最好的执行计划，如果索引过多会增加Mysql优化器生成计划时间</li></ul></li></ul></li></ul><h3 id="索引和页的关系"><a href="#索引和页的关系" class="headerlink" title="索引和页的关系"></a>索引和页的关系</h3><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。这样的话，索引查找过程中就要产生磁盘IO消耗，相对于内存IO存取，磁盘IO存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘IO操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘IO的存取次数。</p><p>为了达到这个目的，磁盘按需读取，要求每次都会预读的长度一般为页（4K）的整数倍。而且数据库系统将一个节点的大小设为等于一个页，这样每个节点只需要一次IO就可以完全载入</p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><h3 id="按索引类型分类"><a href="#按索引类型分类" class="headerlink" title="按索引类型分类"></a>按索引类型分类</h3><h4 id="NormalIndex"><a href="#NormalIndex" class="headerlink" title="NormalIndex"></a>NormalIndex</h4><p>是最基本的索引，索引值可能出现多次</p><h4 id="PrimaryIndex"><a href="#PrimaryIndex" class="headerlink" title="PrimaryIndex"></a>PrimaryIndex</h4><p>是一种特殊的唯一索引，一个表只能有一个主键，且不能为NULL</p><h4 id="UniqueIndex"><a href="#UniqueIndex" class="headerlink" title="UniqueIndex"></a>UniqueIndex</h4><p>索引列的值必须唯一，但允许为NULL</p><h4 id="FullText-Index"><a href="#FullText-Index" class="headerlink" title="FullText Index"></a>FullText Index</h4><p>主要用来查找文本中的关键字，而不是直接与索引中的值相比较，只有char，varchar，text 列上可以创建全文索引</p><p>FullText索引一般使用倒排索引实现，倒排索引同B+树一样，也是一种索引结构。</p><p>Mysql在5.6.4版本之后InnoDB才支持全文检索，在此之前只有MySIAM引擎支持。</p><p>对于文本类型的大对象，或者较大的Char类型数据，如果使用普通索引去匹配文本中间的几个单词，就需要使用 <code>LIKE %Word%</code>  来匹配，这样需要很长的时间来处理。这种情况下可以使用FullText索引，在生成FullText索引时，会为文本生成一份单词清单，在索引时根据这个单词清单来索引。</p><p><strong>FullText查询语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tableName <span class="keyword">MATCH</span>(ft_index) AGAINST (<span class="string">&#x27;查询字符串&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="按索引方法分类"><a href="#按索引方法分类" class="headerlink" title="按索引方法分类"></a>按索引方法分类</h3><h4 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B+Tree索引"></a>B+Tree索引</h4><blockquote><p>索引和数据分开存储，让更多的索引存储在内存中</p></blockquote><ul><li>非叶子节点不存储data，值存储索引（冗余），可以放更多的索引。</li><li>叶子节点包含所有索引字段。</li><li>叶子节点用指针连接，提高访问的性能。</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020710474436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h4><blockquote><p>在mysql中，只有memory的存储引擎显式支持哈希索引</p></blockquote><p>基于哈希表的实现，只有精确匹配索引所有列的查询才有效</p><p>哈希索引自身只需存储对应的hash值，所以索引的结构十分紧凑，这让哈希索引查找的速度非常快</p><p><strong>哈希索引的限制</strong></p><ol><li>哈希索引只包含哈希值和行指针，而不存储字段值，索引不能使用索引中的值来避免读取行</li><li>哈希索引数据并不是按照索引值顺序存储的，所以无法进行排序</li><li>哈希索引不支持部分列匹配查找，哈希索引是使用索引列的全部内容来计算哈希值</li><li>哈希索引支持等值比较查询，也不支持任何范围查询</li><li>访问哈希索引的数据非常快，除非有很多哈希冲突，当出现哈希冲突的时候，存储引擎必须遍历链表中的所有行指针，逐行进行比较，直到找到所有符合条件的行</li><li>哈希冲突比较多的话，维护的代价也会很高</li><li>仅能满足<code>=</code> 和 <code>IN</code> ，不支持范围查询</li></ol><p><strong>案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当需要存储大量的URL，并且根据URL进行搜索查找，如果使用B+树，存储的内容就会很大</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> url <span class="keyword">where</span> url<span class="operator">=</span>&quot;&quot;</span><br><span class="line"><span class="comment">-- 也可以利用将url使用CRC32做哈希，可以使用以下查询方式：</span></span><br><span class="line"><span class="keyword">select</span> id fom url <span class="keyword">where</span> url<span class="operator">=</span>&quot;&quot; <span class="keyword">and</span> url_crc<span class="operator">=</span>CRC32(&quot;&quot;)</span><br><span class="line"><span class="comment">-- 此查询性能较高原因是使用体积很小的索引来完成查找</span></span><br></pre></td></tr></table></figure><h3 id="按字段个数分类"><a href="#按字段个数分类" class="headerlink" title="按字段个数分类"></a>按字段个数分类</h3><h4 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h4><p>索引个数有且仅有1个</p><h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><p>索引个数有多个</p><h3 id="按物理存储分类"><a href="#按物理存储分类" class="headerlink" title="按物理存储分类"></a>按物理存储分类</h3><h4 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h4><p>索引和数据存储在一个文件，如InnoDB的主键索引。</p><p>优点</p><ol><li><p>数据访问更快，因为索引和数据保存在同一个树中</p></li><li><p>使用覆盖索引扫描的查询可以直接使用页节点中的主键值</p></li></ol><p>缺点</p><ol><li>聚簇数据最大限度地提高了IO密集型应用的性能，如果数据全部在内存，那么聚簇索引就没有什么优势</li><li>插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式</li><li>更新聚簇索引列的代价很高，因为会强制将每个被更新的行移动到新的位置</li><li>基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临页分裂的问题<ol><li>页分裂：新数据要插入索引块，如果索引块空间不足，就会把原来的块等分为两份。</li><li>页合并：删除数据维护索引时，再把两个索引块合并成一个。</li></ol></li><li>聚簇索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候</li></ol><h4 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h4><p>索引和数据存储在不同文件，如MyISAM的主键索引。</p><h2 id="索引语法和匹配方式"><a href="#索引语法和匹配方式" class="headerlink" title="索引语法和匹配方式"></a>索引语法和匹配方式</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> tb_name(column_name);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> INDEX idx_name(column_name);</span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_name <span class="keyword">ON</span> tb_name;</span><br><span class="line"><span class="comment">-- 查看索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> tb_name;</span><br></pre></td></tr></table></figure><h3 id="索引匹配方式"><a href="#索引匹配方式" class="headerlink" title="索引匹配方式"></a>索引匹配方式</h3><p>当包含多个列作为索引，需要注意的是正确的顺序依赖于该索引的查询，同时需要考虑如何更好的满足排序和分组的需要</p><p>案例，建立组合索引a,b,c，不同SQL语句使用索引情况</p><table><thead><tr><th>语句</th><th>索引是否发挥作用</th></tr></thead><tbody><tr><td>where a &#x3D; 3</td><td>是，使用了 a</td></tr><tr><td>where a&#x3D; 3 and b &#x3D; 4</td><td>是，使用了 a, b</td></tr><tr><td>where a &#x3D; 3 and b &#x3D; 4 and c &#x3D;5</td><td>是，使用了 a, b, c</td></tr><tr><td>where b &#x3D; 3 or c &#x3D; 4</td><td>否，因为跳过了a</td></tr><tr><td>where a &#x3D; 3 and c &#x3D; 4</td><td>是，使用了 a</td></tr><tr><td>where a &#x3D; 3 and b &gt; 10 and c &#x3D; 7</td><td>是，使用了 a, b，因为b是范围查找</td></tr><tr><td>where a &#x3D; 3 and b like ‘%xx%’ and c &#x3D; 7</td><td>是，使用了 a</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> staffs(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">24</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    pos <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    add_time <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">  ) charset utf8 comment <span class="string">&#x27;员工记录表&#x27;</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> staffs <span class="keyword">add</span> index idx_nap(name, age, pos);</span><br></pre></td></tr></table></figure><p>全值匹配：全值匹配指的是和索引中的所有列进行匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name = &#x27;July&#x27; and age = &#x27;23&#x27; and pos = &#x27;dev&#x27;;</span><br></pre></td></tr></table></figure><p>匹配最左前缀：只匹配前面的几列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name = &#x27;July&#x27; and age = &#x27;23&#x27;;</span><br><span class="line">explain select * from staffs where name = &#x27;July&#x27;;</span><br></pre></td></tr></table></figure><p>匹配列前缀：可以匹配某一列的值的开头部分，<strong>不要让%放到前面，会让索引失效</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name like &#x27;J%&#x27;;</span><br><span class="line">explain select * from staffs where name like &#x27;%y&#x27;;</span><br></pre></td></tr></table></figure><p>匹配范围值：可以查找某一个范围的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name &gt; &#x27;Mary&#x27;;</span><br></pre></td></tr></table></figure><p>精确匹配某一列并范围匹配另外一列：可以查询第一列的全部和第二列的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from staffs where name = &#x27;July&#x27; and age &gt; 25;</span><br></pre></td></tr></table></figure><p>只访问索引的查询：查询的时候只需要访问索引，不需要访问数据行，本质上就是覆盖索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select name,age,pos from staffs where name = &#x27;July&#x27; and age = 25 and pos = &#x27;dev&#x27;;</span><br></pre></td></tr></table></figure><h2 id="索引名词"><a href="#索引名词" class="headerlink" title="索引名词"></a>索引名词</h2><h3 id="回表"><a href="#回表" class="headerlink" title="回表"></a>回表</h3><p>普通列创建索引，普通列索引的叶子节点存放的是主键，所以按普通列查找的时候先根据普通列的 B+ 树找到主键再根据主键的 B+ 树找到整行数据</p><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>查询的列是索引列，不用回表查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name建了索引，id是主键索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 产生回表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> ?;</span><br><span class="line"><span class="comment">-- 覆盖索引</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><h3 id="最左匹配"><a href="#最左匹配" class="headerlink" title="最左匹配"></a>最左匹配</h3><p>会按照组合索引的顺序匹配索引</p><p><img src="https://img-blog.csdnimg.cn/c62b0b14ab33486ba3b6da04f9ee1fcb.png" alt="在这里插入图片描述"></p><p>联合索引会根据索引的先后顺序排序，所以如果直接使用第二列索引是不生效的。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>索引下推（Index Condition Pushdown, ICP）是MySQL5.6版本的新特性，它能减少回表查询次数，提高查询效率。</p><h4 id="索引下推原理"><a href="#索引下推原理" class="headerlink" title="索引下推原理"></a>索引下推原理</h4><p>Mysql大致的架构如下</p><p><img src="https://pics6.baidu.com/feed/ca1349540923dd549d05c006c606ddd79c824806.jpeg?token=01596f2960d9cdddca7f1c7383dad681" alt="img"></p><p>索引下推的<strong>下推</strong>其实就是指将部分上层（服务层）负责的事情，交给了下层（引擎层）去处理。</p><p>我们来具体看一下，在没有使用ICP的情况下，MySQL的查询：</p><ul><li>存储引擎读取索引记录</li><li>根据索引中的主键值，定位并读取完整的行记录</li><li>存储引擎把记录交给<code>Server</code>层去检测该记录是否满足<code>WHERE</code>条件</li></ul><p>使用ICP的情况下，查询过程：</p><ul><li>存储引擎读取索引记录（不是完整的行记录）</li><li>判断条件部分能否用索引中的列来做检查，条件不满足，则处理下一行索引记录</li><li>条件满足，使用索引中的主键去定位并读取完整的行记录（就是所谓的回表）</li><li>存储引擎把记录交给引擎层，引擎层检测该记录是否满足条件的其余部分</li></ul><h4 id="索引下推具体实践"><a href="#索引下推具体实践" class="headerlink" title="索引下推具体实践"></a>索引下推具体实践</h4><p>理论比较抽象，我们来上一个实践。</p><p>使用一张用户表<code>tuser</code>，表里创建联合索引（name, age）。</p><p><img src="https://pics0.baidu.com/feed/b21c8701a18b87d63beae2f7080746311e30fd42.jpeg?token=7dd4ac72ff0ce5937ce6ce64350cd44b" alt="img"></p><p>如果现在有一个需求：检索出表中<code>名字第一个字是张，而且年龄是10岁的所有用户</code>。那么，SQL语句是这么写的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tuser <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张%&#x27;</span> <span class="keyword">and</span> age<span class="operator">=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>根据最左匹配原则，这个语句在搜索索引树的时候，只能用 <code>张</code>，找到的第一个满足条件的记录id为1。</p><p><img src="https://pics6.baidu.com/feed/77c6a7efce1b9d16682ad2b8fdd1da868d546416.jpeg?token=584a46ac00ecfe13da7626357ef317bc" alt="img"></p><p>那接下来的步骤是什么呢？</p><p><strong>没有使用ICP</strong></p><p>在MySQL 5.6之前，存储引擎根据通过联合索引找到<code>name likelike &#39;张%&#39;</code> 的主键id（1、4），逐一进行回表扫描，去聚簇索引找到完整的行记录，server层再对数据根据<code>age=10进行筛选</code>。</p><p>我们看一下示意图：</p><p><img src="https://pics5.baidu.com/feed/b151f8198618367a7d07a2dd3e7ce5ddb31ce539.jpeg?token=28b954d84c29cab120da924853b4af64" alt="img"></p><p>可以看到需要回表两次，把我们联合索引的另一个字段<code>age</code>浪费了。</p><p><strong>使用ICP</strong></p><p>而MySQL 5.6 以后， 存储引擎根据（name，age）联合索引，找到，由于联合索引中包含列，所以存储引擎直接再联合索引里按照<code>age=10</code>过滤。按照过滤后的数据再一一进行回表扫描。</p><p>我们看一下示意图：</p><p><img src="https://pics5.baidu.com/feed/472309f79052982248438993c6c515c20a46d402.jpeg?token=2b6e49951f7cc5e810dc350d609ec496" alt="img"></p><p>可以看到只回表了一次。</p><p>除此之外我们还可以看一下执行计划，看到<code>Extra</code>一列里 <code>Using index condition</code>，这就是用到了索引下推。</p><h2 id="创建索引情景"><a href="#创建索引情景" class="headerlink" title="创建索引情景"></a>创建索引情景</h2><h3 id="需要建立索引"><a href="#需要建立索引" class="headerlink" title="需要建立索引"></a>需要建立索引</h3><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其它表关联的字段，外键关系建立索引</li><li>在高并发下倾向创建复合索引</li><li>排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计或分组字段需要建索引</li></ol><h3 id="不需创建索引"><a href="#不需创建索引" class="headerlink" title="不需创建索引"></a>不需创建索引</h3><ol><li>表记录太少</li><li>经常增删改的字段</li><li>数据重复且平均分布的表字段</li></ol><p>原因</p><ol><li><p>更新会变更 B+ 树，更新频繁的字段建立索引会大大降低数据库性能</p></li><li><p>区分不大的属性，建立索引是没有意义的，不能有效的过滤数据</p></li><li><p>一般区分度在80%以上的时候就可以建立索引，计算区分度 <code>count(distinct(列名))/count(*) </code></p></li><li><p>创建索引的列，不允许为null，可能会得到不符合预期的结果</p></li></ol><h2 id="Mysql为什么不使用B树而使用B-树"><a href="#Mysql为什么不使用B树而使用B-树" class="headerlink" title="Mysql为什么不使用B树而使用B+树"></a>Mysql为什么不使用B树而使用B+树</h2><p>计算机在读写文件时会以页为单位将数据加载到内存中，在大多数的操作系统中，页的大小都是 <code>4KB</code>。</p><p>当我们需要在数据库中查询数据时，CPU 会发现当前数据位于磁盘而不是内存中，这时就会触发 I&#x2F;O 操作将数据加载到内存中进行访问。</p><p>随机I&#x2F;O和和顺序I&#x2F;O的速度相差几个数量级，因此我们应该减少随机I&#x2F;O的次数。</p><p>假设我们要查询「大于4，并且小于9的数据」</p><p><img src="https://img.draveness.me/b-tree.png" alt="b-tree"></p><p>如果不考虑任何优化，在上面简单的B树中我们需要进行4次随机I&#x2F;O才能找到所有满足条件的数据行。</p><ol><li>加载根节点所在的页，发现根节点的第一个元素是 6，大于 4；</li><li>通过根节点的指针加载左子节点所在的页，遍历页面中的数据，找到 5；</li><li>重新加载根节点所在的页，发现根节点不包含第二个元素；</li><li>通过根节点的指针加载右子节点所在的页，遍历页面中的数据，找到 7 和 8；</li></ol><p>而B+树的所有的数据都存在叶子节点，而这些叶节点可以通过指针依次按顺序连接，当我们用B+树遍历数据时可以直接在多个节点之间跳转，这样能够节省大量的磁盘I&#x2F;O的时间</p><p><img src="https://img.draveness.me/mysql-innodb-b-plus-tree.png" alt="mysql-innodb-b-plus-tree"></p><h2 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h2><p><img src="https://img-blog.csdnimg.cn/20210122232753310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>MyISAM：一张表有3个文件 – frm, MYD, MYI</li></ol><p>执行一条查询SQL流程：首先判断条件是否带有索引，如果带有索引，那么先去MYI文件中找到这个索引所代表的数据的地址，再根据这个地址去MYD中查询相应的数据。</p><ol start="2"><li>InnoDB：一张表有2个文件 – frm, ibd</li></ol><p>执行一条查询SQL流程：首先判断条件是否带有索引，如果带有索引，可以直接到ibd文件中查询到相应数据。</p><ol start="3"><li>memory：基于内存的存储引擎</li></ol><table><thead><tr><th>文件类型</th><th>描述</th></tr></thead><tbody><tr><td>frm</td><td>存储表结构</td></tr><tr><td>MYD</td><td>存储数据</td></tr><tr><td>MYI</td><td>存储索引</td></tr><tr><td>ibd</td><td>存储索引和数据</td></tr></tbody></table><h2 id="索引监控"><a href="#索引监控" class="headerlink" title="索引监控"></a>索引监控</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;Handler_read%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>参数解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Handler_read_first：读取索引第一个条目的次数</span><br><span class="line">Handler_read_key：通过index获取数据的次数</span><br><span class="line">Handler_read_last：读取索引最后一个条目的次数</span><br><span class="line">Handler_read_next：通过索引读取下一条数据的次数</span><br><span class="line">Handler_read_prev：通过索引读取上一条数据的次数</span><br><span class="line">Handler_read_rnd：从固定位置读取数据的次数</span><br><span class="line">Handler_read_rnd_next：从数据节点读取下一条数据的次数</span><br></pre></td></tr></table></figure><h2 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h2><ol><li>最佳左前缀法则：如果索引了多列，查询从索引的最左前列开始并不跳过索引中的列。</li><li>在索引上做任何操作（计算、函数、类型转换），会导致索引失效转向全表扫描</li><li>使用 !&#x3D; 或 not  的时候使用索引会导致全表扫描</li><li>在索引列上使用 IS NULL 或 IS NOT NULL操作，因为索引不索引空值</li><li>like 以%开头，索引无效；当like前缀没有%，后缀有%时，索引有效。</li><li>强制类型转换会导致索引失效</li><li>or语句前后没有同时使用索引，索引失效，只有当or左右查询字段均为索引时，才会生效</li><li>当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20Mysql%20%E5%9F%BA%E7%A1%80/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/1.%20Mysql%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="官方案例库"><a href="#官方案例库" class="headerlink" title="官方案例库"></a>官方案例库</h2><p>导入mysql官方案例数据库 <a href="https://dev.mysql.com/doc/index-other.html">https://dev.mysql.com/doc/index-other.html</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash"><span class="built_in">source</span> /sakila-db/sakila-schema.sql</span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash"><span class="built_in">source</span> /sakila-db/sakila-data.sql</span></span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 去重查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> country_id <span class="keyword">from</span> city;</span><br><span class="line"><span class="comment">-- 分页查询: 从第10条记录开始查询5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city limit <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 查询前5条记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city limit <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 筛选分组后的各组数据 having</span></span><br><span class="line"><span class="keyword">select</span> customer_id, <span class="built_in">sum</span>(amount) <span class="keyword">from</span> payment <span class="keyword">group</span> <span class="keyword">by</span> customer_id <span class="keyword">having</span> <span class="built_in">sum</span>(amount) <span class="operator">&gt;</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="Join-查询"><a href="#Join-查询" class="headerlink" title="Join 查询"></a>Join 查询</h3><h4 id="1-笛卡尔积-没有加筛选条件的内连接"><a href="#1-笛卡尔积-没有加筛选条件的内连接" class="headerlink" title="1. 笛卡尔积(没有加筛选条件的内连接)"></a>1. 笛卡尔积(没有加筛选条件的内连接)</h4><p>两表关联，把左表的列和右表的列通过笛卡尔积的形式表达出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 三种写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">join</span> t2;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1, t2;</span><br></pre></td></tr></table></figure><h4 id="2-左连接"><a href="#2-左连接" class="headerlink" title="2. 左连接"></a>2. 左连接</h4><p>两表关联，左表全部保留，右表关联不上用null表示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure><h4 id="3-右连接"><a href="#3-右连接" class="headerlink" title="3. 右连接"></a>3. 右连接</h4><p>两表关联，右表全部保留，左表关联不上的用null表示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">right</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span>t2.id;</span><br></pre></td></tr></table></figure><h4 id="4-内连接"><a href="#4-内连接" class="headerlink" title="4. 内连接"></a>4. 内连接</h4><p>两表关联，保留两表中交集的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure><h4 id="5-左表独有"><a href="#5-左表独有" class="headerlink" title="5. 左表独有"></a>5. 左表独有</h4><p>两表关联，查询左表独有的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> t2.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="6-右表独有"><a href="#6-右表独有" class="headerlink" title="6. 右表独有"></a>6. 右表独有</h4><p>两表关联，查询右表独有的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">right</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> t1.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h4 id="7-全连接"><a href="#7-全连接" class="headerlink" title="7. 全连接"></a>7. 全连接</h4><p>两表关联，查询它们的所有记录</p><p>oracle里面有full join，但是在mysql中没有full join，我们可以使用union来达到目的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">right</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id;</span><br></pre></td></tr></table></figure><h4 id="8-并集去交集"><a href="#8-并集去交集" class="headerlink" title="8. 并集去交集"></a>8. 并集去交集</h4><p>两表关联，取并集然后去交集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> t2.id <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">right</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id <span class="keyword">where</span> t1.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="Union-查询"><a href="#Union-查询" class="headerlink" title="Union 查询"></a>Union 查询</h3><h4 id="1-union"><a href="#1-union" class="headerlink" title="1. union"></a>1. union</h4><p>去重合并结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure><h4 id="2-union-all"><a href="#2-union-all" class="headerlink" title="2. union all"></a>2. union all</h4><p>不去重合并结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> t1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">SELECT</span> columns <span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure><h2 id="DDL（建库建表）"><a href="#DDL（建库建表）" class="headerlink" title="DDL（建库建表）"></a>DDL（建库建表）</h2><h3 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 若库不存在创建一个名为demo的库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> demo</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更改库的字符集为utf-8</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE demo <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf<span class="number">-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 库的删除</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> demo</span><br></pre></td></tr></table></figure><h3 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：创建表book</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> book(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">bname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span>,</span><br><span class="line">author <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">publicDate DATETIME,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表的修改</span></span><br><span class="line"><span class="comment">-- ALTER TABLE 表名 ADD|DROP|MODIFY|CHANGE COLUMN 列名 [列类型 约束]</span></span><br><span class="line"><span class="comment">-- 修改列名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> item CHANGE <span class="keyword">COLUMN</span> publishDate pubDate DATETIME</span><br><span class="line"><span class="comment">-- 修改列的类型或约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> item MODIFY <span class="keyword">COLUMN</span> pubDate <span class="type">TIMESTAMP</span></span><br><span class="line"><span class="comment">-- 添加新列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> item <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> annual <span class="keyword">DOUBLE</span>;</span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> item <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> annual;</span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> item RENAME <span class="keyword">TO</span> items</span><br><span class="line"><span class="comment">-- 表的删除</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> item</span><br><span class="line"><span class="comment">-- 查看当前库的所有表</span></span><br><span class="line"><span class="keyword">SHOW</span> TABLES</span><br><span class="line"><span class="comment">-- 查看表的信息</span></span><br><span class="line"><span class="keyword">DESC</span> book</span><br></pre></td></tr></table></figure><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>复制表中的数据到新表中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_back <span class="keyword">like</span> city;</span><br><span class="line"><span class="comment">-- 复制表的结构和数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_back <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city;</span><br><span class="line"><span class="comment">-- 将旧表的数据插入到新表中</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_back <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> city;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES</span><br><span class="line"><span class="comment">-- 查看所有全局变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES</span><br><span class="line"><span class="comment">-- 查看所有会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> SESSION VARIABLES</span><br><span class="line"><span class="comment">-- 查看某个系统变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @@系统变量名</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.autocommit <span class="comment">-- 举例</span></span><br><span class="line"><span class="comment">-- 为某个系统变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> 系统变量名 <span class="operator">=</span> 值</span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><table><thead><tr><th>变量</th><th>作用域</th><th>定义和使用的位置</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话中的任何地方</td></tr><tr><td>局部变量</td><td>BEGIN END</td><td>只能在BEGIN END中，且为第一句话</td></tr></tbody></table><p>用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明并初始化 三种写法</span></span><br><span class="line"><span class="keyword">SET</span> @用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值（更新用户变量的值）</span></span><br><span class="line"><span class="keyword">SET</span> @用户变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> @变量名 <span class="keyword">FROM</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看用户变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名;</span><br></pre></td></tr></table></figure><p>局部变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明</span></span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型;</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 <span class="keyword">DEFAULT</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">SET</span> 局部变量名<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SET</span> 局部变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> @局部变量名:<span class="operator">=</span>值;</span><br><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 局部变量名 <span class="keyword">FROM</span> 表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">SELECT</span> 局部变量名</span><br></pre></td></tr></table></figure><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="IF函数"><a href="#IF函数" class="headerlink" title="IF函数"></a>IF函数</h3><p>语法：IF(表达式1，表达式2，表达式3)</p><p>解释：如果表达式1成立，则返回表达式2，否则返回表达式3</p><h3 id="CASE-结构"><a href="#CASE-结构" class="headerlink" title="CASE 结构"></a>CASE 结构</h3><p>特点：可以作为表达式，嵌套在其它语句中使用，也可以作为独立的语句使用</p><p>类似switch case语句，一般用于实现等值判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> 变量<span class="operator">|</span>表达式<span class="operator">|</span>字段</span><br><span class="line"><span class="keyword">WHEN</span> 要判断的值 <span class="keyword">THEN</span> 返回值<span class="number">1</span>或语句<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 要判断的值 <span class="keyword">THEN</span> 返回值<span class="number">2</span>或语句<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 返回值n或语句n</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>类型多重if语句，一般用于实现区间判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> 要判断的条件<span class="number">1</span> <span class="keyword">THEN</span> 返回值<span class="number">1</span>或语句<span class="number">1</span></span><br><span class="line"><span class="keyword">WHEN</span> 要判断的条件<span class="number">2</span> <span class="keyword">THEN</span> 返回值<span class="number">2</span>或语句<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 返回值n或语句n</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="IF结构"><a href="#IF结构" class="headerlink" title="IF结构"></a>IF结构</h3><p>应用在BEGIN END中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF 条件<span class="number">1</span> <span class="keyword">THEN</span> 语句<span class="number">1</span>;</span><br><span class="line">ELSEIF 条件<span class="number">2</span> <span class="keyword">THEN</span> 语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">ELSE</span> 语句n;</span><br><span class="line"><span class="keyword">END</span> IF</span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>分类：while、loop、repeat</p><p>循环控制：</p><ul><li>iterate 类似于 continue，结束本次循环，继续下一次</li><li>leave 类似于 break，结束当前所在循环</li></ul><p><strong>while语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE [<span class="keyword">Condition</span>] DO </span><br><span class="line"><span class="comment">-- do sth.</span></span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br></pre></td></tr></table></figure><p><strong>loop语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以用来模拟简单的死循环</span></span><br><span class="line">LOOP</span><br><span class="line"><span class="comment">-- do sth.</span></span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br></pre></td></tr></table></figure><p><strong>repeat语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line"><span class="comment">-- do sth.</span></span><br><span class="line">UNTIL [<span class="keyword">Condition</span>]</span><br><span class="line"><span class="keyword">END</span> REPEAT</span><br></pre></td></tr></table></figure><p><strong>循环定义名称</strong></p><p>可以为循环定义名称，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[name]:WHILE [<span class="keyword">Condition</span>] DO </span><br><span class="line"><span class="comment">-- do sth.</span></span><br><span class="line"><span class="keyword">END</span> WHILE [name];</span><br></pre></td></tr></table></figure><p><strong>while案例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向admin表批量插入count条记录</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_test(<span class="keyword">IN</span> count <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">WHILE i <span class="operator">&lt;=</span> count DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> admin (username, passowrd) <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;Jack&#x27;</span>, i), <span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>参数列表 包含两部分：参数名、参数类型</p><p>函数体肯定会有RETURN语句，否则会报错</p><p>使用 DELIMITER 设置结束标记</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="comment">-- 创建函数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数列表) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体 </span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用语法</span></span><br><span class="line"><span class="keyword">SELECT</span> 函数名(参数列表)$</span><br></pre></td></tr></table></figure><p>无参有返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="comment">-- 返回公司员工的个数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun_test() <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> c <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> c</span><br><span class="line"><span class="keyword">FROM</span> tb_employee;</span><br><span class="line"><span class="keyword">RETURN</span> c;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">SELECT</span> fun_test()$</span><br></pre></td></tr></table></figure><p>有参有返回</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="comment">-- 根据员工名，返回他的工资</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun_test(empName <span class="type">VARCHAR</span>(<span class="number">20</span>)) <span class="keyword">RETURNS</span> <span class="keyword">DOUBLE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@sal</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 可使用局部变量和用户变量，这里使用用户变量</span></span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">INTO</span> <span class="variable">@sal</span><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">FROM</span> tb_employee</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="operator">=</span> empName;</span><br><span class="line"><span class="keyword">RETURN</span> <span class="variable">@sal</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="keyword">SELECT</span> fun_test(<span class="string">&#x27;张三&#x27;</span>)$</span><br></pre></td></tr></table></figure><p>查看和删除函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看函数</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> fun_test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除函数</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> fun_test;</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>创建语法 参数列表有3部分：参数模式、参数名、参数类型</p><p>参数举例： IN stuname VARCHAR(20)</p><p>参数模式：</p><ul><li>IN 该参数可以作为输入，即需要调用方传过来值</li><li>OUT 该参数可以作为输出，即可作为返回值</li><li>INOUT 该参数既可以作为输入也可以作为输出</li></ul><p>如果存储过程体只有一句话，BEGIN END可以省略</p><p>存储过程体中每条SQL语句的结尾必须加分号</p><p>需要修改分隔符否则mysql遇到分号就退出了<code>DELIMITER $</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建语法</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用语法</span></span><br><span class="line"><span class="keyword">CALL</span> 存储过程名(参数列表);</span><br></pre></td></tr></table></figure><p>案例（带IN模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 账号密码相等返回成功，否则返回失败</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_test(<span class="keyword">IN</span> username <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">IN</span> password <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">result</span> <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; # 声明并初始化</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">INTO</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">FROM</span> admin</span><br><span class="line"><span class="keyword">WHERE</span> admin.username <span class="operator">=</span> username</span><br><span class="line"><span class="keyword">AND</span> admin.password <span class="operator">=</span> password;</span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="keyword">result</span><span class="operator">&gt;</span><span class="number">0</span>,<span class="string">&#x27;成功&#x27;</span>,<span class="string">&#x27;失败&#x27;</span>);# 使用变量</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> proc_test(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><p>案例（带OUT模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据女生名称查询出对应的男生名称</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_test(<span class="keyword">IN</span> girl <span class="type">VARCHAR</span>(<span class="number">20</span>), <span class="keyword">OUT</span> boy <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SELECT</span> bo.boyname <span class="keyword">INTO</span> boy</span><br><span class="line"><span class="keyword">FROM</span> boys a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> girls b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.boyid</span><br><span class="line"><span class="keyword">WHERE</span> b.name <span class="operator">=</span> girl;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> proc_test(<span class="string">&#x27;小昭&#x27;</span>, <span class="variable">@bname</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@bname</span>;</span><br></pre></td></tr></table></figure><p>案例（带INOUT模式的存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 传入a，b两个值，最终a，b都将翻倍并返回</span></span><br><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_test(<span class="keyword">INOUT</span> a <span class="type">INT</span>, <span class="keyword">INOUT</span> b <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> a <span class="operator">=</span> a <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> b <span class="operator">=</span> b <span class="operator">*</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程，必须先定义用户变量</span></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">CALL</span> proc_test(<span class="variable">@a</span>, <span class="variable">@b</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@a</span>, <span class="variable">@b</span>;</span><br></pre></td></tr></table></figure><p>查看和删除存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看存储过程信息</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc_test</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> proc_test</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="六大约束"><a href="#六大约束" class="headerlink" title="六大约束"></a>六大约束</h3><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空</td></tr><tr><td>DEFAULT</td><td>非有默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键，唯一非空</td></tr><tr><td>UNIQUE</td><td>唯一可空</td></tr><tr><td>CHECK</td><td>检查（ Mysql中无效）</td></tr><tr><td>FOREIGN KEY</td><td>外键，限制两表关系</td></tr></tbody></table><p>约束添加的分类</p><ol><li>列级约束：除了外键约束，其它都支持</li><li>表级约束：除了非空、默认，其它都支持</li></ol><h3 id="创建表时添加约束"><a href="#创建表时添加约束" class="headerlink" title="创建表时添加约束"></a>创建表时添加约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_stu(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">stuName <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">gender <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">CHECK</span>(gender<span class="operator">=</span><span class="string">&#x27;男&#x27;</span> <span class="keyword">OR</span> gender<span class="operator">=</span><span class="string">&#x27;女&#x27;</span>),</span><br><span class="line">seat <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">marjorId <span class="type">INT</span>,</span><br><span class="line"></span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stu_major <span class="keyword">FOREIGN</span> KEY(majorId) <span class="keyword">REFERENCES</span> major(id) # 创建外键</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_major(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">majorName <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> tb_stu</span><br></pre></td></tr></table></figure><h2 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DISTINCT &amp; GROUP BY</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 得到去重后的uid</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> uid <span class="keyword">from</span> user_info;</span><br><span class="line"><span class="keyword">SELECT</span> uid <span class="keyword">from</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid;</span><br><span class="line"><span class="comment">-- 得到去重后的uid,uname</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> uid, uname <span class="keyword">from</span> user_info;</span><br><span class="line"><span class="keyword">SELECT</span> uid, uname <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid, uname;</span><br><span class="line"><span class="comment">-- 如果要聚合查询，只能使用GROUP BY</span></span><br><span class="line"><span class="keyword">SELECT</span> uid, <span class="built_in">SUM</span>(score) <span class="keyword">from</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- HAVING: 与GROUP BY组合使用，如SUM之后需要筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> uid, <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> s <span class="keyword">from</span> user_info <span class="keyword">GROUP</span> <span class="keyword">BY</span> uid <span class="keyword">HAVING</span> s <span class="operator">&gt;</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="备份数据-1"><a href="#备份数据-1" class="headerlink" title="备份数据"></a>备份数据</h3><p>备份全部数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p<span class="string">&#x27;pwd&#x27;</span> -A  &gt; dump.sql</span><br></pre></td></tr></table></figure><p>备份单个数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p<span class="string">&#x27;pwd&#x27;</span> [db_name] &gt; dump.sql</span><br></pre></td></tr></table></figure><p>备份单个表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p<span class="string">&#x27;pwd&#x27;</span> [db_name] [table] &gt; dump.sql</span><br></pre></td></tr></table></figure><h3 id="还原数据"><a href="#还原数据" class="headerlink" title="还原数据"></a>还原数据</h3><p>方法一</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">source</span> /disk/backup/dump.sql</span><br></pre></td></tr></table></figure><p>方法二</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p<span class="string">&#x27;pwd&#x27;</span> &lt; /disk/backup/dump.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql分库分表</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/7.%20Mysql%20%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/7.%20Mysql%20%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="分表方式"><a href="#分表方式" class="headerlink" title="分表方式"></a>分表方式</h2><p>垂直分表：根据业务分表</p><p>水平分表：根据数据分表</p><h2 id="分表算法"><a href="#分表算法" class="headerlink" title="分表算法"></a>分表算法</h2><ol><li>主键ID取模分表</li><li>时间范围分表</li></ol><h2 id="分库分表的问题"><a href="#分库分表的问题" class="headerlink" title="分库分表的问题"></a>分库分表的问题</h2><h3 id="分布式唯一ID"><a href="#分布式唯一ID" class="headerlink" title="分布式唯一ID"></a>分布式唯一ID</h3><h4 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h4><ul><li>优点：本地生成，性能高</li><li>缺点：<ul><li>一般为36位字符串，更占用空间</li><li>不适合作为Mysql主键<ul><li>Mysql是聚簇索引，会把相邻主键的数据放在相邻的物理存储位置上，无序性会导致磁盘随机IO、叶分裂等问题</li><li>普通索引需要存储主键值，导致B+树变高</li></ul></li><li>基于MAC地址生成的算法可能导致MAC地址泄露</li></ul></li></ul><h4 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h4><p><img src="https://img-blog.csdnimg.cn/31b98dc293134cc7a6c604dc6afadb41.png" alt="在这里插入图片描述"></p><h4 id="号段模式"><a href="#号段模式" class="headerlink" title="号段模式"></a>号段模式</h4><p>通过一张表来读取ID，但每次读取1个会造成数据库压力很大，所以采用每次读取一批ID存到本地缓存中，当本地缓存的ID使用完了再申请新的号段</p><p><img src="https://img-blog.csdnimg.cn/f7a6e12e2fc2423b94bb4f625bdad3cb.png" alt="在这里插入图片描述"></p><h3 id="分表后的分页查询"><a href="#分表后的分页查询" class="headerlink" title="分表后的分页查询"></a>分表后的分页查询</h3><h4 id="全局查询法"><a href="#全局查询法" class="headerlink" title="全局查询法"></a>全局查询法</h4><blockquote><p>这种方案最简单，但是随着页码的增加，性能越来越低</p></blockquote><p>假设分了两张表（表1、表2），分页需要查询第二页的5条记录。</p><p>则需要把表1和表2的前10条数据都查出来，进行排序后再取第5-9条。</p><p>缺点：会随着页数的增加导致查询的数据量增加。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order_1 <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">asc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order_2 <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">asc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="禁止跳页查询法"><a href="#禁止跳页查询法" class="headerlink" title="禁止跳页查询法"></a>禁止跳页查询法</h4><blockquote><p>这种方案是在业务上更改，不能跳页查询，由于只返回一页数据，性能较高</p></blockquote><p>例如第一页查询结果：[1664088181，1664088189，1664088219，1664088289，1664088392]</p><p>此时SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order_1 <span class="keyword">where</span> <span class="type">time</span> <span class="operator">&gt;</span> <span class="number">1664088392</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">asc</span> limit <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_order_2 <span class="keyword">where</span> <span class="type">time</span> <span class="operator">&gt;</span> <span class="number">1664088392</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">asc</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>全查询出来后再将数据在内存里重新排序，取前5条数据。</p><p>缺点：只能一页一页依次查询。</p><h4 id="二次查询法"><a href="#二次查询法" class="headerlink" title="二次查询法"></a>二次查询法</h4><blockquote><p>数据精确，在数据分布均衡的情况下适用，查询的数据较少，不会随着翻页增加数据的返回量，性能较高</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 需求 select * from tb_order limit 5, 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询两张分表，起始偏移 = 5 / 分表数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order_1 <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span> limit <span class="number">2</span>, <span class="number">5</span>; <span class="comment">-- 5,7,9,12,14</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order_2 <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span> limit <span class="number">2</span>, <span class="number">5</span>; <span class="comment">-- 6,8,10,11,13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 得到两张表的最小值 = 5</span></span><br><span class="line"><span class="comment">-- 将5和每张表的最大值进行between查询，排序得到 5,6,7,8,9,10,11,12,13</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order_1 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">14</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order_2 <span class="keyword">where</span> id <span class="keyword">between</span> <span class="number">5</span> <span class="keyword">and</span> <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 由上述结果可以得出</span></span><br><span class="line"><span class="comment">-- 5 在 tb_order_1 中的偏移为 3</span></span><br><span class="line"><span class="comment">-- 5 在 tb_order_2 中的偏移为 2 （5排在6的前面一个位置，6在 tb_order_2 中的位置是3）</span></span><br><span class="line"><span class="comment">-- 5 的全局偏移就是 3 + 2 = 5</span></span><br><span class="line"><span class="comment">-- 那么要查询 limit 5, 5 的数据，起始偏移则需要在全局偏移 + 1 即从6开始往后查询5个即 [6,7,8,9,10]</span></span><br><span class="line"><span class="comment">-- 注意：limit 5, 5 实际上查询的是 第6-10条数据，所以5的全局偏移为5，查询第6条数据时则要+1</span></span><br></pre></td></tr></table></figure><h4 id="使用搜索引擎ES"><a href="#使用搜索引擎ES" class="headerlink" title="使用搜索引擎ES"></a>使用搜索引擎ES</h4><p>将数据异构一份存入ES，查询时通过ES进行查询，不直接查询数据库。</p><h2 id="Mycat"><a href="#Mycat" class="headerlink" title="Mycat"></a>Mycat</h2><p>MyCat技术原理中最重要的一个动词是“拦截”，它拦截了用户发送过来的SQL语句，首先对SQL语句做了一些特定的分析：如分片分析、路由分析、读写分离分析、缓存分析等，然后将此SQL发往后端的真实数据库，并将返回的结果做适当的处理，最终再返回给用户。</p><p><img src="https://img-blog.csdnimg.cn/20210301090825393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Sharding-JDBC"><a href="#Sharding-JDBC" class="headerlink" title="Sharding JDBC"></a>Sharding JDBC</h2><blockquote><p>轻量级的 Java 框架，增强版的 JDBC</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.shardingsphere.datasource.names</span>=<span class="string">ds</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.ds.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.ds.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.ds.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/tripper?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.ds.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.shardingsphere.datasource.ds.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.shardingsphere.sharding.tables.t_order.actual-data-nodes</span>=<span class="string">ds.t_order$-&gt;&#123;1..2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.shardingsphere.sharding.tables.t_order.key-generator.column</span>=<span class="string">id</span></span><br><span class="line"><span class="attr">spring.shardingsphere.sharding.tables.t_order.key-generator.type</span>=<span class="string">SNOWFLAKE</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column</span>=<span class="string">id</span></span><br><span class="line"><span class="attr">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression</span>=<span class="string">t_order$-&gt;&#123;id % 2 + 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.main.allow-bean-definition-overriding</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 分区表</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/8.%20Mysql%20%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/8.%20Mysql%20%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通常情况下，同一张表的数据在物理层面都是存放在一起的。随着业务增长，当同一张表的数据量过大时，会带来管理上的不便。而分区特性可以将一张表从物理层面根据一定的规则将数据划分为多个分区，多个分区可以单独管理，甚至存放在不同的磁盘&#x2F;文件系统上，提升效率。</p><p>对于应用来说，表依然是一个逻辑整体，但数据库可以针对不同的数据分区独立执行管理操作，不影响其他分区的运行。而数据划分的规则即称为分区函数，数据写入表时，会根据运算结果决定写入哪个分区。</p><p>MySQL的分区插件与存储引擎运行在不同的层，因此大部分存储引擎都可以利用MySQL的分区特性，只有少数存储引擎（merge，CSV，federated）不支持分区特性。若某张表使用的分区特性，则所有的分区都需要使用相同的存储引擎，且分区特性会同时应用到数据和索引上。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>表非常大以至于无法全部都放在内存中，或者只在表的最后部分有热点数据，其他均是历史数据。</li><li>批量删除大量数据可以使用清除整个分区的方式：如果一项业务跑的时间足够长，往往就会有根据时间删除历史数据的需求。这时候，按照时间分区的分区表，就可以直接通过alter table t drop partition …这个语法删掉分区，从而删掉过期的历史数据。</li><li>分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备</li><li>可以使用分区表来避免某些特殊的瓶颈：innodb的单个索引的互斥访问，ext3文件系统的inode锁竞争</li><li>可以备份和恢复独立的分区</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>数据可以跨磁盘&#x2F;文件系统存储，适合存储大量数据。</li><li>数据的管理非常方便，以分区为单位操作数据，不会影响其他分区的正常运行。</li><li>数据查询上在某些条件可以利用分区裁剪(partition pruning)特性，将搜索范围快速定位到特性分区，提升查询性能。</li></ul><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><ul><li><strong>无论哪种类型的分区，如果表中存在主键或唯一索引时，分区列必须是唯一索引的一个组成部分。</strong></li><li>一个表最多只能有1024个分区，在5.7版本的时候可以支持8196个分区</li><li>在早期的mysql中，分区表达式必须是整数或者是返回整数的表达式，在mysql5.5中，某些场景可以直接使用列来进行分区</li><li>分区表无法使用外键约束</li><li>分区列进行计算则会导致扫描全部的分区表</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>分区表由多个相关的底层表实现，这个底层表也是由句柄对象标识，我们可以直接访问各个分区。存储引擎管理分区的各个底层表和管理普通表一样（所有的底层表都必须使用相同的存储引擎），分区表的索引只是在各个底层表上各自加上一个完全相同的索引。从存储引擎的角度来看，底层表和普通表没有任何不同，存储引擎也无须知道这是一个普通表还是一个分区表的一部分。</p><p>分区表的操作按照以下的操作逻辑进行：</p><ol><li><p>select：当查询一个分区表时，分区层先打开并锁住所有的底层表，优化器先判断是否可以过滤部分分区，然后再调用对应的存储引擎接口访问各个分区的数据</p></li><li><p>insert：当写入一条记录时，分区层先打开并锁住所有的底层表，然后确定哪个分区接受这条记录，再将记录写入对应底层表</p></li><li><p>delete：当删除一条记录时，分区层先打开并锁住所有的底层表，然后确定数据对应的分区，最后对相应底层表进行删除操作</p></li><li><p>update：当更新一条记录时，分区层先打开并锁住所有的底层表，mysql先确定需要更新的记录再哪个分区，然后取出数据并更新，再判断更新后的数据应该再哪个分区，最后对底层表进行写入操作，并对源数据所在的底层表进行删除操作</p></li></ol><p>有些操作时支持过滤的，例如，当删除一条记录时，MySQL需要先找到这条记录，如果where条件恰好和分区表达式匹配，就可以将所有不包含这条记录的分区都过滤掉，这对update同样有效。如果是insert操作，则本身就是只命中一个分区，其他分区都会被过滤掉。mysql先确定这条记录属于哪个分区，再将记录写入对应得曾分区表，无须对任何其他分区进行操作</p><p>虽然每个操作都会“先打开并锁住所有的底层表”，但这并不是说分区表在处理过程中是锁住全表的，如果存储引擎能够自己实现行级锁，例如innodb，则会在分区层释放对应表锁，这个加锁和解锁过程与普通InnoDB上的查询类似。</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="Range-Partitioning（范围分区）"><a href="#Range-Partitioning（范围分区）" class="headerlink" title="Range Partitioning（范围分区）"></a>Range Partitioning（范围分区）</h3><p>根据列值在给定范围内将行分配给分区</p><p>范围分区表的分区方式是：每个分区都包含行数据且分区的表达式在给定的范围内，分区的范围应该是连续的且不能重叠，可以使用<code>VALUES LESS THAN</code> 运算符来定义</p><p><strong>使用 INT 类型分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1970-01-01&#x27;</span>,</span><br><span class="line">    separated <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999-12-31&#x27;</span>,</span><br><span class="line">    job_code <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    store_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (store_id) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> LESS THAN (<span class="number">6</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN (<span class="number">11</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN (<span class="number">16</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> LESS THAN MAXVALUE<span class="comment">--maxvalue表示始终大于等于最大可能整数值的整数值</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>使用 Date 类型分区</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 基于年的分区</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1970-01-01&#x27;</span>,</span><br><span class="line">    separated <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999-12-31&#x27;</span>,</span><br><span class="line">    job_code <span class="type">INT</span>,</span><br><span class="line">    store_id <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> ( <span class="keyword">YEAR</span>(separated) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> LESS THAN (<span class="number">1991</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN (<span class="number">1996</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN (<span class="number">2001</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> LESS THAN MAXVALUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于范围列的分区</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> members (</span><br><span class="line">    firstname <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    lastname <span class="type">VARCHAR</span>(<span class="number">25</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">35</span>),</span><br><span class="line">    joined <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> COLUMNS(joined) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> LESS THAN (<span class="string">&#x27;1960-01-01&#x27;</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN (<span class="string">&#x27;1970-01-01&#x27;</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN (<span class="string">&#x27;1980-01-01&#x27;</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> LESS THAN (<span class="string">&#x27;1990-01-01&#x27;</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> LESS THAN MAXVALUE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用函数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> quarterly_report_status (</span><br><span class="line">    report_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    report_status <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    report_updated <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> ( UNIX_TIMESTAMP(report_updated) ) (</span><br><span class="line">    <span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2008-01-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2008-04-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2008-07-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p3 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2008-10-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p4 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2009-01-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p5 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2009-04-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p6 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2009-07-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p7 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2009-10-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p8 <span class="keyword">VALUES</span> LESS THAN ( UNIX_TIMESTAMP(<span class="string">&#x27;2010-01-01 00:00:00&#x27;</span>) ),</span><br><span class="line">    <span class="keyword">PARTITION</span> p9 <span class="keyword">VALUES</span> LESS THAN (MAXVALUE)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="List-Partitioning（列表分区）"><a href="#List-Partitioning（列表分区）" class="headerlink" title="List Partitioning（列表分区）"></a>List Partitioning（列表分区）</h3><p>类似于按range分区，区别在于list分区是基于列值匹配一个离散值集合中的某个值来进行选择</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1970-01-01&#x27;</span>,</span><br><span class="line">    separated <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999-12-31&#x27;</span>,</span><br><span class="line">    job_code <span class="type">INT</span>,</span><br><span class="line">    store_id <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LIST(store_id) (</span><br><span class="line">    <span class="keyword">PARTITION</span> pNorth <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">17</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> pEast <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">19</span>,<span class="number">20</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> pWest <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">4</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">18</span>),</span><br><span class="line">    <span class="keyword">PARTITION</span> pCentral <span class="keyword">VALUES</span> <span class="keyword">IN</span> (<span class="number">7</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Hash-Partitioning（哈希分区）"><a href="#Hash-Partitioning（哈希分区）" class="headerlink" title="Hash Partitioning（哈希分区）"></a>Hash Partitioning（哈希分区）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1970-01-01&#x27;</span>,</span><br><span class="line">    separated <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999-12-31&#x27;</span>,</span><br><span class="line">    job_code <span class="type">INT</span>,</span><br><span class="line">    store_id <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> HASH(store_id)</span><br><span class="line">PARTITIONS <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    lname <span class="type">VARCHAR</span>(<span class="number">30</span>),</span><br><span class="line">    hired <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1970-01-01&#x27;</span>,</span><br><span class="line">    separated <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;9999-12-31&#x27;</span>,</span><br><span class="line">    job_code <span class="type">INT</span>,</span><br><span class="line">    store_id <span class="type">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LINEAR HASH(<span class="keyword">YEAR</span>(hired))</span><br><span class="line">PARTITIONS <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="Key-Partitioning（键值分区）"><a href="#Key-Partitioning（键值分区）" class="headerlink" title="Key Partitioning（键值分区）"></a>Key Partitioning（键值分区）</h3><p>与hash分区类似，主要区别在于key partition的hash函数是由MySQL server提供的，且使用主键（或非空唯一键）作为分区列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tk (</span><br><span class="line">    col1 <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    col2 <span class="type">CHAR</span>(<span class="number">5</span>),</span><br><span class="line">    col3 <span class="type">DATE</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LINEAR KEY (col1)</span><br><span class="line">PARTITIONS <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="Subpartitioning（子分区）"><a href="#Subpartitioning（子分区）" class="headerlink" title="Subpartitioning（子分区）"></a>Subpartitioning（子分区）</h3><p>在分区的基础之上，再进行分区后存储</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_partition_by_subpart`</span><br><span class="line">(</span><br><span class="line">  `id` <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  `sName` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sAge` <span class="type">INT</span>(<span class="number">2</span>) UNSIGNED ZEROFILL <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sAddr` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sGrade` <span class="type">INT</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sStuId` <span class="type">INT</span>(<span class="number">8</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sSex` <span class="type">INT</span>(<span class="number">1</span>) UNSIGNED <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`, `sGrade`)</span><br><span class="line">)  ENGINE <span class="operator">=</span> INNODB</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(id)<span class="comment">-- 父分区采用 Range Partitioning</span></span><br><span class="line">SUBPARTITION <span class="keyword">BY</span> HASH(sGrade) SUBPARTITIONS <span class="number">2</span><span class="comment">-- 子分区采用 Hash Partitioning</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">PARTITION</span> p0 <span class="keyword">VALUES</span> LESS THAN(<span class="number">5</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p1 <span class="keyword">VALUES</span> LESS THAN(<span class="number">10</span>),</span><br><span class="line"><span class="keyword">PARTITION</span> p2 <span class="keyword">VALUES</span> LESS THAN(<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><strong>全量扫描数据，不要任何索引</strong></p><p>使用简单的分区方式存放表，不要任何索引，根据分区规则大致定位需要的数据为止，通过使用 where 条件将需要的数据限制在少数分区中，这种策略适用于以正常的方式访问大量数据</p><p><strong>索引数据，并分离热点</strong></p><p>如果数据有明显的热点，而且除了这部分数据，其他数据很少被访问到，那么可以将这部分热点数据单独放在一个分区中，让这个分区的数据能够有机会都缓存在内存中，这样查询就可以只访问一个很小的分区表，能够使用索引，也能够有效的使用缓存</p><h2 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h2><ol><li><p>null值会使分区过滤无效</p></li><li><p>分区列和索引列不匹配，会导致查询无法进行分区过滤</p></li><li><p>选择分区的成本可能很高</p></li><li><p>打开并锁住所有底层表的成本可能很高</p></li><li><p>维护分区的成本可能很高</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql事务</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20Mysql%20%E4%BA%8B%E5%8A%A1/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/2.%20Mysql%20%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h2><p>原子性（atomicity）：一个事务要么全部提交成功，要么全部失败回滚</p><p>一致性（consistency）：一个事务在执行之前和执行之后，数据库都必须处于一致性状态</p><p>隔离性（isolation）：一个事务的执行不能不被其他事务干扰</p><p>持久性（durability）：一旦事务提交，那么它对数据库中的对应数据的状态的变更就会永久保存到数据库中</p><h2 id="ACID是靠什么保证的"><a href="#ACID是靠什么保证的" class="headerlink" title="ACID是靠什么保证的"></a>ACID是靠什么保证的</h2><p>原子性：通过undolog日志保证，它记录了需要回滚的日志信息，事务撤销回滚时撤销已经执行成功的sql</p><p>一致性：由其他三大特性保证，程序代码要保证业务上的一致性</p><p>隔离性：MVCC</p><p>持久性：通过redolog日志保证，mysql修改数据的时候会在redolog中记录一份日志数据，就算数据没有保存成功，只要日志保存成功了，数据依然不会丢失</p><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> tb_user <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="keyword">INSERT</span> tb_user <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看自动提交</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;%autocommit%&#x27;</span></span><br><span class="line"><span class="comment">-- 关闭自动提交，只针对当前的会话有效</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置保存点</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> [pointName];</span><br><span class="line"><span class="comment">-- 回滚到指定保存点</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">to</span> [pointName];</span><br><span class="line"><span class="comment">-- 删除保存点</span></span><br><span class="line"><span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> [pointName];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"><span class="comment">-- 修改隔离级别</span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level 事务隔离级别;</span><br></pre></td></tr></table></figure><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>对于同时运行多个事务，这些事务访问<strong>数据库中相同的数据</strong>时，如果没有采取必要的隔离机制，就会导致各种并发问题：</p><ul><li>脏读：事务A读到了事务B已修改但尚未提交的数据，此时事务B回滚，A读取数据无效，不符合一致性。</li><li>不可重复读：事务A读到了事务B已提交的修改数据，不符合隔离性。</li><li>幻读：事务A读到了事务B提交的新增数据，不符合隔离性。</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交 READ UNCOMMITTED</td><td>是</td><td>是</td><td>是</td></tr><tr><td>读已提交 READ COMMITTED</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读 REPEATABLE READ（Mysql默认级别）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>可序列化 SERIALIZABLE</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><h3 id="MVCC-作用"><a href="#MVCC-作用" class="headerlink" title="MVCC 作用"></a>MVCC 作用</h3><p>在Mysql InnoDB存储引擎下，READ COMMITED 和 REPEATABLE READ 基于MVCC（多版本并发控制）进行并发事务控制。</p><p>MVCC是基于<strong>数据版本</strong>对并发事务进行访问。</p><p><img src="https://img-blog.csdnimg.cn/120aa7b801364d769b525be1589c85ef.png" alt="在这里插入图片描述"></p><p>对于事务D</p><p>READ COMMITED 结果：张三、张小三</p><p>REPEATABLE READ 结果：张三、张三</p><h3 id="Undo-Log版本链"><a href="#Undo-Log版本链" class="headerlink" title="Undo Log版本链"></a>Undo Log版本链</h3><p>那么Mysql是怎么实现不读到已提交的修改数据？通过Undo Log版本链</p><p>在版本链中存有 <code>事务ID</code> 和 <code>回滚指针</code> ，Mysql会确保版本链数据不再被引用后再将版本链删除</p><img src="https://img-blog.csdnimg.cn/a00430ad479947c3850879ebe94f8367.png" alt="在这里插入图片描述" style="zoom: 25%;" /><p>Undo Log版本链作用：</p><p>ReadView：”快照读”SQL执行时MVCC提取数据的依据</p><ul><li>ReadView是一个数据结构，包含4个字段：<ul><li>m_ids：当前活跃的事务编号集合</li><li>min_trx_id：最小活跃事务编号</li><li>max_trx_id：预分配事务编号，当前最大事务编号+1</li><li>create_trx_id：ReadView创建者的事务编号</li></ul></li><li>快照读：最普通的SELECT查询语句</li><li>当前读：执行下列语句时进行数据读取的方式<ul><li>INSERT、UPDATE、DELETE、SELECT…FOR UPDATE、SELECT…LOCK IN SHARE MODE</li></ul></li></ul><h4 id="READ-COMMITED"><a href="#READ-COMMITED" class="headerlink" title="READ COMMITED"></a>READ COMMITED</h4><p><img src="https://img-blog.csdnimg.cn/ac58f0b6898048ba9da55663c42ccb8a.png" alt="在这里插入图片描述"></p><p>版本链数据访问规则：</p><p>判断当前事务ID是否等于create_trx_id(4)，成立说明数据就是这个事务自己更改的，可以访问。</p><p>判断 trx_id &lt; min_trx_id(2)，成立说明数据已经提交了，可以访问。</p><p>判断 trx_id &gt; max_trx_id(5)，成立说明该事务在ReadView生成以后才开启，不允许访问。</p><p>判断 min_trx_id(2) &lt;&#x3D; trx_id &lt;&#x3D; max_trx_id(5)，成立则在m_ids数据中对比，不存在数据则代表数据是已提交的，可以访问。</p><p>因此根据ReadView可以读到1号事务提交的数据 – 张三。</p><h4 id="REPEATABLE-READ"><a href="#REPEATABLE-READ" class="headerlink" title="REPEATABLE READ"></a>REPEATABLE READ</h4><p><img src="https://img-blog.csdnimg.cn/b12840415d944d6eaf89cbe5ec6befaf.png" alt="在这里插入图片描述"></p><p>ReadView会复用第一次产生的，因此不会读到事务2修改已提交的数据</p><p><strong>幻读</strong></p><ul><li>连续多次快照读，ReadView会产生复用，没有幻读问题</li><li>当两次快照读之间存在当前读，ReadView会重新生成，导致产生幻读</li></ul><p><img src="https://img-blog.csdnimg.cn/85f4b70f21294af78d40093f973e459c.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制</title>
      <link href="/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/6.%20Mysql%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/swan-blog/2022/07/26/%E6%95%B0%E6%8D%AE%E5%BA%93/6.%20Mysql%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="binlog的格式"><a href="#binlog的格式" class="headerlink" title="binlog的格式"></a>binlog的格式</h2><p>binlog_format&#x3D;STATEMENT（默认）：记录写操作SQL，会有以下问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果有时间函数，那么主从复制的时间会不一致</span></span><br><span class="line"><span class="keyword">update</span> xxx <span class="keyword">set</span> <span class="type">time</span> <span class="operator">=</span> now() <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><p>binlog_format&#x3D;ROW：记录一整行记录，会完全拷贝原记录，效率低</p><p>binlog_format&#x3D;MIXED：判断写操作有没有函数，有则用STATEMENT，没有则用ROW</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果出现系统变量，也会出现主从复制不一致</span></span><br><span class="line">@<span class="variable">@host</span> name</span><br></pre></td></tr></table></figure><h2 id="复制原理"><a href="#复制原理" class="headerlink" title="复制原理"></a>复制原理</h2><ol><li>master将改变记录到二进制日志(binary log)，这个记录过程叫二进制日志事件(binary log events)。</li><li>slave将master的binary log events拷贝到它的中继日志(relay log)。</li><li>slave重做中继日志中的事件，将改变应用到自己的数据库中，Mysql复制是异步且串行化的。<br><img src="https://img-blog.csdnimg.cn/20200203173115696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><h2 id="配置-基于mysql-8-x"><a href="#配置-基于mysql-8-x" class="headerlink" title="配置(基于mysql 8.x)"></a>配置(基于mysql 8.x)</h2><h3 id="master配置文件修改"><a href="#master配置文件修改" class="headerlink" title="master配置文件修改"></a>master配置文件修改</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置主机Id</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># 启用二进制日志</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">E:\\Software\\mysql-8.0.19\\data\\logbin</span></span><br></pre></td></tr></table></figure><h3 id="slave配置文件修改"><a href="#slave配置文件修改" class="headerlink" title="slave配置文件修改"></a>slave配置文件修改</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置从机Id</span></span><br><span class="line"><span class="attr">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># 启用二进制日志</span></span><br><span class="line"><span class="attr">log-bin</span>=<span class="string">/var/run/mysqld/logbin</span></span><br></pre></td></tr></table></figure><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><blockquote><p>主机IP：192.168.1.104<br>从机IP：192.168.25.103</p></blockquote><ol><li>主节点创建用户并授权<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.1.104&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.1.104&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>查询主节点状态<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 刷新</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">-- 查询主节点状态</span></span><br><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure>参数解释：</li></ol><ul><li>File：二进制日志文件</li><li>Position：开始抄数据的位置</li><li>Binlog_Do_DB：需要复制的数据库，空表示都要复制</li><li>Binlog_Ignore_DB：忽略的数据库，空表示没有<br><img src="https://img-blog.csdnimg.cn/20200201111401768.png" alt="在这里插入图片描述"></li></ul><ol start="3"><li>在从节点上设置主节点参数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">change master <span class="keyword">to</span> master_host <span class="operator">=</span> <span class="string">&#x27;192.168.1.104&#x27;</span>,</span><br><span class="line">master_user <span class="operator">=</span> <span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">master_password <span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">master_log_file <span class="operator">=</span> <span class="string">&#x27;binlog.000017&#x27;</span>, master_log_pos <span class="operator">=</span> <span class="number">5934</span>;</span><br></pre></td></tr></table></figure></li><li>开启主从同步<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure></li><li>查看主从同步状态<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> slave status;</span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database dbtest;</span><br><span class="line">use dbtest;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> dog;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dog(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    dog_name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dog (dog_name) <span class="keyword">values</span> (<span class="string">&#x27;旺财&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dog (dog_name) <span class="keyword">values</span> (<span class="string">&#x27;大白&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dog (dog_name) <span class="keyword">values</span> (<span class="string">&#x27;汪汪&#x27;</span>);</span><br></pre></td></tr></table></figure>主机从机同步，测试成功。</li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获取binlog文件列表</span></span><br><span class="line"><span class="keyword">show</span> <span class="type">binary</span> logs;</span><br><span class="line"><span class="comment">-- 查看指定binlog文件的内容</span></span><br><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;binlog.000017&#x27;</span>;</span><br><span class="line"><span class="comment">-- 停止同步</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="comment">-- 查询用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `mysql`.`<span class="keyword">user</span>` <span class="keyword">WHERE</span> (`Host` <span class="operator">=</span> <span class="string">&#x27;192.168.25.103&#x27;</span>) <span class="keyword">and</span> (`<span class="keyword">User</span>` <span class="operator">=</span> <span class="string">&#x27;rep1&#x27;</span>);</span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.1.104&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;654321&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授予用户权限</span></span><br><span class="line"><span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;192.168.1.104&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux Shell</title>
      <link href="/swan-blog/2022/07/26/Linux/Linux%20Shell/"/>
      <url>/swan-blog/2022/07/26/Linux/Linux%20Shell/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="Shell-Hello-World"><a href="#Shell-Hello-World" class="headerlink" title="Shell Hello World"></a>Shell Hello World</h2><p>新建 <code>test.sh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure><p>执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure><h2 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h2><p><strong>定义变量</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;runoob.com&quot;</span><br></pre></td></tr></table></figure><p>变量名命名规则</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p><strong>使用变量</strong></p><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;qinjx&quot;</span><br><span class="line">echo $your_name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">花括号是可选的，推荐加上</span></span><br><span class="line">echo $&#123;your_name&#125;</span><br></pre></td></tr></table></figure><p><strong>只读变量</strong></p><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">myUrl=&quot;https://www.google.com&quot;</span><br><span class="line">readonly myUrl</span><br><span class="line">myUrl=&quot;https://www.runoob.com&quot;</span><br></pre></td></tr></table></figure><p>尝试更改只读变量，结果报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh: NAME: This variable is read only.</span><br></pre></td></tr></table></figure><p><strong>删除变量</strong></p><p>使用 unset 命令可以删除变量。</p><p>变量被删除后不能再次使用，unset 命令不能删除只读变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset variable_name</span><br></pre></td></tr></table></figure><p><strong>变量类型</strong></p><p>运行shell时，会同时存在三种变量：</p><ol><li><p><strong>局部变量</strong>：局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</p></li><li><p><strong>环境变量</strong>：所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</p></li><li><p><strong>shell变量</strong>：shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p></li></ol><h2 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h2><p>字符串可以用单引号，也可以用双引号，也可以不用引号</p><p><strong>单引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&#x27;this is a string&#x27;</span><br></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><p><strong>双引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=&#x27;runoob&#x27;</span><br><span class="line">str=&quot;Hello, I know you are \&quot;$your_name\&quot;! \n&quot;</span><br><span class="line">echo -e $str</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, I know you are &quot;runoob&quot;! </span><br></pre></td></tr></table></figure><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><p><strong>拼接字符串</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">your_name=&quot;runoob&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用双引号拼接</span></span><br><span class="line">greeting=&quot;hello, &quot;$your_name&quot; !&quot;</span><br><span class="line">greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;</span><br><span class="line">echo $greeting  $greeting_1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用单引号拼接</span></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$your_name&#x27; !&#x27;</span><br><span class="line">greeting_3=&#x27;hello, $&#123;your_name&#125; !&#x27;</span><br><span class="line">echo $greeting_2  $greeting_3</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, $&#123;your_name&#125; !</span><br></pre></td></tr></table></figure><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure><p><strong>提取子字符串</strong></p><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo $&#123;string:1:4&#125; # 输出 unoo</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p><p><strong>查找子字符串</strong></p><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;runoob is a great site&quot;</span><br><span class="line">echo `expr index &quot;$string&quot; io`  # 输出 4</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 以上脚本中 <strong>&#96;</strong> 是反引号，而不是单引号 **’**。</p><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><p><strong>定义数组</strong></p><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[n]=valuen</span><br></pre></td></tr></table></figure><p>可以不使用连续的下标，而且下标的范围没有限制。</p><p><strong>读取数组</strong></p><p>读取数组元素值的一般格式是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;数组名[下标]&#125;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valuen=$&#123;array_name[n]&#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><p><strong>获取数组的长度</strong></p><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组元素的个数</span></span><br><span class="line">length=$&#123;#array_name[@]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">length=$&#123;#array_name[*]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取得数组单个元素的长度</span></span><br><span class="line">lengthn=$&#123;#array_name[n]&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h2><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是一个注释</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--------------------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 用户配置区 开始 #####</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里可以添加脚本描述信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#### 用户配置区 结束  #####</span></span></span><br></pre></td></tr></table></figure><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><p><strong>多行注释</strong></p><p>多行注释还可以使用以下格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>EOF 也可以使用其他符号:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;&#x27;</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">&#x27;</span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：**$n<strong>。</strong>n** 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名（包含文件路径）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class="line">echo &quot;执行的文件名：$0&quot;;</span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line">echo &quot;第二个参数为：$2&quot;;</span><br><span class="line">echo &quot;第三个参数为：$3&quot;;</span><br></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span></span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line"></span><br><span class="line">echo &quot;参数个数为：$#&quot;;</span><br><span class="line">echo &quot;传递的参数作为一个字符串显示：$*&quot;;</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span></span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">第一个参数为：1</span><br><span class="line">参数个数为：3</span><br><span class="line">传递的参数作为一个字符串显示：1 2 3</span><br></pre></td></tr></table></figure><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;-- \$* 演示 ---&quot;</span><br><span class="line">for i in &quot;$*&quot;; do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;-- \$@ 演示 ---&quot;</span><br><span class="line">for i in &quot;$@&quot;; do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> +x test.sh</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./test.sh 1 2 3</span></span><br><span class="line">-- $* 演示 ---</span><br><span class="line">1 2 3</span><br><span class="line">-- $@ 演示 ---</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h2><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p><strong>两个数相加（注意使用的是反引号）</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo &quot;两数之和为 : $val&quot;</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两数之和为 : 4</span><br></pre></td></tr></table></figure><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <strong><code> </code></strong> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">&#x3D;</td><td align="left">赋值</td><td align="left">a&#x3D;$b 将把变量 b 的值赋给 a。</td></tr><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a &#x3D;&#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a&#x3D;&#x3D;$b]</strong> 是错误的，必须写成 **[ $a &#x3D;&#x3D; $b ]**。</p><p><strong>实例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo &quot;a + b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a - $b`</span><br><span class="line">echo &quot;a - b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $a \* $b`</span><br><span class="line">echo &quot;a * b : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $b / $a`</span><br><span class="line">echo &quot;b / a : $val&quot;</span><br><span class="line"></span><br><span class="line">val=`expr $b % $a`</span><br><span class="line">echo &quot;b % a : $val&quot;</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 不等于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a + b : 30</span><br><span class="line">a - b : -10</span><br><span class="line">a * b : 200</span><br><span class="line">b / a : 2</span><br><span class="line">b % a : 0</span><br><span class="line">a 不等于 b</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong></p><ul><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li><li>if…then…fi 是条件语句</li><li>在 MAC 中 shell 的 expr 语法是：**$((表达式))*<em>，此处表达式中的 “</em>“ 不需要转义符号 “&quot; 。</li></ul></blockquote><hr><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -eq $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -ne $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -ne $b: a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -ne $b : a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -gt $b: a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -gt $b: a 不大于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -lt $b: a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -lt $b: a 不小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -ge $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -ge $b: a 大于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -ge $b: a 小于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -le $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a -le $b: a 小于或等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a -le $b: a 大于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">10 -eq 20: a 不等于 b</span><br><span class="line">10 -ne 20: a 不等于 b</span><br><span class="line">10 -gt 20: a 不大于 b</span><br><span class="line">10 -lt 20: a 小于 b</span><br><span class="line">10 -ge 20: a 小于 b</span><br><span class="line">10 -le 20: a 小于等于 b</span><br></pre></td></tr></table></figure><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a == $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 100 -a $b -gt 15 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 小于 100 且 $b 大于 15 : 返回 false&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 100 -o $b -gt 100 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 小于 100 或 $b 大于 100 : 返回 false&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a -lt 5 -o $b -gt 100 ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a 小于 5 或 $b 大于 100 : 返回 false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 != 20 : a 不等于 b</span><br><span class="line">10 小于 100 且 20 大于 15 : 返回 true</span><br><span class="line">10 小于 100 或 20 大于 100 : 返回 true</span><br><span class="line">10 小于 5 或 20 大于 100 : 返回 false</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;返回 false&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 || $b -gt 100 ]]</span><br><span class="line">then</span><br><span class="line">   echo &quot;返回 true&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;返回 false&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">返回 false</span><br><span class="line">返回 true</span><br></pre></td></tr></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a &#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=&quot;abc&quot;</span><br><span class="line">b=&quot;efg&quot;</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a = $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a = $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a != $b : a 不等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a != $b: a 等于 b&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -z $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-z $a : 字符串长度为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-z $a : 字符串长度不为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -n &quot;$a&quot; ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;-n $a : 字符串长度不为 0&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;-n $a : 字符串长度为 0&quot;</span><br><span class="line">fi</span><br><span class="line">if [ $a ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;$a : 字符串不为空&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;$a : 字符串为空&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc = efg: a 不等于 b</span><br><span class="line">abc != efg : a 不等于 b</span><br><span class="line">-z abc : 字符串长度不为 0</span><br><span class="line">-n abc : 字符串长度不为 0</span><br><span class="line">abc : 字符串不为空</span><br></pre></td></tr></table></figure><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><p>变量 file 表示文件 <strong>&#x2F;var&#x2F;www&#x2F;runoob&#x2F;test.sh</strong>，它的大小为 100 字节，具有 <strong>rwx</strong> 权限。下面的代码，将检测该文件的各种属性：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=&quot;/var/www/runoob/test.sh&quot;</span><br><span class="line">if [ -r $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可读&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可读&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -w $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可写&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可写&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -x $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件可执行&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不可执行&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -f $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件为普通文件&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件为特殊文件&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -d $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件是个目录&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不是个目录&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -s $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件不为空&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件为空&quot;</span><br><span class="line">fi</span><br><span class="line">if [ -e $file ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;文件存在&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;文件不存在&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行脚本，输出结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">文件可读</span><br><span class="line">文件可写</span><br><span class="line">文件可执行</span><br><span class="line">文件为普通文件</span><br><span class="line">文件不是个目录</span><br><span class="line">文件不为空</span><br><span class="line">文件存在</span><br></pre></td></tr></table></figure><h2 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h2><p><strong>if else-if else</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 大于 b&quot;</span><br><span class="line">elif [ $a -lt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 小于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;没有符合的条件&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><strong>for</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">for str in This is a string</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>while</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &#x27;按下 &lt;CTRL-D&gt; 退出&#x27;</span><br><span class="line">echo -n &#x27;输入你最喜欢的网站名: &#x27;</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo &quot;是的！$FILM 是一个好网站&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>case</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &#x27;输入 1 到 4 之间的数字:&#x27;</span><br><span class="line">echo &#x27;你输入的数字为:&#x27;</span><br><span class="line">read aNum</span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo &#x27;你选择了 1&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo &#x27;你选择了 2&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo &#x27;你选择了 3&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo &#x27;你选择了 4&#x27;</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo &#x27;你没有输入 1 到 4 之间的数字&#x27;</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h2><p><strong>定义和执行一个函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">demoFun()&#123;</span><br><span class="line">    echo &quot;这是我的第一个 shell 函数!&quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;-----函数开始执行-----&quot;</span><br><span class="line">demoFun</span><br><span class="line">echo &quot;-----函数执行完毕-----&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----函数开始执行-----</span><br><span class="line">这是我的第一个 shell 函数!</span><br><span class="line">-----函数执行完毕-----</span><br></pre></td></tr></table></figure><p><strong>带有 return 的函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</span><br><span class="line">    echo &quot;输入第一个数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo &quot;输入第二个数字: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line">echo &quot;输入的两个数字之和为 $? !&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这个函数会对输入的两个数字进行相加运算...</span><br><span class="line">输入第一个数字: </span><br><span class="line">1</span><br><span class="line">输入第二个数字: </span><br><span class="line">2</span><br><span class="line">两个数字分别为 1 和 2 !</span><br><span class="line">输入的两个数字之和为 3 !</span><br></pre></td></tr></table></figure><p><strong>函数参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">funWithParam()&#123;</span><br><span class="line">    echo &quot;第一个参数为 $1 !&quot;</span><br><span class="line">    echo &quot;第二个参数为 $2 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $10 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</span><br><span class="line">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</span><br><span class="line">    echo &quot;参数总数有 $# 个!&quot;</span><br><span class="line">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个参数为 1 !</span><br><span class="line">第二个参数为 2 !</span><br><span class="line">第十个参数为 10 !</span><br><span class="line">第十个参数为 34 !</span><br><span class="line">第十一个参数为 73 !</span><br><span class="line">参数总数有 11 个!</span><br><span class="line">作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</span><br></pre></td></tr></table></figure><h2 id="Shell-输入输出重定向"><a href="#Shell-输入输出重定向" class="headerlink" title="Shell 输入输出重定向"></a>Shell 输入输出重定向</h2><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">command &gt; file</td><td align="left">将输出重定向到 file。</td></tr><tr><td align="left">command &lt; file</td><td align="left">将输入重定向到 file。</td></tr><tr><td align="left">command &gt;&gt; file</td><td align="left">将输出以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt; file</td><td align="left">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td align="left">n &gt;&gt; file</td><td align="left">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt;&amp; m</td><td align="left">将输出文件 m 和 n 合并。</td></tr><tr><td align="left">n &lt;&amp; m</td><td align="left">将输入文件 m 和 n 合并。</td></tr><tr><td align="left">&lt;&lt; tag</td><td align="left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>输出重定向会覆盖文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot; &gt; hello</span><br><span class="line">cat hello</span><br><span class="line"></span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><p>输出重定向可追加到文件末尾</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Tom&quot; &gt;&gt; hello</span><br><span class="line">cat hello</span><br><span class="line"></span><br><span class="line">Hello World</span><br><span class="line">Tom</span><br></pre></td></tr></table></figure><p>错误信息也输出到文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat b.txt 2&gt; demo.txt</span><br><span class="line">cat demo.txt</span><br><span class="line"></span><br><span class="line">cat: b.txt: No such file or directory</span><br></pre></td></tr></table></figure><p>将标准输出和标准错误合并后重定向到 log.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 1.txt &gt; log.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>统计 hello 文件的字符数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wc -m hello</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果:</span></span><br><span class="line">16 hello</span><br><span class="line"></span><br><span class="line">wc -m &lt; hello</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果:</span></span><br><span class="line">16</span><br></pre></td></tr></table></figure><p>将 hello 文件中的内容输出给 hello2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt; hello &gt; hello2</span><br><span class="line">cat hello2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果:</span></span><br><span class="line">Hello World</span><br><span class="line">Tom</span><br></pre></td></tr></table></figure><p>将开始标记 tag 和结束标记 tag 之间的内容作为输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; dd</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">123</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">456</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">dd</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出结果</span></span><br><span class="line">123</span><br><span class="line">456</span><br></pre></td></tr></table></figure><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>linux标准输入设备指的是键盘，标准输出设备指的是显示器，标准错误输出指的是显示器。</p><table><thead><tr><th>设备</th><th>设备名</th><th>文件描述符</th><th>类型</th></tr></thead><tbody><tr><td>键盘</td><td>&#x2F;dev&#x2F;stdin</td><td>0</td><td>标准输入</td></tr><tr><td>显示器</td><td>&#x2F;dev&#x2F;stdout</td><td>1</td><td>标准输出</td></tr><tr><td>显示器</td><td>&#x2F;dev&#x2F;stderr</td><td>2</td><td>标准错误输出</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 命令</title>
      <link href="/swan-blog/2022/07/26/Linux/Linux%20%E5%91%BD%E4%BB%A4/"/>
      <url>/swan-blog/2022/07/26/Linux/Linux%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## ls</span></span></span><br><span class="line">ls -a # 列出所有，包含隐藏</span><br><span class="line">ls -l # 列出详细信息</span><br><span class="line">ls -h # 配合-l显示文件大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通配符</span></span><br><span class="line">* 可以代表任意多个的字符</span><br><span class="line">? 代表任意一个字符</span><br><span class="line">[] 表示可以匹配字符组的任一个 </span><br><span class="line">例如 [abc] [a-d]</span><br><span class="line">示例：ls [abc]a.txt</span><br></pre></td></tr></table></figure><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd # 切换到当前用户主目录</span><br><span class="line">cd ~# 切换到当前用户主目录</span><br><span class="line">cd .# 保持在当前目录</span><br><span class="line">cd ..# 返回上一级</span><br><span class="line">cd -# 在最近两次目录之间切换</span><br></pre></td></tr></table></figure><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir dir# 创建目录</span><br><span class="line">mkdir -p dir1/dir2# 递归创建子目录</span><br></pre></td></tr></table></figure><h3 id="rm-cp-mv"><a href="#rm-cp-mv" class="headerlink" title="rm cp mv"></a>rm cp mv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -r # 递归删除文件夹下的所有内容</span><br><span class="line">rm -f # 强制删除，无需提示</span><br><span class="line">cp -r # 复制目录文件，则递归复制子文件</span><br><span class="line">mv  # 移动文件</span><br></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">衔接：前一个命令的输出作为后一个命令的输入</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">管道会触发创建子进程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常用管道命令: more grep</span></span><br><span class="line">ls -a | grep [keyword]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">详细参数</span></span><br><span class="line">-n 显示匹配行及行号</span><br><span class="line">-v 显示不包含匹配文本的所有行(求反)</span><br><span class="line">-i 忽略大小写</span><br><span class="line">^a行首，搜寻以a开头的行</span><br><span class="line"><span class="meta prompt_">ke$</span><span class="language-bash">行尾，搜寻以ke结尾的行</span></span><br><span class="line">示例：grep -nvi “hello world” 1.txt</span><br></pre></td></tr></table></figure><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有端口(包括监听和未监听的)</span></span><br><span class="line">netstat -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有TCP端口</span></span><br><span class="line">netstat -at</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有的UDP端口</span></span><br><span class="line">netstat -au</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有监听状态下的端口</span></span><br><span class="line">netstat -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有监听状态下的TCP端口</span></span><br><span class="line">netstat -lt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有监听状态下的UDP端口</span></span><br><span class="line">netstat -lu</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有监听状态下的UNIX端口</span></span><br><span class="line">netstat -lx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出指定端口的进程</span></span><br><span class="line">netstat -an | grep &#x27;:80&#x27;</span><br></pre></td></tr></table></figure><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">独立命令(只能使用其中一个):</span><br><span class="line">-c: 建立压缩档案</span><br><span class="line">-x: 解压</span><br><span class="line">-t: 查看内容</span><br><span class="line">-r: 向压缩归档文件末尾追加文件</span><br><span class="line">-u: 更新原压缩包中的文件</span><br><span class="line"></span><br><span class="line">可选命令:</span><br><span class="line">-z: 有gzip属性的</span><br><span class="line">-j: 有bz2属性的</span><br><span class="line">-Z: 有compress属性的</span><br><span class="line">-v: 显示所有过程</span><br><span class="line">-O: 将文件解开到标准输出</span><br><span class="line"></span><br><span class="line">必需命令:</span><br><span class="line">-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</span><br><span class="line"></span><br><span class="line">tar -xvf file.tar # 解压file.tar并展示过程</span><br><span class="line">tar -xvzf file.tar.gz # 解压file.tar.gz并展示过程</span><br><span class="line">tar -xjvf file.tar.bz2# 解压file.tar.bz2并展示过程</span><br><span class="line">tar -xZvf file.tar.Z# 解压file.tar.Z并展示过程</span><br><span class="line"></span><br><span class="line">tar -cvf all.tar * # 将目录里所有文件打包成all.tar</span><br><span class="line">tar -czf jpg.tar.gz *.jpg   # 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个名为jpg.tar.gz的压缩包</span><br><span class="line">tar -cjf jpg.tar.bz2 *.jpg # 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个名为jpg.tar.bz2的压缩包</span><br><span class="line">tar -cZf jpg.tar.Z *.jpg    # 将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个jpg.tar.Z的压缩包</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## rar,zip</span></span></span><br><span class="line">unrar e file.rar</span><br><span class="line">unzip file.zip</span><br><span class="line"></span><br><span class="line">rar a jpg.rar *.jpg # rar格式的压缩</span><br><span class="line">zip jpg.zip *.jpg # zip格式的压缩</span><br></pre></td></tr></table></figure><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p><strong>命令格式：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [param] [doc]</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid&#x3D;PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval&#x3D;S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo</span><br><span class="line">echo 1 &gt; 1.txt# 将1输出到1.txt中</span><br><span class="line">echo 1 &gt;&gt; 1.txt# 将11追加到1.txt中</span><br></pre></td></tr></table></figure><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat# 查看文件内容</span><br><span class="line">cat -b# 对非空输出行号</span><br><span class="line">cat -n# 对所有行输出行号</span><br><span class="line">more# 分屏查看文件内容</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] -name ”*.py“ # 查找指定路径下扩展名是.py的文件，包括子目录</span><br></pre></td></tr></table></figure><h2 id="性能命令"><a href="#性能命令" class="headerlink" title="性能命令"></a>性能命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看CPU</span></span><br><span class="line">lscpu</span><br><span class="line"><span class="comment"># 查看内存</span></span><br><span class="line">free -h</span><br><span class="line"><span class="comment"># 查看磁盘</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="comment"># 查看Cpu使用情况</span></span><br><span class="line">top</span><br><span class="line"><span class="comment"># 显示磁盘剩余空间 -h:以人性化的方式显示</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 显示目录下的文件大小</span></span><br><span class="line"><span class="built_in">du</span> -h [目录名] --max-depth=1</span><br></pre></td></tr></table></figure><h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看系统时间</span></span><br><span class="line">date</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日历, -y 查看一年的日历</span></span><br><span class="line">cal</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看进程状态 a:显示所有进程 u:显示进程详细状态 x:显示没有控制终端的进程</span></span><br><span class="line">ps aux</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">动态显示运行中的程序并排序</span></span><br><span class="line">top</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止指定代号的进程，-9表示强行终止</span></span><br><span class="line">kill [pid]</span><br><span class="line">kill -9 [pid]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据进程名查看运行进程</span></span><br><span class="line">ps -ef | grep [进程名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询端口</span></span><br><span class="line">lsof -i:[端口号]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询防火墙对应的端口是否已开启</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已知服务使用端口，查看服务是否在监听</span></span><br><span class="line">netstat -anlp | grep :3306</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防火墙增加端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=8001/tcp</span><br></pre></td></tr></table></figure><p>软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">类似于windows的快捷方式，源文件要使用绝对路径，方便移动链接文件后还能使用</span></span><br><span class="line">ln -s [source] [target]</span><br></pre></td></tr></table></figure><p>硬链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">硬连接的源文件被删除，目标文件还是可以打开</span></span><br><span class="line">ln [source] [target]</span><br></pre></td></tr></table></figure><p>在 Linux 中，文件名和文件数据是分开存储的</p><p>在 Linux 中，只有文件的硬链接数等于0才会被删除</p><p>使用 ls -l 可以查看一个文件的硬链接数量</p><p><img src="https://img-blog.csdnimg.cn/20210406230655759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Vi命令"><a href="#Vi命令" class="headerlink" title="Vi命令"></a>Vi命令</h2><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><pre><code>  按「ESC」键</code></pre><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">「i」：进入插入模式，从光标当前位置开始输入文件。</span><br><span class="line">「a」：进入插入模式，从目前光标所在位置的下一个位置开始输入文字。</span><br><span class="line">「o」：进入插入模式，插入新的一行，从行首开始输入文字。</span><br></pre></td></tr></table></figure><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">「ctrl」+「b」：屏幕往&quot;后&quot;移动一页。</span><br><span class="line">「ctrl」+「f」：屏幕往&quot;前&quot;移动一页。</span><br><span class="line">「ctrl」+「u」：屏幕往&quot;后&quot;移动半页。</span><br><span class="line">「ctrl」+「d」：屏幕往&quot;前&quot;移动半页。</span><br><span class="line">「0」：移到文章的开头。</span><br><span class="line">「G」：移动到文章的最后。</span><br><span class="line">「$」：移动到光标所在行的&quot;行尾&quot;。</span><br><span class="line">「^」：移动到光标所在行的&quot;行首&quot;</span><br><span class="line">「w」：光标跳到下个字的开头</span><br><span class="line">「e」：光标跳到下个字的字尾</span><br><span class="line">「b」：光标回到上个字的开头</span><br></pre></td></tr></table></figure><h3 id="删除文字"><a href="#删除文字" class="headerlink" title="删除文字"></a>删除文字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">「x」：删除光标所在位置的&quot;后面&quot;1个字符。</span><br><span class="line">「#x」：删除光标所在位置的&quot;后面&quot;#个字符。</span><br><span class="line">「X」：删除光标所在位置的&quot;前面&quot;1个字符。</span><br><span class="line">「#X」：删除光标所在位置的&quot;前面&quot;#个字符。</span><br><span class="line">「dd」：删除光标所在行。</span><br><span class="line">「#dd」：从光标所在行开始删除#行</span><br></pre></td></tr></table></figure><h3 id="复制文字"><a href="#复制文字" class="headerlink" title="复制文字"></a>复制文字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">「yw」：复制光标到行尾的字符。</span><br><span class="line">「#yw」：复制#个字符。</span><br><span class="line">「yy」：复制光标所在行。</span><br><span class="line">「#yy」：复制包含光标所在行及后面的#行文字。</span><br><span class="line">「p」：粘贴复制的文字到光标所在位置。</span><br></pre></td></tr></table></figure><h3 id="替换文字"><a href="#替换文字" class="headerlink" title="替换文字"></a>替换文字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">「r」：替换光标所在处的字符。</span><br><span class="line">「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</span><br></pre></td></tr></table></figure><h3 id="返回上一次操作"><a href="#返回上一次操作" class="headerlink" title="返回上一次操作"></a>返回上一次操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按「u」键</span><br></pre></td></tr></table></figure><h3 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">「cw」：更改光标后到行尾的所有字符</span><br><span class="line">「c#w」：更改光标后的#个字符</span><br></pre></td></tr></table></figure><h3 id="跳至指定的行"><a href="#跳至指定的行" class="headerlink" title="跳至指定的行"></a>跳至指定的行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">「ctrl」+「g」：列出光标所在行的行号。</span><br><span class="line">「#G」：移动光标至文章的第#行行首。</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>搜索模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ : 前向搜索匹配</span><br><span class="line">? : 反向搜索匹配</span><br></pre></td></tr></table></figure><p>移动定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n  : 跳到下一个匹配的位置</span><br><span class="line">N  : 跳到上一个匹配的位置</span><br><span class="line">*  : 对光标当前所在的完整单词进行前向搜索匹配</span><br><span class="line">#  : 对光标当前所在的完整单词进行后向搜索匹配</span><br><span class="line">g* : 前向搜索光标当前所在单词</span><br><span class="line">g# : 反向搜索光标当前所在单词</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>从指定url下载资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure><p>开机启动项目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d</span><br></pre></td></tr></table></figure><p>环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启环境变量</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>nc命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">yum install <span class="literal">-y</span> nmap<span class="literal">-ncat</span></span><br><span class="line"><span class="comment"># 监听TCP/UDP端口</span></span><br><span class="line">nc localhost <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>后台启动程序并输出日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar myproject.jar &gt;myproject.log 2&gt;&amp;1 &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令详解：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">nohup</span>：不挂断地运行命令，退出帐户之后继续运行相应的进程。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;myproject.log：控制台输出到myproject.log日志文件中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2&gt;&amp;1：标准错误重定向到标准输出。每个进程都和三个系统文件相关联：标准输入stdin,标准输出stdout,标准错误stderr。三个系统文件的文件描述符分别为0,1,2。所以这里2&gt;&amp;1的意思就是将标准错误也输出到标准输出当中。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后的 &amp;：让作业在后台运行。</span></span><br></pre></td></tr></table></figure><p>父子进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash 开启一个子进程</span><br><span class="line">父子进程间数据是隔离的，但是父进程可以使用 export 使子进程看到数据</span><br><span class="line">export 的环境变量，子进程修改不会影响父进程，父进程修改也不会影响子进程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 权限</title>
      <link href="/swan-blog/2022/07/26/Linux/Linux%20%E6%9D%83%E9%99%90/"/>
      <url>/swan-blog/2022/07/26/Linux/Linux%20%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-权限"><a href="#Linux-权限" class="headerlink" title="Linux 权限"></a>Linux 权限</h1><h2 id="权限概述"><a href="#权限概述" class="headerlink" title="权限概述"></a>权限概述</h2><p>在 Linux 系统中，我们所有的操作实质都是在进行进程访问文件的操作。</p><p>我们访问文件需要先取得相应的访问权限，而访问权限是通过 Linux 系统中的安全模型获得的。</p><p>对于 Linux 系统中的安全模型，我们需要知道下面两点：</p><ol><li>Linux 系统上最初的安全模型叫 DAC, 全称是 Discretionary Access Control ，翻译为自主访问控制。</li><li>后来又增加设计了一个新的安全模型叫 MAC, 全称是 Mandatory Access Control, 翻译为强制访问控制。</li></ol><p>MAC 和 DAC 不互斥，DAC 是最基本的安全模型，也是通常我们最常用到的访问控制机制是 Linux 必须具有的功能， 而 MAC 是构建在 DAC 之上的加强安全机制，属于可选模块。访问前， Linux 系统通常都是先做 DAC 检查， 如果没有通过则操作直接失败 ; 如果通过 DAC 检查并且系统支持 MAC 模块，再做 MAC 权限检查。</p><h2 id="权限分类"><a href="#权限分类" class="headerlink" title="权限分类"></a>权限分类</h2><table><thead><tr><th>权限</th><th>缩写</th><th>数字代号</th></tr></thead><tbody><tr><td>Read</td><td>r</td><td>4</td></tr><tr><td>Write</td><td>w</td><td>2</td></tr><tr><td>Execute</td><td>x</td><td>1</td></tr></tbody></table><h2 id="权限说明"><a href="#权限说明" class="headerlink" title="权限说明"></a>权限说明</h2><p>通过 ll 查看文件列表，以某一个文件举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--  1 keith  staff   9.4K Feb 15 15:54 loss.py</span><br></pre></td></tr></table></figure><p>第 1 个字符表示文件类型，普通文件 (-)、目录文件 (d)、套接字文件 (s)，管道文件 (p)，字符文件 (c)，块文件 (b)，链接文件 (l)</p><p>第 2 个字符开始的 rw-r–r– 部分表示文件的权限位，共有 9 位。</p><p>含义是：</p><ol><li>第 2~4 位的 rw- 表示该文件可被它的 owner （属主）以 r 或 w 或 x 的权限访问。</li><li>第 5~7 位的 r– 表示该文件可被与该文件同一属组的用户以 r 或 x 的权限访问</li><li>第 8~10 位的 r– 表示该文件可被其它未知用户以 r 或 x 的权限访问。</li></ol><h2 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">减少权限</span></span><br><span class="line">chmod -rwx [文件名|目录名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加权限</span></span><br><span class="line">chmod +rwx [文件名|目录名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件|目录的拥有者</span></span><br><span class="line">chown [用户名] [文件名|目录名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归修改文件|目录的组</span></span><br><span class="line">chgrp -R [组名] [文件名|目录名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">递归修改文件权限</span></span><br><span class="line">chmod -R 755 [文件名|目录名]</span><br></pre></td></tr></table></figure><h2 id="获得权限"><a href="#获得权限" class="headerlink" title="获得权限"></a>获得权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定用户</span></span><br><span class="line">su [user]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂时切换为管理员权限</span></span><br><span class="line">sudo [command]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了频繁的执行某些只有超级用户才能执行的权限，可以使用下面命令</span></span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Netty/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Netty/</url>
      
        <content type="html"><![CDATA[<h2 id="Netty简介"><a href="#Netty简介" class="headerlink" title="Netty简介"></a>Netty简介</h2><p>Netty 是一个高性能，异步事件驱动的 NIO 框架，它提供了对 TCP、UDP 的文件传输支持。作为一个异步 NIO 框架，Netty 的所有 IO 操作都是异步非阻塞的，通过 Future-Listener 机制，用户可以通过 主动获取或通知机制获得 IO 操作结果。</p><p>Netty 功能特性如下：</p><ul><li>传输服务，支持 BIO 和 NIO。</li><li>容器集成，支持 OSGI、JBossMC、Spring、Guice 容器。</li><li>协议支持，HTTP、Protobuf、二进制、文本、WebSocket 等一系列常见协议都支持。还支持通过实行编码解码逻辑来实现自定义协议。</li><li>Core 核心，可扩展事件模型、通用通信 API、支持零拷贝的 ByteBuf 缓冲对象。</li></ul><h2 id="长连接和短连接"><a href="#长连接和短连接" class="headerlink" title="长连接和短连接"></a>长连接和短连接</h2><p><strong>长连接</strong></p><p>客户端和服务器连上之后不断开</p><p>应用场景：游戏服务器，服务器可以主动推送数据，传输二进制数据，协议自己攒，占用资源相对较多</p><p><strong>短连接</strong></p><p>客户端和服务器连上会还会断开</p><p>应用场景：Web 服务器，服务器不会主动推送数据，客户端请求后返回数据，传输文本数据，HTTP、HTML，占用资源相对较少</p><h2 id="Netty-Reactor-架构图"><a href="#Netty-Reactor-架构图" class="headerlink" title="Netty Reactor 架构图"></a>Netty Reactor 架构图</h2><p>Server 端包含 1 个 Boss NioEventLoopGroup 和 1 个 Worker NioEventLoopGroup。</p><p>NioEventLoopGroup 相当于 1 个事件循环组，这个组里包含多个事件循环 NioEventLoop，每个 NioEventLoop 包含 1 个 Selector 和 1 个事件循环线程。</p><p>每个 Boss NioEventLoop 循环执行的任务包含 3 步：</p><ul><li>轮询 Accept 事件。</li><li>处理 Accept I&#x2F;O 事件，与 Client 建立连接，生成 NioSocketChannel，并将 NioSocketChannel 注册到某个 Worker NioEventLoop 的 Selector 上。</li><li>处理任务队列中的任务，runAllTasks。任务队列中的任务包括用户调用 eventloop.execute 或 schedule 执行的任务，或者其他线程提交到该 eventloop 的任务。</li></ul><p>每个 Worker NioEventLoop 循环执行的任务包含 3 步：</p><ul><li>轮询 Read、Write 事件。</li><li>处理 I&#x2F;O 事件，即 Read、Write 事件，在 NioSocketChannel 可读、可写事件发生时进行处理。</li><li>处理任务队列中的任务，runAllTasks。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210207155958940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Netty-组件"><a href="#Netty-组件" class="headerlink" title="Netty 组件"></a>Netty 组件</h2><p><strong>Bootstrap、ServerBootstrap</strong></p><p>Bootstrap 意思是引导，一个 Netty 应用通常由一个 Bootstrap 开始，主要作用是配置整个 Netty 程序，串联各个组件，Netty 中 Bootstrap 类是客户端程序的启动引导类，ServerBootstrap 是服务端启动引导类。</p><p><strong>Future、ChannelFuture</strong></p><p>正如前面介绍，在 Netty 中所有的 IO 操作都是异步的，不能立刻得知消息是否被正确处理。</p><p>但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 Future 和 ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p><p><strong>Channel</strong></p><p>Netty 网络通信的组件，能够用于执行网络 I&#x2F;O 操作。Channel 为用户提供：</p><ul><li>当前网络连接的通道的状态（例如是否打开？是否已连接？）</li><li>网络连接的配置参数 （例如接收缓冲区大小）</li><li>提供异步的网络 I&#x2F;O 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 I&#x2F;O 调用都将立即返回，并且不保证在调用结束时所请求的 I&#x2F;O 操作已完成。 调用立即返回一个 ChannelFuture 实例，通过注册监听器到 ChannelFuture 上，可以 I&#x2F;O 操作成功、失败或取消时回调通知调用方。</li><li>支持关联 I&#x2F;O 操作与对应的处理程序。</li></ul><p>不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应。下面是一些常用的 Channel 类型：</p><ul><li>NioSocketChannel，异步的客户端 TCP Socket 连接。</li><li>NioServerSocketChannel，异步的服务器端 TCP Socket 连接。</li><li>NioDatagramChannel，异步的 UDP 连接。</li><li>NioSctpChannel，异步的客户端 Sctp 连接。</li><li>NioSctpServerChannel，异步的 Sctp 服务器端连接，这些通道涵盖了 UDP 和 TCP 网络 IO 以及文件 IO。</li></ul><p><strong>Selector</strong></p><p>Netty 基于 Selector 对象实现 I&#x2F;O 多路复用，通过 Selector 一个线程可以监听多个连接的 Channel 事件。</p><p>当向一个 Selector 中注册 Channel 后，Selector 内部的机制就可以自动不断地查询(Select) 这些注册的 Channel 是否有已就绪的 I&#x2F;O 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。</p><p><strong>NioEventLoop</strong></p><p>NioEventLoop 中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用 NioEventLoop 的 run 方法，执行 I&#x2F;O 任务和非 I&#x2F;O 任务：</p><ul><li>I&#x2F;O 任务，即 selectionKey 中 ready 的事件，如 accept、connect、read、write 等，由 processSelectedKeys 方法触发。</li><li>非 IO 任务，添加到 taskQueue 中的任务，如 register0、bind0 等任务，由 runAllTasks 方法触发。</li></ul><p>两种任务的执行时间比由变量 ioRatio 控制，默认为 50，则表示允许非 IO 任务执行的时间与 IO 任务的执行时间相等。</p><p><strong>NioEventLoopGroup</strong></p><p>NioEventLoopGroup，主要管理 eventLoop 的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个 Channel 上的事件，而一个 Channel 只对应于一个线程。</p><p><strong>ChannelHandler</strong></p><p>ChannelHandler 是一个接口，处理 I&#x2F;O 事件或拦截 I&#x2F;O 操作，并将其转发到其 ChannelPipeline(业务处理链)中的下一个处理程序。</p><p>ChannelHandler 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：</p><ul><li>ChannelInboundHandler 用于处理入站 I&#x2F;O 事件。</li><li>ChannelOutboundHandler 用于处理出站 I&#x2F;O 操作。</li></ul><p>或者使用以下适配器类：</p><ul><li>ChannelInboundHandlerAdapter 用于处理入站 I&#x2F;O 事件。</li><li>ChannelOutboundHandlerAdapter 用于处理出站 I&#x2F;O 操作。</li><li>ChannelDuplexHandler 用于处理入站和出站事件。</li></ul><p><strong>ChannelHandlerContext</strong></p><p>保存 Channel 相关的所有上下文信息，同时关联一个 ChannelHandler 对象。</p><p><strong>ChannelPipline</strong></p><p>保存 ChannelHandler 的 List，用于处理或拦截 Channel 的入站事件和出站操作。</p><p>ChannelPipeline 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 Channel 中各个的 ChannelHandler 如何相互交互。</p><p>下图引用 Netty 的 Javadoc 4.1 中 ChannelPipeline 的说明，描述了 ChannelPipeline 中 ChannelHandler 通常如何处理 I&#x2F;O 事件。</p><p>I&#x2F;O 事件由 ChannelInboundHandler 或 ChannelOutboundHandler 处理，并通过调用 ChannelHandlerContext 中定义的事件传播方法。</p><p>例如 ChannelHandlerContext.fireChannelRead（Object）和 ChannelOutboundInvoker.write（Object）转发到其最近的处理程序。</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20181102/d5981ee92f2442e2a0dc16b9b970a288.jpeg" alt="img"></p><p>入站事件由自下而上方向的入站处理程序处理，如图左侧所示。入站 Handler 处理程序通常处理由图底部的 I&#x2F;O 线程生成的入站数据。</p><p>通常通过实际输入操作（例如 SocketChannel.read（ByteBuffer））从远程读取入站数据。</p><p>出站事件由上下方向处理，如图右侧所示。出站 Handler 处理程序通常会生成或转换出站传输，例如 write 请求。</p><p>I&#x2F;O 线程通常执行实际的输出操作，例如 SocketChannel.write（ByteBuffer）。</p><p>在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应，它们的组成关系如下：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20181102/0676b41896ee4f8e87a006e993cca570.jpeg" alt="img"></p><p>一个 Channel 包含了一个 ChannelPipeline，而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表，并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler。</p><p>入站事件和出站事件在一个双向链表中，入站事件会从链表 head 往后传递到最后一个入站的 handler，出站事件会从链表 tail 往前传递到最前一个出站的 handler，两种类型的 handler 互不干扰。</p><h2 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h2><p>Netty 中的 I&#x2F;O 操作是异步的，包括 Bind、Write、Connect 等操作会简单的返回一个 ChannelFuture。</p><p>调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。</p><p>当 Future 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 ChannelFuture 来获取操作执行的状态，注册监听函数来执行完成后的操作。</p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><blockquote><p>Direct Buffers 使用堆外直接内存</p></blockquote><p>Netty 接收和发送 ByteBuffer 使用堆外直接内存进行 Socket 读写，不需要进行字节缓冲区的二次拷贝。</p><p>Netty 提供了组合 Buffer 对象，可以聚合多个 ByteBuffer 对象，用户可以像操作一个 Buffer 那样方便的对组合 Buffer 进行操作，避免了传统通过内存拷贝的方式将几个小 Buffer 合并成一个大 Buffer。</p><p>Netty 的文件传输采用了 transferTo 方法，它可以直接将文件缓冲区的数据发送到目标 Channel，避免传统循环 write 方式导致的内存拷贝问题。</p><h2 id="无锁设计-线程绑定"><a href="#无锁设计-线程绑定" class="headerlink" title="无锁设计 线程绑定"></a>无锁设计 线程绑定</h2><p>Netty 采用了串行无锁化设计，在 IO 线程内部进行串行操作，避免在多线程竞争导致的性能下降。</p><p>Netty 的 NioEventLoop 读取到消息后，直接调用 ChannelPipeline 的 fireChannelRead 方法，只要用户不主动切换线程，一直会由 NioEventLoop 调用到用户的 Handler，期间不进行线程切换，这种串行化的方式避免了多线程操作导致的锁竞争，从性能角度看是最优的。</p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Tomcat/"/>
      <url>/swan-blog/2022/07/26/%E5%BC%80%E5%8F%91%E9%9B%86/Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h2><p>Tomcat为什么慢，因为它在应用层，是Java开发跑在JVM上的，相当于在内核上又虚拟的一块内存出来，在CPU调内核的时候又切换成虚拟机的状态，所以性能低。</p><p><img src="https://img-blog.csdnimg.cn/202101161546587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>面向组件架构</li><li>基于JMX</li><li>事件侦听</li></ul><h2 id="面向组件架构"><a href="#面向组件架构" class="headerlink" title="面向组件架构"></a>面向组件架构</h2><p>tomcat代码看似很庞大，但从结构上看却很清晰和简单，它主要由一堆组件组成，如Server、Service、Connector等，并基于JMX管理这些组件，另外实现以上接口的组件也实现了代表生存期的接口Lifecycle，使其组件履行固定的生存期，在其整个生存期的过程中通过事件侦听LifecycleEvent实现扩展。Tomcat的核心类图如下所示：</p><p><img src="https://img-blog.csdnimg.cn/885184bfede04106a8c2af88bd8f5e0c.png" alt="在这里插入图片描述"></p><p>Catalina：与开始&#x2F;关闭shell脚本交互的主类，因此如果要研究启动和关闭的过程，就从这个类开始看起。</p><p>Server：是整个Tomcat组件的容器，包含一个或多个Service。</p><p>Service：Service是包含Connector和Container的集合，Service用适当的Connector接收用户的请求，再发给相应的Container来处理。</p><p>Connector：实现某一协议的连接器，如默认的有实现HTTP、HTTPS、AJP协议的。</p><p>Container：可以理解为处理某类型请求的容器，处理的方式一般为把处理请求的处理器包装为Valve对象，并按一定顺序放入类型为Pipeline的管道里。Container有多种子类型：Engine、Host、Context和Wrapper，这几种子类型Container依次包含，处理不同粒度的请求。另外Container里包含一些基础服务，如Loader、Manager和Realm。</p><p>Engine：Engine包含Host和Context，接到请求后仍给相应的Host在相应的Context里处理。</p><p>Host：就是我们所理解的虚拟主机。</p><p>Context：就是我们所部属的具体Web应用的上下文，每个请求都在是相应的上下文里处理的。</p><p>Wrapper：Wrapper是针对每个Servlet的Container，每个Servlet都有相应的Wrapper来管理。</p><p>可以看出Server、Service、Connector、Container、Engine、Host、Context和Wrapper这些核心组件的作用范围是逐层递减，并逐层包含。</p><p><strong>下面就是些被Container所用的基础组件</strong></p><p>Loader：是被Container用来载入各种所需的Class。</p><p>Manager：是被Container用来管理Session池。</p><p>Realm：是用来处理安全里授权与认证。</p><h2 id="基于JMX"><a href="#基于JMX" class="headerlink" title="基于JMX"></a>基于JMX</h2><p>Tomcat会为每个组件进行注册过程，通过Registry管理起来，而Registry是基于JMX来实现的，因此在看组件的init和start过程实际上就是初始化MBean和触发MBean的start方法，会大量看到形如下面这样的代码，这实际上就是通过JMX管理各种组件的行为和生命期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry.getRegistry(<span class="literal">null</span>, <span class="literal">null</span>).invoke(mbeans, <span class="string">&quot;init&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">Registry.getRegistry(<span class="literal">null</span>, <span class="literal">null</span>).invoke(mbeans, <span class="string">&quot;start&quot;</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h2 id="事件侦听"><a href="#事件侦听" class="headerlink" title="事件侦听"></a>事件侦听</h2><p>各个组件在其生命期中会有各种各样行为，而这些行为都有触发相应的事件，Tomcat就是通过侦听这些时间达到对这些行为进行扩展的目的。在看组件的init和start过程中会看到大量如：</p><p>lifecycle.fireLifecycleEvent(AFTER_START_EVENT, null);这样的代码，这就是对某一类型事件的触发，如果你想在其中加入自己的行为，就只用注册相应类型的事件即可。</p>]]></content>
      
      
      <categories>
          
          <category> 开发集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux IO模型</title>
      <link href="/swan-blog/2022/07/26/Linux/Linux%20IO%E6%A8%A1%E5%9E%8B/"/>
      <url>/swan-blog/2022/07/26/Linux/Linux%20IO%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念说明"><a href="#基本概念说明" class="headerlink" title="基本概念说明"></a>基本概念说明</h2><p><strong>用户空间和内核空间</strong></p><p>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核，保证内核的安全，操心系统将虚拟空间划分为两部分：内核空间，用户空间。</p><p><strong>进程切换</strong></p><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。进程切换很消耗资源。</p><p><strong>进程阻塞</strong></p><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。</p><p><strong>文件描述符</strong></p><p>是一个用于表述指向文件的引用的抽象化概念。它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。一个 Socket 连接实际上就是一个文件描述符。</p><p>查看一个进程的文件描述符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /proc/&#123;pid&#125;/fd</span><br></pre></td></tr></table></figure><p><strong>缓存IO</strong></p><p>缓存 I&#x2F;O 又被称作标准 I&#x2F;O，大多数文件系统的默认 I&#x2F;O 操作都是缓存 I&#x2F;O。在 Linux 的缓存 I&#x2F;O 机制中，操作系统会将 I&#x2F;O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><p><strong>说明</strong></p><p>客户端连接先到达内核，read命令可以读文件描述符</p><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><blockquote><p>阻塞</p></blockquote><p>同步阻塞，等待 read 命令时，线程一直处于阻塞状态。所以每次连接都要抛出一个新的线程。</p><p><strong>流程</strong></p><ol><li>客户端连接进入时阻塞，等待用户线程响应</li><li>用户线程响应后返回给客户端</li></ol><p><strong>弊端</strong></p><p>用户需要等待read将socket中的数据读取到buffer后，才继续处理接收的数据。整个IO请求的过程中，用户线程是被阻塞的，这导致用户在发起IO请求时，不能做任何事情，对CPU的资源利用率不够。</p><p><img src="https://img-blog.csdnimg.cn/20210202222236861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><blockquote><p>轮询</p></blockquote><p>同步非阻塞，轮询文件描述符调用 read，一个线程可以对应多个客户端连接。</p><p><strong>流程</strong></p><ol><li>客户端连接进入时不阻塞，而是把每个文件描述符放入List</li><li>对 List 里的文件描述符进行遍历，如果有数据则直接返回</li></ol><p><strong>弊端</strong></p><p>用户需要不断地调用read，尝试读取socket中的数据，直到读取成功后，才继续处理接收的数据。整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要不断地轮询、重复请求，消耗了大量的CPU的资源。</p><p><img src="https://img-blog.csdnimg.cn/2021020222244755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="NIO-多路复用"><a href="#NIO-多路复用" class="headerlink" title="NIO 多路复用"></a>NIO 多路复用</h2><blockquote><p>内核增加了 select 系统调用</p></blockquote><p><strong>流程</strong></p><ol><li>用户空间线程调用 select</li><li>内核轮询所有文件描述符并标记 ready 的文件描述符，之后将所有文件描述符返回给用户线程</li><li>用户线程遍历所有文件描述符挑出 ready 的去调用 read</li></ol><p><strong>缺陷</strong>：用户态和内核态传递数据的成本较高</p><p><img src="https://img-blog.csdnimg.cn/20210202224819803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><blockquote><p>用户空间和内核空间之间多出了一块虚拟的共享空间，共享空间是通过内核的系统调用 mmap 实现的。</p><p>共享空间的增删改操作由内核空间完成，但查询是用户空间和内核空间都可以查。</p></blockquote><p><strong>流程</strong></p><ol><li>每次客户端连接进来用户空间线程就将其文件描述符放入共享空间的红黑树中</li><li>此时用户空间调用 wait 等待事件</li><li>当内核准备好了数据，就将红黑树中已经 ready 的文件描述符放入链表中</li><li>此时用户空间 wait 释放，取链表中的文件描述符去调用 read</li></ol><p><img src="https://img-blog.csdnimg.cn/20210202232431428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h2><blockquote><p>零拷贝是通过系统调用 sendfile 实现的</p></blockquote><p>如果需要拷贝 file.txt 文件，用户空间线程调用内核的 read ，再去调用 write 返回到网卡。</p><p><img src="https://img-blog.csdnimg.cn/20210202230912874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 如果通过零拷贝，就可以直接调用内核的 sendfile，可以不跟用户空间产生IO</p><p><img src="https://img-blog.csdnimg.cn/20210202230508156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装RabbitMq</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85RabbitMq/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85RabbitMq/</url>
      
        <content type="html"><![CDATA[<h2 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:<span class="number">3.8</span>.<span class="number">2</span><span class="literal">-management</span></span><br></pre></td></tr></table></figure><h2 id="2-创建RabbitMq镜像实例"><a href="#2-创建RabbitMq镜像实例" class="headerlink" title="2. 创建RabbitMq镜像实例"></a>2. 创建RabbitMq镜像实例</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> rabbitmq \</span><br><span class="line"><span class="literal">--hostname</span> myRabbit \</span><br><span class="line"><span class="literal">-p</span> <span class="number">5672</span>:<span class="number">5672</span> <span class="literal">-p</span> <span class="number">15672</span>:<span class="number">15672</span> \</span><br><span class="line"><span class="literal">-v</span> /docker/rabbitmq/<span class="keyword">data</span>:/usr/local/rabbitmq<span class="literal">-docker</span> \</span><br><span class="line"><span class="literal">-e</span> RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line"><span class="literal">-e</span> RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">rabbitmq:<span class="number">3.8</span>.<span class="number">2</span><span class="literal">-management</span></span><br></pre></td></tr></table></figure><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>输入 ip:15672 访问</p><p><img src="https://img-blog.csdnimg.cn/20210101223742953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjEwMzAyNg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Redis</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Redis/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Redis/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建配置文件"><a href="#1-创建配置文件" class="headerlink" title="1. 创建配置文件"></a>1. 创建配置文件</h2><h4 id="1-1-创建目录"><a href="#1-1-创建目录" class="headerlink" title="1.1 创建目录"></a>1.1 创建目录</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /docker/redis/conf</span><br></pre></td></tr></table></figure><h4 id="1-2-将配置文件复制进去"><a href="#1-2-将配置文件复制进去" class="headerlink" title="1.2 将配置文件复制进去"></a>1.2 将配置文件复制进去</h4><p>找一份配置文件将其复制进去<br>修改以下参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将其注释</span></span><br><span class="line"><span class="comment"># bind 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其注释，因为与docker的-d冲突</span></span><br><span class="line"><span class="comment"># daemonize yes</span></span><br></pre></td></tr></table></figure><h2 id="2-创建容器"><a href="#2-创建容器" class="headerlink" title="2. 创建容器"></a>2. 创建容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name redis --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /docker/redis/data:/data \</span><br><span class="line">-v /docker/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">redis redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h2 id="3-运行容器中的redis客户端"><a href="#3-运行容器中的redis客户端" class="headerlink" title="3. 运行容器中的redis客户端"></a>3. 运行容器中的redis客户端</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis redis-cli</span><br></pre></td></tr></table></figure><p>查看Redis版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it redis redis-server -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Nginx</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Nginx/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="1-复制容器内的配置文件"><a href="#1-复制容器内的配置文件" class="headerlink" title="1. 复制容器内的配置文件"></a>1. 复制容器内的配置文件</h2><p>1.创建一个nginx容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="literal">--name</span> nginx nginx:<span class="number">1.16</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>2.复制容器内的配置文件到当前目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx .</span><br></pre></td></tr></table></figure><p>3.改名并移动到<code>~/docker/nginx/conf</code>目录</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="literal">-p</span> ~/docker/nginx</span><br><span class="line"><span class="built_in">mv</span> nginx ~/docker/nginx/conf</span><br></pre></td></tr></table></figure><p>4.删除容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br></pre></td></tr></table></figure><h2 id="2-创建nginx容器"><a href="#2-创建nginx容器" class="headerlink" title="2. 创建nginx容器"></a>2. 创建nginx容器</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> <span class="literal">--name</span> nginx <span class="literal">--privileged</span>=true \</span><br><span class="line"><span class="literal">-v</span> ~/docker/nginx/html:/usr/share/nginx/html \</span><br><span class="line"><span class="literal">-v</span> ~/docker/nginx/logs:/var/log/nginx \</span><br><span class="line"><span class="literal">-v</span> ~/docker/nginx/conf:/etc/nginx \</span><br><span class="line">nginx:<span class="number">1.16</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Mysql</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Mysql/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="1. 创建容器"></a>1. 创建容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=root --net=host \</span><br><span class="line">-v /docker/mysql/data:/mysql/data \</span><br><span class="line">-v /docker/mysql/logs/errlog:/mysql/data/discard/errlog \</span><br><span class="line">-v /docker/mysql/logs/binlog:/mysql/data/discard/logdir/binlog \</span><br><span class="line">-v /docker/mysql/logs/redolog:/mysql/data/discard/logdir/redolog \</span><br><span class="line">-v /docker/mysql/tmpdir:/mysql/data/discard/tmpdir \</span><br><span class="line">-v /docker/mysql/logs/slowlog:/mysql/data/discard/slowlog \</span><br><span class="line">-v /docker/mysql:/mysql/data/discard/other \</span><br><span class="line">-v /docker/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">--privileged=<span class="literal">true</span> mysql</span><br></pre></td></tr></table></figure><h2 id="2-进入容器"><a href="#2-进入容器" class="headerlink" title="2. 进入容器"></a>2. 进入容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure><h2 id="3-找到容器内配置文件位置"><a href="#3-找到容器内配置文件位置" class="headerlink" title="3. 找到容器内配置文件位置"></a>3. 找到容器内配置文件位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql --help | grep my.cnf</span><br><span class="line"></span><br><span class="line"># 按照路径优先排序，可能出现在以下路径，本人路径为 /etc/mysql/my.cnf</span><br><span class="line">order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf </span><br></pre></td></tr></table></figure><p>将配置文件内容复制一份到<code>/docker/mysql/conf</code>，然后就可以根据自己的需求修改配置了。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 基础</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%9F%BA%E7%A1%80/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"><span class="comment"># 可以拉取指定版本</span></span><br><span class="line">docker pull mysql:5.5</span><br><span class="line"><span class="comment"># 查询本地镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 删除本地镜像（根据 IMAGE_ID）</span></span><br><span class="line">docker rmi 0f3e07c0138f</span><br></pre></td></tr></table></figure><h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并启动容器 (-d 表示后台运行)</span></span><br><span class="line">docker run --name mytomcat -d tomcat:latest</span><br><span class="line"><span class="comment"># 查看创建了哪些容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 查看哪些容器正在运行</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 停止容器 （根据 容器名称 或 容器ID）</span></span><br><span class="line">docker stop mytomcat</span><br><span class="line"><span class="comment"># 启动容器 （根据 容器名称 或 容器ID）</span></span><br><span class="line">docker start mytomcat</span><br><span class="line"><span class="comment"># 删除容器 （根据 容器名称 或 容器ID）</span></span><br><span class="line">docker <span class="built_in">rm</span> mytomcat</span><br><span class="line"><span class="comment"># 配置端口映射（-p）主机端口：容器端口</span></span><br><span class="line">docker run --name mytomcat -d -p 8888:8080 tomcat:latest</span><br><span class="line"><span class="comment"># 可以使用一个镜像启动多个容器 例如：启动3个Tomcat服务器，端口为8881,8882,8883</span></span><br><span class="line">docker run --name mytomcat1 -d -p 8881:8080 tomcat:latest</span><br><span class="line">docker run --name mytomcat2 -d -p 8882:8080 tomcat:latest</span><br><span class="line">docker run --name mytomcat3 -d -p 8883:8080 tomcat:latest</span><br><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker logs mytomcat</span><br><span class="line"><span class="comment"># 进入容器（exit 命令退出）</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mytomcat bash </span><br></pre></td></tr></table></figure><h3 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t java-demo:v1.0 -f Dockerfile .  </span><br><span class="line"><span class="comment"># 提交镜像</span></span><br><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> [容器ID] [要创建的目标镜像名]:[标签名]</span><br><span class="line"><span class="comment"># 标签镜像</span></span><br><span class="line">docker tag java-demo:v1.0 rongkezan/java-demo:v1.0</span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push rongkezan/java-demo:v1.0</span><br></pre></td></tr></table></figure><p>更多命令：<a href="https://docs.docker.com/engine/reference/commandline/docker">https://docs.docker.com/engine/reference/commandline/docker</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装Jenkins</title>
      <link href="/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Jenkins/"/>
      <url>/swan-blog/2022/07/26/%E5%AE%B9%E5%99%A8%E5%8C%96/Docker/Docker%20%E5%AE%89%E8%A3%85Jenkins/</url>
      
        <content type="html"><![CDATA[<blockquote><p>服务器域名以 192.168.25.100 为例</p></blockquote><h2 id="Jenkins-安装"><a href="#Jenkins-安装" class="headerlink" title="Jenkins 安装"></a>Jenkins 安装</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:2.366-jdk11</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/docker/jenkins</span><br></pre></td></tr></table></figure><h3 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h3><blockquote><p>将maven和jdk下载好后放入 <code>/root/docker/</code>目录下</p></blockquote><p>因为当映射本地数据卷时，<code>/root/docker/jenkins</code>目录的拥有者为root用户而容器中<code>jenkins user</code>的<code>uid</code>为1000</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R 1000:1000 /root/docker/jenkins</span><br><span class="line">chown -R 1000:1000 /root/docker/maven</span><br><span class="line">chown -R 1000:1000 /root/docker/jdk11</span><br></pre></td></tr></table></figure><h3 id="运行-Jenkins-容器"><a href="#运行-Jenkins-容器" class="headerlink" title="运行 Jenkins 容器"></a>运行 Jenkins 容器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    -p 8000:8080 \</span><br><span class="line">    -p 50000:50000 \</span><br><span class="line">    -v /root/docker/jenkins:/var/jenkins_home \</span><br><span class="line">    -v /root/docker/maven:/var/maven \</span><br><span class="line">    -v /root/docker/jdk11:/var/jdk11 \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /proc:/host/proc \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name=jenkins \</span><br><span class="line">    --privileged=<span class="literal">true</span> \</span><br><span class="line">    --user=root \</span><br><span class="line">    jenkins/jenkins:2.366-jdk11</span><br></pre></td></tr></table></figure><ol><li><p>映射端口8080到8000，50000到50000</p></li><li><p>挂载 <code>jenkins_home</code> 到宿主机</p></li><li><p>挂载 <code>maven</code> 目录</p></li><li><p>挂载 <code>jdk11</code> 目录</p></li><li><p>同步宿主机时间</p></li><li><p>容器内部操作宿主机shell指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker里面执行</span></span><br><span class="line">nsenter --mount=/host/proc/1/ns/mnt sh -c <span class="string">&quot;ls /root&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置-Jenkins-插件镜像源"><a href="#配置-Jenkins-插件镜像源" class="headerlink" title="配置 Jenkins 插件镜像源"></a>配置 Jenkins 插件镜像源</h3><p>修改 <code>/var/jenkins_home/updates/default.json</code>文件里的镜像源地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s#https://updates.jenkins.io/download#https://mirrors.tuna.tsinghua.edu.cn/jenkins#g&#x27;</span> default.json</span><br><span class="line">sed -i <span class="string">&#x27;s#https://www.google.com#https://www.baidu.com#g&#x27;</span> default.json</span><br></pre></td></tr></table></figure><p>将 <code>default.json</code> 上传到服务器，使用nginx指向到该文件 <code>https://static.51nftcard.com/update-center.json</code></p><p>修改<code>/var/jenkins_home/hudson.model.UpdateCenter.xml</code>文件里的镜像源地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://static.51nftcard.com/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启 <code>jenkins</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart jenkins</span><br></pre></td></tr></table></figure><h2 id="Jenkins使用"><a href="#Jenkins使用" class="headerlink" title="Jenkins使用"></a>Jenkins使用</h2><h3 id="登录-Jenkins"><a href="#登录-Jenkins" class="headerlink" title="登录 Jenkins"></a>登录 Jenkins</h3><p>访问 Jenkins 页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.25.100:8000</span><br></pre></td></tr></table></figure><p>获取管理员密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/docker/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">85770376692448b7b6a8e301fb437848</span><br></pre></td></tr></table></figure><p>登录后安装推荐插件</p><h3 id="配置-maven-jdk-git"><a href="#配置-maven-jdk-git" class="headerlink" title="配置 maven jdk git"></a>配置 maven jdk git</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><blockquote><p>Manage Jenkins -&gt; Manage Plugins</p></blockquote><ol><li>Maven Integration</li><li>Git Parameter</li></ol><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><blockquote><p>Manage Jenkins -&gt; Global Tool Configuration</p></blockquote><p><img src="https://img-blog.csdnimg.cn/f71852ddbfe040eca8229800b13e7858.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/b5e8acc99fbe40498db0d20d7cf305f2.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/3945462ac7de47ca90187876ee6ae8ec.png" alt="在这里插入图片描述"></p><h3 id="构建Maven项目"><a href="#构建Maven项目" class="headerlink" title="构建Maven项目"></a>构建Maven项目</h3><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>New Item -&gt; Maven Project</p><h4 id="配置Git参数化构建"><a href="#配置Git参数化构建" class="headerlink" title="配置Git参数化构建"></a>配置Git参数化构建</h4><p>This project is parameterized -&gt; Add Parameter : Git Parameter</p><p><img src="https://img-blog.csdnimg.cn/7a07e7b5bc124a44b987141efead36a0.png" alt="在这里插入图片描述"></p><h4 id="配置Git仓库地址"><a href="#配置Git仓库地址" class="headerlink" title="配置Git仓库地址"></a>配置Git仓库地址</h4><p>Source Code Management</p><p><img src="https://img-blog.csdnimg.cn/c14d1a1e276547588ca128c7719ffc3d.png" alt="在这里插入图片描述"></p><h4 id="配置Maven脚本"><a href="#配置Maven脚本" class="headerlink" title="配置Maven脚本"></a>配置Maven脚本</h4><p><img src="https://img-blog.csdnimg.cn/f83b5eb8745e469f81c5a9228538ee5c.png" alt="在这里插入图片描述"></p><h2 id="执行Shell脚本"><a href="#执行Shell脚本" class="headerlink" title="执行Shell脚本"></a>执行Shell脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nsenter --mount=/host/proc/1/ns/mnt sh -c <span class="string">&quot;ls /root&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
